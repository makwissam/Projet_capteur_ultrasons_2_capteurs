
Projet_ultrason.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009860  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08009a30  08009a30  00019a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f84  08009f84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f8c  08009f8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e0  0800a174  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800a174  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ada  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002447  00000000  00000000  00030cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00033fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026af5  00000000  00000000  00034d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010083  00000000  00000000  0005b82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f27  00000000  00000000  0006b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c7d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c0  00000000  00000000  0015c82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a18 	.word	0x08009a18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009a18 	.word	0x08009a18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001034:	1d39      	adds	r1, r7, #4
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	2201      	movs	r2, #1
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <__io_putchar+0x20>)
 800103e:	f003 f82f 	bl	80040a0 <HAL_UART_Transmit>
return ch;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200002a4 	.word	0x200002a4

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f000 fe13 	bl	8001c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f826 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 f9ce 	bl	80013fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001060:	f000 f99c 	bl	800139c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001064:	f000 f8b0 	bl	80011c8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001068:	f000 f94a 	bl	8001300 <MX_TIM4_Init>
  MX_TIM3_Init();
 800106c:	f000 f8fa 	bl	8001264 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <main+0x44>)
 8001072:	f002 fb5b 	bl	800372c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart1, data, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	4907      	ldr	r1, [pc, #28]	; (8001098 <main+0x48>)
 800107a:	4808      	ldr	r0, [pc, #32]	; (800109c <main+0x4c>)
 800107c:	f003 f8a3 	bl	80041c6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT (&huart1, data_2, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	4907      	ldr	r1, [pc, #28]	; (80010a0 <main+0x50>)
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <main+0x4c>)
 8001086:	f003 f89e 	bl	80041c6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim4);
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <main+0x54>)
 800108c:	f002 fade 	bl	800364c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001090:	e7fe      	b.n	8001090 <main+0x40>
 8001092:	bf00      	nop
 8001094:	20000340 	.word	0x20000340
 8001098:	20000328 	.word	0x20000328
 800109c:	200002a4 	.word	0x200002a4
 80010a0:	20000334 	.word	0x20000334
 80010a4:	2000020c 	.word	0x2000020c

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0b4      	sub	sp, #208	; 0xd0
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f866 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2284      	movs	r2, #132	; 0x84
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 f857 	bl	8005188 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <SystemClock_Config+0x118>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <SystemClock_Config+0x118>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <SystemClock_Config+0x118>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <SystemClock_Config+0x11c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a33      	ldr	r2, [pc, #204]	; (80011c4 <SystemClock_Config+0x11c>)
 80010f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <SystemClock_Config+0x11c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800112e:	23d8      	movs	r3, #216	; 0xd8
 8001130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001144:	4618      	mov	r0, r3
 8001146:	f001 f98d 	bl	8002464 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001150:	f000 fa42 	bl	80015d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001154:	f001 f936 	bl	80023c4 <HAL_PWREx_EnableOverDrive>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800115e:	f000 fa3b 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001174:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800117c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001184:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001188:	2107      	movs	r1, #7
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fc0e 	bl	80029ac <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001196:	f000 fa1f 	bl	80015d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800119a:	2340      	movs	r3, #64	; 0x40
 800119c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800119e:	2300      	movs	r3, #0
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fe08 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80011b2:	f000 fa11 	bl	80015d8 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	37d0      	adds	r7, #208	; 0xd0
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_TIM2_Init+0x98>)
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_TIM2_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_TIM2_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1079;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_TIM2_Init+0x98>)
 80011fc:	f240 4237 	movw	r2, #1079	; 0x437
 8001200:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_TIM2_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_TIM2_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <MX_TIM2_Init+0x98>)
 8001210:	f002 f9c4 	bl	800359c <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800121a:	f000 f9dd 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_TIM2_Init+0x98>)
 800122c:	f002 fc16 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001236:	f000 f9cf 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM2_Init+0x98>)
 8001248:	f002 fe30 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001252:	f000 f9c1 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000340 	.word	0x20000340

08001264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_TIM3_Init+0x94>)
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <MX_TIM3_Init+0x98>)
 8001286:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM3_Init+0x94>)
 800128a:	226b      	movs	r2, #107	; 0x6b
 800128c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM3_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16666;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_TIM3_Init+0x94>)
 8001296:	f244 121a 	movw	r2, #16666	; 0x411a
 800129a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_TIM3_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_TIM3_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <MX_TIM3_Init+0x94>)
 80012aa:	f002 f977 	bl	800359c <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012b4:	f000 f990 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_TIM3_Init+0x94>)
 80012c6:	f002 fbc9 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 f982 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM3_Init+0x94>)
 80012e2:	f002 fde3 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012ec:	f000 f974 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000258 	.word	0x20000258
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_TIM4_Init+0x94>)
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <MX_TIM4_Init+0x98>)
 8001322:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_TIM4_Init+0x94>)
 8001326:	226b      	movs	r2, #107	; 0x6b
 8001328:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_TIM4_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16666;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_TIM4_Init+0x94>)
 8001332:	f244 121a 	movw	r2, #16666	; 0x411a
 8001336:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_TIM4_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_TIM4_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_TIM4_Init+0x94>)
 8001346:	f002 f929 	bl	800359c <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001350:	f000 f942 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_TIM4_Init+0x94>)
 8001362:	f002 fb7b 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800136c:	f000 f934 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_TIM4_Init+0x94>)
 800137e:	f002 fd95 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 f926 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000020c 	.word	0x2000020c
 8001398:	40000800 	.word	0x40000800

0800139c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <MX_USART1_UART_Init+0x5c>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013e0:	f002 fe10 	bl	8004004 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 f8f5 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002a4 	.word	0x200002a4
 80013f8:	40011000 	.word	0x40011000

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <MX_GPIO_Init+0x134>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a46      	ldr	r2, [pc, #280]	; (8001530 <MX_GPIO_Init+0x134>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <MX_GPIO_Init+0x134>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <MX_GPIO_Init+0x134>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <MX_GPIO_Init+0x134>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <MX_GPIO_Init+0x134>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <MX_GPIO_Init+0x134>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <MX_GPIO_Init+0x134>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <MX_GPIO_Init+0x134>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <MX_GPIO_Init+0x134>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <MX_GPIO_Init+0x134>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <MX_GPIO_Init+0x134>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <MX_GPIO_Init+0x134>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <MX_GPIO_Init+0x134>)
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_GPIO_Init+0x134>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_GPIO_Init+0x138>)
 8001490:	f000 ff5a 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	4827      	ldr	r0, [pc, #156]	; (8001538 <MX_GPIO_Init+0x13c>)
 800149a:	f000 ff55 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800149e:	2310      	movs	r3, #16
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_GPIO_Init+0x140>)
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4823      	ldr	r0, [pc, #140]	; (8001540 <MX_GPIO_Init+0x144>)
 80014b2:	f000 fd85 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <MX_GPIO_Init+0x138>)
 80014ce:	f000 fd77 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d2:	2340      	movs	r3, #64	; 0x40
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_GPIO_Init+0x140>)
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <MX_GPIO_Init+0x138>)
 80014e6:	f000 fd6b 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001502:	f000 fd5d 	bl	8001fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200a      	movs	r0, #10
 800150c:	f000 fc9c 	bl	8001e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001510:	200a      	movs	r0, #10
 8001512:	f000 fcb5 	bl	8001e80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2017      	movs	r0, #23
 800151c:	f000 fc94 	bl	8001e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001520:	2017      	movs	r0, #23
 8001522:	f000 fcad 	bl	8001e80 <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40021800 	.word	0x40021800
 800153c:	10110000 	.word	0x10110000
 8001540:	40020400 	.word	0x40020400

08001544 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	if(huart->Instance ==USART1){
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_UART_RxCpltCallback+0x54>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11b      	bne.n	800158e <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart1, data,1);
 8001556:	2201      	movs	r2, #1
 8001558:	4910      	ldr	r1, [pc, #64]	; (800159c <HAL_UART_RxCpltCallback+0x58>)
 800155a:	4811      	ldr	r0, [pc, #68]	; (80015a0 <HAL_UART_RxCpltCallback+0x5c>)
 800155c:	f002 fe33 	bl	80041c6 <HAL_UART_Receive_IT>
		if(!strncmp("T",data,1)){
 8001560:	2201      	movs	r2, #1
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <HAL_UART_RxCpltCallback+0x58>)
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <HAL_UART_RxCpltCallback+0x60>)
 8001566:	f004 fccf 	bl	8005f08 <strncmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d103      	bne.n	8001578 <HAL_UART_RxCpltCallback+0x34>
			ASK_T = 1;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_UART_RxCpltCallback+0x64>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
		}
		else if(!strncmp("U",data,1)){
			ASK_U = 1;
		}
	}
}
 8001576:	e00a      	b.n	800158e <HAL_UART_RxCpltCallback+0x4a>
		else if(!strncmp("U",data,1)){
 8001578:	2201      	movs	r2, #1
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <HAL_UART_RxCpltCallback+0x58>)
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <HAL_UART_RxCpltCallback+0x68>)
 800157e:	f004 fcc3 	bl	8005f08 <strncmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <HAL_UART_RxCpltCallback+0x4a>
			ASK_U = 1;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_UART_RxCpltCallback+0x6c>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40011000 	.word	0x40011000
 800159c:	20000328 	.word	0x20000328
 80015a0:	200002a4 	.word	0x200002a4
 80015a4:	08009a30 	.word	0x08009a30
 80015a8:	200001fc 	.word	0x200001fc
 80015ac:	08009a34 	.word	0x08009a34
 80015b0:	200001fd 	.word	0x200001fd

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c6:	f000 fb67 	bl	8001c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010000 	.word	0x40010000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_MspInit+0x44>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_MspInit+0x44>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x44>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x44>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x44>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x44>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d114      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a25      	ldr	r2, [pc, #148]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	201c      	movs	r0, #28
 800165c:	f000 fbf4 	bl	8001e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001660:	201c      	movs	r0, #28
 8001662:	f000 fc0d 	bl	8001e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001666:	e032      	b.n	80016ce <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <HAL_TIM_Base_MspInit+0xb0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d114      	bne.n	800169c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201d      	movs	r0, #29
 8001690:	f000 fbda 	bl	8001e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001694:	201d      	movs	r0, #29
 8001696:	f000 fbf3 	bl	8001e80 <HAL_NVIC_EnableIRQ>
}
 800169a:	e018      	b.n	80016ce <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_TIM_Base_MspInit+0xb4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d113      	bne.n	80016ce <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_TIM_Base_MspInit+0xac>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	201e      	movs	r0, #30
 80016c4:	f000 fbc0 	bl	8001e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016c8:	201e      	movs	r0, #30
 80016ca:	f000 fbd9 	bl	8001e80 <HAL_NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40000800 	.word	0x40000800

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <HAL_UART_MspInit+0xc4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d14c      	bne.n	80017a0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_UART_MspInit+0xc8>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a28      	ldr	r2, [pc, #160]	; (80017ac <HAL_UART_MspInit+0xc8>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <HAL_UART_MspInit+0xc8>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_UART_MspInit+0xc8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_UART_MspInit+0xc8>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_UART_MspInit+0xc8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_UART_MspInit+0xc8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_UART_MspInit+0xc8>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_UART_MspInit+0xc8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175e:	2307      	movs	r3, #7
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <HAL_UART_MspInit+0xcc>)
 800176a:	f000 fc29 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001780:	2307      	movs	r3, #7
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	480a      	ldr	r0, [pc, #40]	; (80017b4 <HAL_UART_MspInit+0xd0>)
 800178c:	f000 fc18 	bl	8001fc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2025      	movs	r0, #37	; 0x25
 8001796:	f000 fb57 	bl	8001e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800179a:	2025      	movs	r0, #37	; 0x25
 800179c:	f000 fb70 	bl	8001e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020000 	.word	0x40020000

080017b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	2019      	movs	r0, #25
 80017ce:	f000 fb3b 	bl	8001e48 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017d2:	2019      	movs	r0, #25
 80017d4:	f000 fb54 	bl	8001e80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_InitTick+0xa0>)
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_InitTick+0xa0>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6453      	str	r3, [r2, #68]	; 0x44
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_InitTick+0xa0>)
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f0:	f107 0210 	add.w	r2, r7, #16
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 faac 	bl	8002d58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001800:	f001 fa96 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8001804:	4603      	mov	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_InitTick+0xa4>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9b      	lsrs	r3, r3, #18
 8001814:	3b01      	subs	r3, #1
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_InitTick+0xa8>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <HAL_InitTick+0xac>)
 800181c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_InitTick+0xa8>)
 8001820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001824:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_InitTick+0xa8>)
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_InitTick+0xa8>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_InitTick+0xa8>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <HAL_InitTick+0xa8>)
 800183a:	f001 feaf 	bl	800359c <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <HAL_InitTick+0xa8>)
 8001846:	f001 ff71 	bl	800372c <HAL_TIM_Base_Start_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	431bde83 	.word	0x431bde83
 8001860:	2000038c 	.word	0x2000038c
 8001864:	40010000 	.word	0x40010000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	TIM4->CNT = 0;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <EXTI4_IRQHandler+0x68>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 80018cc:	bf00      	nop
 80018ce:	2140      	movs	r1, #64	; 0x40
 80018d0:	4816      	ldr	r0, [pc, #88]	; (800192c <EXTI4_IRQHandler+0x6c>)
 80018d2:	f000 fd21 	bl	8002318 <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f8      	bne.n	80018ce <EXTI4_IRQHandler+0xe>

	float distance_capteur_2 = (340 * (float)(TIM4->CNT)/200000); //distance capteur 2 = v*t/1000000 (1 tick dure 1us) et /2 pour l'aller-retour
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <EXTI4_IRQHandler+0x68>)
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001930 <EXTI4_IRQHandler+0x70>
 80018ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018f0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001934 <EXTI4_IRQHandler+0x74>
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	edc7 7a01 	vstr	s15, [r7, #4]
	printf("Capteur 2 : duree = %d ticks \r\n", TIM4->CNT);
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <EXTI4_IRQHandler+0x68>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <EXTI4_IRQHandler+0x78>)
 8001904:	f004 fac2 	bl	8005e8c <iprintf>
	printf("Capteur 2 : distance = %f m\r\n ", distance_capteur_2);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7fe fe3d 	bl	8000588 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	480a      	ldr	r0, [pc, #40]	; (800193c <EXTI4_IRQHandler+0x7c>)
 8001914:	f004 faba 	bl	8005e8c <iprintf>

	//TIM4->CNT = 0;

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001918:	2010      	movs	r0, #16
 800191a:	f000 fd2f 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40000800 	.word	0x40000800
 800192c:	40020800 	.word	0x40020800
 8001930:	43aa0000 	.word	0x43aa0000
 8001934:	48435000 	.word	0x48435000
 8001938:	08009a38 	.word	0x08009a38
 800193c:	08009a58 	.word	0x08009a58

08001940 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	TIM4->CNT = 0;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <EXTI9_5_IRQHandler+0x68>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 800194c:	bf00      	nop
 800194e:	2140      	movs	r1, #64	; 0x40
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <EXTI9_5_IRQHandler+0x6c>)
 8001952:	f000 fce1 	bl	8002318 <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f8      	bne.n	800194e <EXTI9_5_IRQHandler+0xe>
	//float distance_capteur_1 = TIM4->CNT;

	float distance_capteur_1 = (340 * (float)(TIM4->CNT)/2000000); //distance capteur 1 = v*t/1000000 (1 tick dure 1us) et /2 pour l'aller-retour
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <EXTI9_5_IRQHandler+0x68>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001968:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80019b0 <EXTI9_5_IRQHandler+0x70>
 800196c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001970:	eddf 6a10 	vldr	s13, [pc, #64]	; 80019b4 <EXTI9_5_IRQHandler+0x74>
 8001974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001978:	edc7 7a01 	vstr	s15, [r7, #4]
	printf("Capteur 1 : duree = %d ticks \r\n", TIM4->CNT);
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <EXTI9_5_IRQHandler+0x68>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <EXTI9_5_IRQHandler+0x78>)
 8001984:	f004 fa82 	bl	8005e8c <iprintf>
	printf("Capteur 1 : distance = %f m\r\n ", distance_capteur_1);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7fe fdfd 	bl	8000588 <__aeabi_f2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <EXTI9_5_IRQHandler+0x7c>)
 8001994:	f004 fa7a 	bl	8005e8c <iprintf>

	//TIM3->CNT = 0;

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001998:	2040      	movs	r0, #64	; 0x40
 800199a:	f000 fcef 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40000800 	.word	0x40000800
 80019ac:	40020800 	.word	0x40020800
 80019b0:	43aa0000 	.word	0x43aa0000
 80019b4:	49f42400 	.word	0x49f42400
 80019b8:	08009a78 	.word	0x08009a78
 80019bc:	08009a98 	.word	0x08009a98

080019c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019c6:	f001 ff29 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000038c 	.word	0x2000038c

080019d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //HAL_TIM_Base_Stop_IT(&htim2);

  if(ASK_T==1){
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <TIM2_IRQHandler+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <TIM2_IRQHandler+0x1e>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // Trigger capteur 1
 80019e0:	2201      	movs	r2, #1
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	4812      	ldr	r0, [pc, #72]	; (8001a30 <TIM2_IRQHandler+0x5c>)
 80019e6:	f000 fcaf 	bl	8002348 <HAL_GPIO_WritePin>
	  ASK_T=0;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <TIM2_IRQHandler+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e016      	b.n	8001a20 <TIM2_IRQHandler+0x4c>
  }

  else if(ASK_U==1) {
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <TIM2_IRQHandler+0x60>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <TIM2_IRQHandler+0x38>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET); // Trigger capteur 2
 80019fa:	2201      	movs	r2, #1
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <TIM2_IRQHandler+0x64>)
 8001a00:	f000 fca2 	bl	8002348 <HAL_GPIO_WritePin>
	  ASK_U=0;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <TIM2_IRQHandler+0x60>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e009      	b.n	8001a20 <TIM2_IRQHandler+0x4c>
  }

  else{
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <TIM2_IRQHandler+0x5c>)
 8001a12:	f000 fc99 	bl	8002348 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2140      	movs	r1, #64	; 0x40
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <TIM2_IRQHandler+0x64>)
 8001a1c:	f000 fc94 	bl	8002348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
   }*/
	//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <TIM2_IRQHandler+0x68>)
 8001a22:	f001 fefb 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001fc 	.word	0x200001fc
 8001a30:	40020800 	.word	0x40020800
 8001a34:	200001fd 	.word	0x200001fd
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	20000340 	.word	0x20000340

08001a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TIM3_IRQHandler+0x10>)
 8001a46:	f001 fee9 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000258 	.word	0x20000258

08001a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM4_IRQHandler+0x10>)
 8001a5a:	f001 fedf 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000020c 	.word	0x2000020c

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f002 fbe7 	bl	8004240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002a4 	.word	0x200002a4

08001a7c <_getpid>:
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	2301      	movs	r3, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_kill>:
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	f003 fb4d 	bl	8005134 <__errno>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2216      	movs	r2, #22
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_exit>:
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffe7 	bl	8001a8c <_kill>
 8001abe:	e7fe      	b.n	8001abe <_exit+0x12>

08001ac0 <_read>:
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e00a      	b.n	8001ae8 <_read+0x28>
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf0      	blt.n	8001ad2 <_read+0x12>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_write>:
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e009      	b.n	8001b20 <_write+0x26>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	60ba      	str	r2, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fa89 	bl	800102c <__io_putchar>
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf1      	blt.n	8001b0c <_write+0x12>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_close>:
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_fstat>:
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_isatty>:
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	2301      	movs	r3, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_lseek>:
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <_sbrk>:
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
 8001bcc:	f003 fab2 	bl	8005134 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20050000 	.word	0x20050000
 8001bfc:	00000400 	.word	0x00000400
 8001c00:	20000200 	.word	0x20000200
 8001c04:	200003f0 	.word	0x200003f0

08001c08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
 8001c36:	2300      	movs	r3, #0
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:
 8001c3a:	58d4      	ldr	r4, [r2, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:
 8001c40:	18c4      	adds	r4, r0, r3
 8001c42:	428c      	cmp	r4, r1
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:
 8001c52:	42a2      	cmp	r2, r4
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
 8001c5a:	f003 fa71 	bl	8005140 <__libc_init_array>
 8001c5e:	f7ff f9f7 	bl	8001050 <main>
 8001c62:	4770      	bx	lr
 8001c64:	20050000 	.word	0x20050000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	200001e0 	.word	0x200001e0
 8001c70:	08009f94 	.word	0x08009f94
 8001c74:	200001e0 	.word	0x200001e0
 8001c78:	200003ec 	.word	0x200003ec

08001c7c <ADC_IRQHandler>:
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>

08001c7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c82:	2003      	movs	r0, #3
 8001c84:	f000 f8d5 	bl	8001e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c88:	200f      	movs	r0, #15
 8001c8a:	f7ff fd95 	bl	80017b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c8e:	f7ff fca9 	bl	80015e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200003d8 	.word	0x200003d8

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200003d8 	.word	0x200003d8

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <__NVIC_SetPriorityGrouping+0x40>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x40>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	05fa0000 	.word	0x05fa0000

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff4c 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5a:	f7ff ff61 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f7ff ffb1 	bl	8001dcc <NVIC_EncodePriority>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff80 	bl	8001d78 <__NVIC_SetPriority>
}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff54 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eaa:	f7ff ff09 	bl	8001cc0 <HAL_GetTick>
 8001eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e052      	b.n	8001f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0216 	bic.w	r2, r2, #22
 8001edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <HAL_DMA_Abort+0x62>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1e:	e013      	b.n	8001f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f20:	f7ff fece 	bl	8001cc0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d90c      	bls.n	8001f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2220      	movs	r2, #32
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e015      	b.n	8001f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e4      	bne.n	8001f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d004      	beq.n	8001f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00c      	b.n	8001fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e175      	b.n	80022cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8164 	bne.w	80022c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d00b      	beq.n	800201e <HAL_GPIO_Init+0x5e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002012:	2b11      	cmp	r3, #17
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b12      	cmp	r3, #18
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x100>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80be 	beq.w	80022c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_GPIO_Init+0x324>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_GPIO_Init+0x324>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_GPIO_Init+0x324>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002162:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_GPIO_Init+0x328>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d037      	beq.n	80021fe <HAL_GPIO_Init+0x23e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_GPIO_Init+0x23a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x236>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_GPIO_Init+0x338>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x232>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x33c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x22e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_GPIO_Init+0x340>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x22a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_GPIO_Init+0x344>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a51      	ldr	r2, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x348>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a50      	ldr	r2, [pc, #320]	; (800230c <HAL_GPIO_Init+0x34c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	; (8002310 <HAL_GPIO_Init+0x350>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x21a>
 80021d6:	2309      	movs	r3, #9
 80021d8:	e012      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021da:	230a      	movs	r3, #10
 80021dc:	e010      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021de:	2308      	movs	r3, #8
 80021e0:	e00e      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e6:	2306      	movs	r3, #6
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	; (80022e8 <HAL_GPIO_Init+0x328>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <HAL_GPIO_Init+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_GPIO_Init+0x354>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x354>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x354>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae86 	bls.w	8001fe0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40021c00 	.word	0x40021c00
 800230c:	40022000 	.word	0x40022000
 8002310:	40022400 	.word	0x40022400
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e001      	b.n	800233a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f806 	bl	80023ac <HAL_GPIO_EXTI_Callback>
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_PWREx_EnableOverDrive+0x98>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a22      	ldr	r2, [pc, #136]	; (800245c <HAL_PWREx_EnableOverDrive+0x98>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_PWREx_EnableOverDrive+0x98>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f2:	f7ff fc65 	bl	8001cc0 <HAL_GetTick>
 80023f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023f8:	e009      	b.n	800240e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023fa:	f7ff fc61 	bl	8001cc0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002408:	d901      	bls.n	800240e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e022      	b.n	8002454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241a:	d1ee      	bne.n	80023fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002426:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002428:	f7ff fc4a 	bl	8001cc0 <HAL_GetTick>
 800242c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800242e:	e009      	b.n	8002444 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002430:	f7ff fc46 	bl	8001cc0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800243e:	d901      	bls.n	8002444 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e007      	b.n	8002454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002450:	d1ee      	bne.n	8002430 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e291      	b.n	800299e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002488:	4b96      	ldr	r3, [pc, #600]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	d00c      	beq.n	80024ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002494:	4b93      	ldr	r3, [pc, #588]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d112      	bne.n	80024c6 <HAL_RCC_OscConfig+0x62>
 80024a0:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b8d      	ldr	r3, [pc, #564]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06c      	beq.n	8002594 <HAL_RCC_OscConfig+0x130>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d168      	bne.n	8002594 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e26b      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x7a>
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a83      	ldr	r2, [pc, #524]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e02e      	b.n	800253c <HAL_RCC_OscConfig+0xd8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x9c>
 80024e6:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7e      	ldr	r2, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b7c      	ldr	r3, [pc, #496]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7b      	ldr	r2, [pc, #492]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e01d      	b.n	800253c <HAL_RCC_OscConfig+0xd8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0xc0>
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a72      	ldr	r2, [pc, #456]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0xd8>
 8002524:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6b      	ldr	r2, [pc, #428]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fbbc 	bl	8001cc0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff fbb8 	bl	8001cc0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e21f      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b61      	ldr	r3, [pc, #388]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0xe8>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fba8 	bl	8001cc0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff fba4 	bl	8001cc0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e20b      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x110>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d069      	beq.n	8002676 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a2:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x190>
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x17a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1df      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	493d      	ldr	r1, [pc, #244]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	e040      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fc:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff fb5a 	bl	8001cc0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff fb56 	bl	8001cc0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1bd      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4929      	ldr	r1, [pc, #164]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
 8002642:	e018      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff fb36 	bl	8001cc0 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff fb32 	bl	8001cc0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e199      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d038      	beq.n	80026f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d019      	beq.n	80026be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268e:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7ff fb13 	bl	8001cc0 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fb0f 	bl	8001cc0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e176      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x23a>
 80026bc:	e01a      	b.n	80026f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7ff faf9 	bl	8001cc0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d2:	f7ff faf5 	bl	8001cc0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d903      	bls.n	80026e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e15c      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
 80026e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b91      	ldr	r3, [pc, #580]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ee      	bne.n	80026d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a4 	beq.w	800284a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b8b      	ldr	r3, [pc, #556]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10d      	bne.n	800272a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b88      	ldr	r3, [pc, #544]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a87      	ldr	r2, [pc, #540]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b85      	ldr	r3, [pc, #532]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	4b82      	ldr	r3, [pc, #520]	; (8002934 <HAL_RCC_OscConfig+0x4d0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002736:	4b7f      	ldr	r3, [pc, #508]	; (8002934 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7e      	ldr	r2, [pc, #504]	; (8002934 <HAL_RCC_OscConfig+0x4d0>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7ff fabd 	bl	8001cc0 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7ff fab9 	bl	8001cc0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	; 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e120      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	4b75      	ldr	r3, [pc, #468]	; (8002934 <HAL_RCC_OscConfig+0x4d0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x31a>
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a6e      	ldr	r2, [pc, #440]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	e02d      	b.n	80027da <HAL_RCC_OscConfig+0x376>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x33c>
 8002786:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a66      	ldr	r2, [pc, #408]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e01c      	b.n	80027da <HAL_RCC_OscConfig+0x376>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x35e>
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a60      	ldr	r2, [pc, #384]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	4b5e      	ldr	r3, [pc, #376]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	e00b      	b.n	80027da <HAL_RCC_OscConfig+0x376>
 80027c2:	4b5b      	ldr	r3, [pc, #364]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a5a      	ldr	r2, [pc, #360]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	4b58      	ldr	r3, [pc, #352]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a57      	ldr	r2, [pc, #348]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80027d4:	f023 0304 	bic.w	r3, r3, #4
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d015      	beq.n	800280e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff fa6d 	bl	8001cc0 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff fa69 	bl	8001cc0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0ce      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ee      	beq.n	80027ea <HAL_RCC_OscConfig+0x386>
 800280c:	e014      	b.n	8002838 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7ff fa57 	bl	8001cc0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7ff fa53 	bl	8001cc0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0b8      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ee      	bne.n	8002816 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a3b      	ldr	r2, [pc, #236]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80a4 	beq.w	800299c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d06b      	beq.n	8002938 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d149      	bne.n	80028fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a30      	ldr	r2, [pc, #192]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 800286e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff fa24 	bl	8001cc0 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff fa20 	bl	8001cc0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e087      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4313      	orrs	r3, r2
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7ff f9f4 	bl	8001cc0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7ff f9f0 	bl	8001cc0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e057      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x478>
 80028fa:	e04f      	b.n	800299c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff f9da 	bl	8001cc0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7ff f9d6 	bl	8001cc0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e03d      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x4ac>
 800292e:	e035      	b.n	800299c <HAL_RCC_OscConfig+0x538>
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x544>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d028      	beq.n	8002998 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d121      	bne.n	8002998 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d11a      	bne.n	8002998 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d0      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 020f 	bic.w	r2, r3, #15
 80029da:	4965      	ldr	r1, [pc, #404]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d040      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d115      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e073      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4936      	ldr	r1, [pc, #216]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7ff f90e 	bl	8001cc0 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7ff f90a 	bl	8001cc0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e053      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d210      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	4922      	ldr	r1, [pc, #136]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1cc>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1d0>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1d4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fe2a 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	08009ab8 	.word	0x08009ab8
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	6079      	str	r1, [r7, #4]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	60f9      	str	r1, [r7, #12]
 8002b92:	2100      	movs	r1, #0
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b96:	2100      	movs	r1, #0
 8002b98:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9a:	4952      	ldr	r1, [pc, #328]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b9c:	6889      	ldr	r1, [r1, #8]
 8002b9e:	f001 010c 	and.w	r1, r1, #12
 8002ba2:	2908      	cmp	r1, #8
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002ba6:	2908      	cmp	r1, #8
 8002ba8:	f200 8094 	bhi.w	8002cd4 <HAL_RCC_GetSysClockFreq+0x150>
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x32>
 8002bb0:	2904      	cmp	r1, #4
 8002bb2:	d003      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x38>
 8002bb4:	e08e      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bb8:	60bb      	str	r3, [r7, #8]
      break;
 8002bba:	e08e      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCC_GetSysClockFreq+0x168>)
 8002bbe:	60bb      	str	r3, [r7, #8]
      break;
 8002bc0:	e08b      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc2:	4948      	ldr	r1, [pc, #288]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bc4:	6849      	ldr	r1, [r1, #4]
 8002bc6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002bca:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bcc:	4945      	ldr	r1, [pc, #276]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bce:	6849      	ldr	r1, [r1, #4]
 8002bd0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d024      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd8:	4942      	ldr	r1, [pc, #264]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bda:	6849      	ldr	r1, [r1, #4]
 8002bdc:	0989      	lsrs	r1, r1, #6
 8002bde:	4608      	mov	r0, r1
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002be8:	f04f 0500 	mov.w	r5, #0
 8002bec:	ea00 0204 	and.w	r2, r0, r4
 8002bf0:	ea01 0305 	and.w	r3, r1, r5
 8002bf4:	493d      	ldr	r1, [pc, #244]	; (8002cec <HAL_RCC_GetSysClockFreq+0x168>)
 8002bf6:	fb01 f003 	mul.w	r0, r1, r3
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	fb01 f102 	mul.w	r1, r1, r2
 8002c00:	1844      	adds	r4, r0, r1
 8002c02:	493a      	ldr	r1, [pc, #232]	; (8002cec <HAL_RCC_GetSysClockFreq+0x168>)
 8002c04:	fba2 0101 	umull	r0, r1, r2, r1
 8002c08:	1863      	adds	r3, r4, r1
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	f7fe f858 	bl	8000cc8 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e04a      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	ea02 0400 	and.w	r4, r2, r0
 8002c3a:	ea03 0501 	and.w	r5, r3, r1
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	014b      	lsls	r3, r1, #5
 8002c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c50:	0142      	lsls	r2, r0, #5
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	1b00      	subs	r0, r0, r4
 8002c58:	eb61 0105 	sbc.w	r1, r1, r5
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	018b      	lsls	r3, r1, #6
 8002c66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c6a:	0182      	lsls	r2, r0, #6
 8002c6c:	1a12      	subs	r2, r2, r0
 8002c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	00d9      	lsls	r1, r3, #3
 8002c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c80:	00d0      	lsls	r0, r2, #3
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	1912      	adds	r2, r2, r4
 8002c88:	eb45 0303 	adc.w	r3, r5, r3
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	0299      	lsls	r1, r3, #10
 8002c96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c9a:	0290      	lsls	r0, r2, #10
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	f7fe f80c 	bl	8000cc8 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	60bb      	str	r3, [r7, #8]
      break;
 8002cd2:	e002      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002cd6:	60bb      	str	r3, [r7, #8]
      break;
 8002cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cda:	68bb      	ldr	r3, [r7, #8]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08009ac8 	.word	0x08009ac8

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d34:	f7ff ffdc 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08009ac8 	.word	0x08009ac8

08002d58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	220f      	movs	r2, #15
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_RCC_GetClockConfig+0x60>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40023c00 	.word	0x40023c00

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002de4:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a68      	ldr	r2, [pc, #416]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dee:	6093      	str	r3, [r2, #8]
 8002df0:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	4964      	ldr	r1, [pc, #400]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d017      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	4959      	ldr	r1, [pc, #356]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e52:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	494a      	ldr	r1, [pc, #296]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 808b 	beq.w	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ea0:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a39      	ldr	r2, [pc, #228]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002eb8:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fefc 	bl	8001cc0 <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe fef8 	bl	8001cc0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e357      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d035      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d02e      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f2a:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d114      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fec0 	bl	8001cc0 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe febc 	bl	8001cc0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e319      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f72:	d111      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f82:	400b      	ands	r3, r1
 8002f84:	4901      	ldr	r1, [pc, #4]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40007000 	.word	0x40007000
 8002f94:	0ffffcff 	.word	0x0ffffcff
 8002f98:	4bb1      	ldr	r3, [pc, #708]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4ab0      	ldr	r2, [pc, #704]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fa2:	6093      	str	r3, [r2, #8]
 8002fa4:	4bae      	ldr	r3, [pc, #696]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	49ab      	ldr	r1, [pc, #684]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fc2:	4ba7      	ldr	r3, [pc, #668]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	4aa5      	ldr	r2, [pc, #660]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fd2:	4ba3      	ldr	r3, [pc, #652]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	49a0      	ldr	r1, [pc, #640]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ff0:	4b9b      	ldr	r3, [pc, #620]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffe:	4998      	ldr	r1, [pc, #608]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003012:	4b93      	ldr	r3, [pc, #588]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003020:	498f      	ldr	r1, [pc, #572]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003034:	4b8a      	ldr	r3, [pc, #552]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003042:	4987      	ldr	r1, [pc, #540]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003056:	4b82      	ldr	r3, [pc, #520]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	497e      	ldr	r1, [pc, #504]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4976      	ldr	r1, [pc, #472]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309a:	4b71      	ldr	r3, [pc, #452]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f023 020c 	bic.w	r2, r3, #12
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	496d      	ldr	r1, [pc, #436]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030bc:	4b68      	ldr	r3, [pc, #416]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	4965      	ldr	r1, [pc, #404]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	495c      	ldr	r1, [pc, #368]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003100:	4b57      	ldr	r3, [pc, #348]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	4954      	ldr	r1, [pc, #336]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003122:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	494b      	ldr	r1, [pc, #300]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003144:	4b46      	ldr	r3, [pc, #280]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	4943      	ldr	r1, [pc, #268]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003166:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003174:	493a      	ldr	r1, [pc, #232]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003196:	4932      	ldr	r1, [pc, #200]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d011      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b8:	4929      	ldr	r1, [pc, #164]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f8:	4919      	ldr	r1, [pc, #100]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321c:	4910      	ldr	r1, [pc, #64]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d006      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80d9 	beq.w	80033ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800323e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003244:	f7fe fd3c 	bl	8001cc0 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800324a:	e00b      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800324c:	f7fe fd38 	bl	8001cc0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d904      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e197      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ed      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d021      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11d      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003284:	4b64      	ldr	r3, [pc, #400]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003292:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003298:	0e1b      	lsrs	r3, r3, #24
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	019a      	lsls	r2, r3, #6
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	071b      	lsls	r3, r3, #28
 80032b8:	4957      	ldr	r1, [pc, #348]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02e      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ea:	d129      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ec:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	0f1b      	lsrs	r3, r3, #28
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	019a      	lsls	r2, r3, #6
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	071b      	lsls	r3, r3, #28
 8003320:	493d      	ldr	r1, [pc, #244]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800332e:	f023 021f 	bic.w	r2, r3, #31
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01d      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800334c:	4b32      	ldr	r3, [pc, #200]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003352:	0e1b      	lsrs	r3, r3, #24
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003360:	0f1b      	lsrs	r3, r3, #28
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	019a      	lsls	r2, r3, #6
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	071b      	lsls	r3, r3, #28
 8003380:	4925      	ldr	r1, [pc, #148]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d011      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	019a      	lsls	r2, r3, #6
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	071b      	lsls	r3, r3, #28
 80033b0:	4919      	ldr	r1, [pc, #100]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c4:	f7fe fc7c 	bl	8001cc0 <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033cc:	f7fe fc78 	bl	8001cc0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0d7      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	f040 80cd 	bne.w	800358c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fe:	f7fe fc5f 	bl	8001cc0 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003406:	f7fe fc5b 	bl	8001cc0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b64      	cmp	r3, #100	; 0x64
 8003412:	d903      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0ba      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003418:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800341c:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003428:	d0ed      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02e      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d12a      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003452:	4b51      	ldr	r3, [pc, #324]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	0f1b      	lsrs	r3, r3, #28
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	019a      	lsls	r2, r3, #6
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	4944      	ldr	r1, [pc, #272]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003494:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	493d      	ldr	r1, [pc, #244]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d022      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034bc:	d11d      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	0e1b      	lsrs	r3, r3, #24
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	0f1b      	lsrs	r3, r3, #28
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	019a      	lsls	r2, r3, #6
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	061b      	lsls	r3, r3, #24
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	4929      	ldr	r1, [pc, #164]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d028      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	0e1b      	lsrs	r3, r3, #24
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003514:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	0c1b      	lsrs	r3, r3, #16
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	019a      	lsls	r2, r3, #6
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	431a      	orrs	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	071b      	lsls	r3, r3, #28
 800353a:	4917      	ldr	r1, [pc, #92]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4911      	ldr	r1, [pc, #68]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fe fbac 	bl	8001cc0 <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800356c:	f7fe fba8 	bl	8001cc0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e007      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800358a:	d1ef      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e049      	b.n	8003642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe f832 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 fb2c 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04c      	b.n	80036fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <HAL_TIM_Base_Start+0xc0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d01d      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <HAL_TIM_Base_Start+0xc4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_TIM_Base_Start+0xc8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_Base_Start+0xcc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_TIM_Base_Start+0xd0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_TIM_Base_Start+0xd4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_Base_Start+0x70>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_TIM_Base_Start+0xd8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d115      	bne.n	80036e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_TIM_Base_Start+0xdc>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d015      	beq.n	80036fa <HAL_TIM_Base_Start+0xae>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d011      	beq.n	80036fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	e008      	b.n	80036fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e000      	b.n	80036fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40010400 	.word	0x40010400
 8003720:	40014000 	.word	0x40014000
 8003724:	40001800 	.word	0x40001800
 8003728:	00010007 	.word	0x00010007

0800372c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d001      	beq.n	8003744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e054      	b.n	80037ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_TIM_Base_Start_IT+0xd0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d01d      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_TIM_Base_Start_IT+0xd4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_TIM_Base_Start_IT+0xd8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_TIM_Base_Start_IT+0xdc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_TIM_Base_Start_IT+0xe0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_TIM_Base_Start_IT+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_TIM_Base_Start_IT+0xe8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d115      	bne.n	80037d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_TIM_Base_Start_IT+0xec>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d015      	beq.n	80037ea <HAL_TIM_Base_Start_IT+0xbe>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d011      	beq.n	80037ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	e008      	b.n	80037ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e000      	b.n	80037ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40001800 	.word	0x40001800
 8003818:	00010007 	.word	0x00010007

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0202 	mvn.w	r2, #2
 8003848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f9cc 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9be 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f9cf 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0204 	mvn.w	r2, #4
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9a2 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f994 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f9a5 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d122      	bne.n	8003920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d11b      	bne.n	8003920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0208 	mvn.w	r2, #8
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f978 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f96a 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f97b 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b10      	cmp	r3, #16
 800392c:	d122      	bne.n	8003974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d11b      	bne.n	8003974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2208      	movs	r2, #8
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f94e 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f940 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f951 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fe0a 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fb08 	bl	8003fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039da:	d10e      	bne.n	80039fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d107      	bne.n	80039fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fafb 	bl	8003ff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d10e      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d107      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8ff 	bl	8003c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d10e      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d107      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0220 	mvn.w	r2, #32
 8003a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fabb 	bl	8003fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_ConfigClockSource+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0b3      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x180>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4b55      	ldr	r3, [pc, #340]	; (8003be4 <HAL_TIM_ConfigClockSource+0x188>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aac:	d03e      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0xd0>
 8003aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab2:	f200 8087 	bhi.w	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aba:	f000 8085 	beq.w	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac2:	d87f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ac4:	2b70      	cmp	r3, #112	; 0x70
 8003ac6:	d01a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0xa2>
 8003ac8:	2b70      	cmp	r3, #112	; 0x70
 8003aca:	d87b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003acc:	2b60      	cmp	r3, #96	; 0x60
 8003ace:	d050      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x116>
 8003ad0:	2b60      	cmp	r3, #96	; 0x60
 8003ad2:	d877      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ad4:	2b50      	cmp	r3, #80	; 0x50
 8003ad6:	d03c      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0xf6>
 8003ad8:	2b50      	cmp	r3, #80	; 0x50
 8003ada:	d873      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d058      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x136>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d86f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ae4:	2b30      	cmp	r3, #48	; 0x30
 8003ae6:	d064      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d86b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d060      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d867      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05c      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d05a      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003afc:	e062      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6899      	ldr	r1, [r3, #8]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f000 f9ad 	bl	8003e6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	609a      	str	r2, [r3, #8]
      break;
 8003b2a:	e04e      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f000 f996 	bl	8003e6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4e:	609a      	str	r2, [r3, #8]
      break;
 8003b50:	e03b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 f90a 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2150      	movs	r1, #80	; 0x50
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f963 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b70:	e02b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 f929 	bl	8003dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2160      	movs	r1, #96	; 0x60
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f953 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b90:	e01b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 f8ea 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f943 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e00b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 f93a 	bl	8003e36 <TIM_ITRx_SetConfig>
        break;
 8003bc2:	e002      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	fffeff88 	.word	0xfffeff88

08003be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a40      	ldr	r2, [pc, #256]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <TIM_Base_SetConfig+0x118>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <TIM_Base_SetConfig+0x11c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a3b      	ldr	r2, [pc, #236]	; (8003d58 <TIM_Base_SetConfig+0x120>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2f      	ldr	r2, [pc, #188]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d027      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <TIM_Base_SetConfig+0x118>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d023      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <TIM_Base_SetConfig+0x11c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01f      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <TIM_Base_SetConfig+0x120>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d017      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <TIM_Base_SetConfig+0x128>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <TIM_Base_SetConfig+0x12c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00f      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <TIM_Base_SetConfig+0x130>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <TIM_Base_SetConfig+0x134>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <TIM_Base_SetConfig+0x138>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <TIM_Base_SetConfig+0x13c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0xf8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d103      	bne.n	8003d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800
 8003d6c:	40001800 	.word	0x40001800
 8003d70:	40001c00 	.word	0x40001c00
 8003d74:	40002000 	.word	0x40002000

08003d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e06d      	b.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003efe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d01d      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10c      	bne.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40010400 	.word	0x40010400
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40001800 	.word	0x40001800

08003fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e040      	b.n	8004098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fb5c 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fb08 	bl	8004658 <UART_SetConfig>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e022      	b.n	8004098 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fd5e 	bl	8004b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fde5 	bl	8004c60 <UART_CheckIdleState>
 8004096:	4603      	mov	r3, r0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	f040 8081 	bne.w	80041bc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_UART_Transmit+0x26>
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e079      	b.n	80041be <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_UART_Transmit+0x38>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e072      	b.n	80041be <HAL_UART_Transmit+0x11e>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2221      	movs	r2, #33	; 0x21
 80040ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ee:	f7fd fde7 	bl	8001cc0 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d108      	bne.n	8004120 <HAL_UART_Transmit+0x80>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004130:	e02c      	b.n	800418c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fdc2 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e038      	b.n	80041be <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3302      	adds	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e007      	b.n	800417a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1cc      	bne.n	8004132 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fd8f 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e005      	b.n	80041be <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	4613      	mov	r3, r2
 80041d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d12c      	bne.n	8004236 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Receive_IT+0x22>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e025      	b.n	8004238 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Receive_IT+0x34>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e01e      	b.n	8004238 <HAL_UART_Receive_IT+0x72>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004224:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	461a      	mov	r2, r3
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fdc7 	bl	8004dc0 <UART_Start_Receive_IT>
 8004232:	4603      	mov	r3, r0
 8004234:	e000      	b.n	8004238 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	f640 030f 	movw	r3, #2063	; 0x80f
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00e      	beq.n	8004298 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 81b9 	beq.w	8004600 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
      }
      return;
 8004296:	e1b3      	b.n	8004600 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80e3 	beq.w	8004466 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4ba5      	ldr	r3, [pc, #660]	; (8004544 <HAL_UART_IRQHandler+0x304>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80d8 	beq.w	8004466 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d010      	beq.n	80042e2 <HAL_UART_IRQHandler+0xa2>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_UART_IRQHandler+0xce>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2202      	movs	r2, #2
 80042fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <HAL_UART_IRQHandler+0xfa>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2204      	movs	r2, #4
 8004328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004330:	f043 0202 	orr.w	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004366:	f043 0208 	orr.w	r2, r3, #8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004376:	2b00      	cmp	r3, #0
 8004378:	d011      	beq.n	800439e <HAL_UART_IRQHandler+0x15e>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00c      	beq.n	800439e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800438c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 812d 	beq.w	8004604 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d004      	beq.n	80043ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d031      	beq.n	8004452 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fd6e 	bl	8004ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d123      	bne.n	800444a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004410:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	2b00      	cmp	r3, #0
 8004418:	d013      	beq.n	8004442 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a4a      	ldr	r2, [pc, #296]	; (8004548 <HAL_UART_IRQHandler+0x308>)
 8004420:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fda8 	bl	8001f7c <HAL_DMA_Abort_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800443c:	4610      	mov	r0, r2
 800443e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00f      	b.n	8004462 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8f2 	bl	800462c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00b      	b.n	8004462 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8ee 	bl	800462c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e007      	b.n	8004462 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8ea 	bl	800462c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004460:	e0d0      	b.n	8004604 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	bf00      	nop
    return;
 8004464:	e0ce      	b.n	8004604 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	2b01      	cmp	r3, #1
 800446c:	f040 80a7 	bne.w	80045be <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80a1 	beq.w	80045be <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 809b 	beq.w	80045be <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d156      	bne.n	800454c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80044a8:	893b      	ldrh	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80ac 	beq.w	8004608 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044b6:	893a      	ldrh	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	f080 80a5 	bcs.w	8004608 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	893a      	ldrh	r2, [r7, #8]
 80044c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d0:	d02a      	beq.n	8004528 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004500:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0210 	bic.w	r2, r2, #16
 800451c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd fcba 	bl	8001e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004534:	b29b      	uxth	r3, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f87f 	bl	8004640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004542:	e061      	b.n	8004608 <HAL_UART_IRQHandler+0x3c8>
 8004544:	04000120 	.word	0x04000120
 8004548:	08004f2f 	.word	0x08004f2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004558:	b29b      	uxth	r3, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d050      	beq.n	800460c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800456a:	897b      	ldrh	r3, [r7, #10]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d04d      	beq.n	800460c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800457e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0210 	bic.w	r2, r2, #16
 80045b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f842 	bl	8004640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045bc:	e026      	b.n	800460c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01a      	beq.n	8004610 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
    }
    return;
 80045e2:	e015      	b.n	8004610 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d011      	beq.n	8004612 <HAL_UART_IRQHandler+0x3d2>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00c      	beq.n	8004612 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fcae 	bl	8004f5a <UART_EndTransmit_IT>
    return;
 80045fe:	e008      	b.n	8004612 <HAL_UART_IRQHandler+0x3d2>
      return;
 8004600:	bf00      	nop
 8004602:	e006      	b.n	8004612 <HAL_UART_IRQHandler+0x3d2>
    return;
 8004604:	bf00      	nop
 8004606:	e004      	b.n	8004612 <HAL_UART_IRQHandler+0x3d2>
      return;
 8004608:	bf00      	nop
 800460a:	e002      	b.n	8004612 <HAL_UART_IRQHandler+0x3d2>
      return;
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_UART_IRQHandler+0x3d2>
    return;
 8004610:	bf00      	nop
  }

}
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4ba7      	ldr	r3, [pc, #668]	; (8004920 <UART_SetConfig+0x2c8>)
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	6979      	ldr	r1, [r7, #20]
 800468c:	430b      	orrs	r3, r1
 800468e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a95      	ldr	r2, [pc, #596]	; (8004924 <UART_SetConfig+0x2cc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d120      	bne.n	8004716 <UART_SetConfig+0xbe>
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <UART_SetConfig+0x2d0>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d816      	bhi.n	8004710 <UART_SetConfig+0xb8>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x90>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	08004705 	.word	0x08004705
 80046f0:	080046ff 	.word	0x080046ff
 80046f4:	0800470b 	.word	0x0800470b
 80046f8:	2301      	movs	r3, #1
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e14f      	b.n	800499e <UART_SetConfig+0x346>
 80046fe:	2302      	movs	r3, #2
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e14c      	b.n	800499e <UART_SetConfig+0x346>
 8004704:	2304      	movs	r3, #4
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e149      	b.n	800499e <UART_SetConfig+0x346>
 800470a:	2308      	movs	r3, #8
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e146      	b.n	800499e <UART_SetConfig+0x346>
 8004710:	2310      	movs	r3, #16
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e143      	b.n	800499e <UART_SetConfig+0x346>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a84      	ldr	r2, [pc, #528]	; (800492c <UART_SetConfig+0x2d4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d132      	bne.n	8004786 <UART_SetConfig+0x12e>
 8004720:	4b81      	ldr	r3, [pc, #516]	; (8004928 <UART_SetConfig+0x2d0>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d828      	bhi.n	8004780 <UART_SetConfig+0x128>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0xdc>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004769 	.word	0x08004769
 8004738:	08004781 	.word	0x08004781
 800473c:	08004781 	.word	0x08004781
 8004740:	08004781 	.word	0x08004781
 8004744:	08004775 	.word	0x08004775
 8004748:	08004781 	.word	0x08004781
 800474c:	08004781 	.word	0x08004781
 8004750:	08004781 	.word	0x08004781
 8004754:	0800476f 	.word	0x0800476f
 8004758:	08004781 	.word	0x08004781
 800475c:	08004781 	.word	0x08004781
 8004760:	08004781 	.word	0x08004781
 8004764:	0800477b 	.word	0x0800477b
 8004768:	2300      	movs	r3, #0
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e117      	b.n	800499e <UART_SetConfig+0x346>
 800476e:	2302      	movs	r3, #2
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e114      	b.n	800499e <UART_SetConfig+0x346>
 8004774:	2304      	movs	r3, #4
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e111      	b.n	800499e <UART_SetConfig+0x346>
 800477a:	2308      	movs	r3, #8
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e10e      	b.n	800499e <UART_SetConfig+0x346>
 8004780:	2310      	movs	r3, #16
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e10b      	b.n	800499e <UART_SetConfig+0x346>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a69      	ldr	r2, [pc, #420]	; (8004930 <UART_SetConfig+0x2d8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d120      	bne.n	80047d2 <UART_SetConfig+0x17a>
 8004790:	4b65      	ldr	r3, [pc, #404]	; (8004928 <UART_SetConfig+0x2d0>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	d013      	beq.n	80047c6 <UART_SetConfig+0x16e>
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d814      	bhi.n	80047cc <UART_SetConfig+0x174>
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d009      	beq.n	80047ba <UART_SetConfig+0x162>
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d810      	bhi.n	80047cc <UART_SetConfig+0x174>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <UART_SetConfig+0x15c>
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d006      	beq.n	80047c0 <UART_SetConfig+0x168>
 80047b2:	e00b      	b.n	80047cc <UART_SetConfig+0x174>
 80047b4:	2300      	movs	r3, #0
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e0f1      	b.n	800499e <UART_SetConfig+0x346>
 80047ba:	2302      	movs	r3, #2
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e0ee      	b.n	800499e <UART_SetConfig+0x346>
 80047c0:	2304      	movs	r3, #4
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e0eb      	b.n	800499e <UART_SetConfig+0x346>
 80047c6:	2308      	movs	r3, #8
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e0e8      	b.n	800499e <UART_SetConfig+0x346>
 80047cc:	2310      	movs	r3, #16
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e0e5      	b.n	800499e <UART_SetConfig+0x346>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a57      	ldr	r2, [pc, #348]	; (8004934 <UART_SetConfig+0x2dc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d120      	bne.n	800481e <UART_SetConfig+0x1c6>
 80047dc:	4b52      	ldr	r3, [pc, #328]	; (8004928 <UART_SetConfig+0x2d0>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047e6:	2bc0      	cmp	r3, #192	; 0xc0
 80047e8:	d013      	beq.n	8004812 <UART_SetConfig+0x1ba>
 80047ea:	2bc0      	cmp	r3, #192	; 0xc0
 80047ec:	d814      	bhi.n	8004818 <UART_SetConfig+0x1c0>
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d009      	beq.n	8004806 <UART_SetConfig+0x1ae>
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d810      	bhi.n	8004818 <UART_SetConfig+0x1c0>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <UART_SetConfig+0x1a8>
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d006      	beq.n	800480c <UART_SetConfig+0x1b4>
 80047fe:	e00b      	b.n	8004818 <UART_SetConfig+0x1c0>
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e0cb      	b.n	800499e <UART_SetConfig+0x346>
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e0c8      	b.n	800499e <UART_SetConfig+0x346>
 800480c:	2304      	movs	r3, #4
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e0c5      	b.n	800499e <UART_SetConfig+0x346>
 8004812:	2308      	movs	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e0c2      	b.n	800499e <UART_SetConfig+0x346>
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e0bf      	b.n	800499e <UART_SetConfig+0x346>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a45      	ldr	r2, [pc, #276]	; (8004938 <UART_SetConfig+0x2e0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d125      	bne.n	8004874 <UART_SetConfig+0x21c>
 8004828:	4b3f      	ldr	r3, [pc, #252]	; (8004928 <UART_SetConfig+0x2d0>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004836:	d017      	beq.n	8004868 <UART_SetConfig+0x210>
 8004838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483c:	d817      	bhi.n	800486e <UART_SetConfig+0x216>
 800483e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004842:	d00b      	beq.n	800485c <UART_SetConfig+0x204>
 8004844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004848:	d811      	bhi.n	800486e <UART_SetConfig+0x216>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <UART_SetConfig+0x1fe>
 800484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004852:	d006      	beq.n	8004862 <UART_SetConfig+0x20a>
 8004854:	e00b      	b.n	800486e <UART_SetConfig+0x216>
 8004856:	2300      	movs	r3, #0
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0a0      	b.n	800499e <UART_SetConfig+0x346>
 800485c:	2302      	movs	r3, #2
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e09d      	b.n	800499e <UART_SetConfig+0x346>
 8004862:	2304      	movs	r3, #4
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e09a      	b.n	800499e <UART_SetConfig+0x346>
 8004868:	2308      	movs	r3, #8
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e097      	b.n	800499e <UART_SetConfig+0x346>
 800486e:	2310      	movs	r3, #16
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e094      	b.n	800499e <UART_SetConfig+0x346>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a30      	ldr	r2, [pc, #192]	; (800493c <UART_SetConfig+0x2e4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d125      	bne.n	80048ca <UART_SetConfig+0x272>
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <UART_SetConfig+0x2d0>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488c:	d017      	beq.n	80048be <UART_SetConfig+0x266>
 800488e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004892:	d817      	bhi.n	80048c4 <UART_SetConfig+0x26c>
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004898:	d00b      	beq.n	80048b2 <UART_SetConfig+0x25a>
 800489a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489e:	d811      	bhi.n	80048c4 <UART_SetConfig+0x26c>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <UART_SetConfig+0x254>
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d006      	beq.n	80048b8 <UART_SetConfig+0x260>
 80048aa:	e00b      	b.n	80048c4 <UART_SetConfig+0x26c>
 80048ac:	2301      	movs	r3, #1
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e075      	b.n	800499e <UART_SetConfig+0x346>
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e072      	b.n	800499e <UART_SetConfig+0x346>
 80048b8:	2304      	movs	r3, #4
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e06f      	b.n	800499e <UART_SetConfig+0x346>
 80048be:	2308      	movs	r3, #8
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e06c      	b.n	800499e <UART_SetConfig+0x346>
 80048c4:	2310      	movs	r3, #16
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e069      	b.n	800499e <UART_SetConfig+0x346>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <UART_SetConfig+0x2e8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d137      	bne.n	8004944 <UART_SetConfig+0x2ec>
 80048d4:	4b14      	ldr	r3, [pc, #80]	; (8004928 <UART_SetConfig+0x2d0>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e2:	d017      	beq.n	8004914 <UART_SetConfig+0x2bc>
 80048e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e8:	d817      	bhi.n	800491a <UART_SetConfig+0x2c2>
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ee:	d00b      	beq.n	8004908 <UART_SetConfig+0x2b0>
 80048f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f4:	d811      	bhi.n	800491a <UART_SetConfig+0x2c2>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <UART_SetConfig+0x2aa>
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d006      	beq.n	800490e <UART_SetConfig+0x2b6>
 8004900:	e00b      	b.n	800491a <UART_SetConfig+0x2c2>
 8004902:	2300      	movs	r3, #0
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e04a      	b.n	800499e <UART_SetConfig+0x346>
 8004908:	2302      	movs	r3, #2
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e047      	b.n	800499e <UART_SetConfig+0x346>
 800490e:	2304      	movs	r3, #4
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e044      	b.n	800499e <UART_SetConfig+0x346>
 8004914:	2308      	movs	r3, #8
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e041      	b.n	800499e <UART_SetConfig+0x346>
 800491a:	2310      	movs	r3, #16
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e03e      	b.n	800499e <UART_SetConfig+0x346>
 8004920:	efff69f3 	.word	0xefff69f3
 8004924:	40011000 	.word	0x40011000
 8004928:	40023800 	.word	0x40023800
 800492c:	40004400 	.word	0x40004400
 8004930:	40004800 	.word	0x40004800
 8004934:	40004c00 	.word	0x40004c00
 8004938:	40005000 	.word	0x40005000
 800493c:	40011400 	.word	0x40011400
 8004940:	40007800 	.word	0x40007800
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a71      	ldr	r2, [pc, #452]	; (8004b10 <UART_SetConfig+0x4b8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d125      	bne.n	800499a <UART_SetConfig+0x342>
 800494e:	4b71      	ldr	r3, [pc, #452]	; (8004b14 <UART_SetConfig+0x4bc>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800495c:	d017      	beq.n	800498e <UART_SetConfig+0x336>
 800495e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004962:	d817      	bhi.n	8004994 <UART_SetConfig+0x33c>
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004968:	d00b      	beq.n	8004982 <UART_SetConfig+0x32a>
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d811      	bhi.n	8004994 <UART_SetConfig+0x33c>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <UART_SetConfig+0x324>
 8004974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004978:	d006      	beq.n	8004988 <UART_SetConfig+0x330>
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x33c>
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x346>
 8004982:	2302      	movs	r3, #2
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e00a      	b.n	800499e <UART_SetConfig+0x346>
 8004988:	2304      	movs	r3, #4
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e007      	b.n	800499e <UART_SetConfig+0x346>
 800498e:	2308      	movs	r3, #8
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e004      	b.n	800499e <UART_SetConfig+0x346>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e001      	b.n	800499e <UART_SetConfig+0x346>
 800499a:	2310      	movs	r3, #16
 800499c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a6:	d15b      	bne.n	8004a60 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80049a8:	7ffb      	ldrb	r3, [r7, #31]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d827      	bhi.n	80049fe <UART_SetConfig+0x3a6>
 80049ae:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x35c>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049ff 	.word	0x080049ff
 80049c4:	080049ef 	.word	0x080049ef
 80049c8:	080049ff 	.word	0x080049ff
 80049cc:	080049ff 	.word	0x080049ff
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d8:	f7fe f996 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 80049dc:	61b8      	str	r0, [r7, #24]
        break;
 80049de:	e013      	b.n	8004a08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7fe f9a6 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 80049e4:	61b8      	str	r0, [r7, #24]
        break;
 80049e6:	e00f      	b.n	8004a08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <UART_SetConfig+0x4c0>)
 80049ea:	61bb      	str	r3, [r7, #24]
        break;
 80049ec:	e00c      	b.n	8004a08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7fe f8c9 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80049f2:	61b8      	str	r0, [r7, #24]
        break;
 80049f4:	e008      	b.n	8004a08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	61bb      	str	r3, [r7, #24]
        break;
 80049fc:	e004      	b.n	8004a08 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	77bb      	strb	r3, [r7, #30]
        break;
 8004a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d074      	beq.n	8004af8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	005a      	lsls	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b0f      	cmp	r3, #15
 8004a2a:	d916      	bls.n	8004a5a <UART_SetConfig+0x402>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d212      	bcs.n	8004a5a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f023 030f 	bic.w	r3, r3, #15
 8004a3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	89fa      	ldrh	r2, [r7, #14]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e04e      	b.n	8004af8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	77bb      	strb	r3, [r7, #30]
 8004a5e:	e04b      	b.n	8004af8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a60:	7ffb      	ldrb	r3, [r7, #31]
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d827      	bhi.n	8004ab6 <UART_SetConfig+0x45e>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <UART_SetConfig+0x414>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004ab7 	.word	0x08004ab7
 8004a7c:	08004aa7 	.word	0x08004aa7
 8004a80:	08004ab7 	.word	0x08004ab7
 8004a84:	08004ab7 	.word	0x08004ab7
 8004a88:	08004ab7 	.word	0x08004ab7
 8004a8c:	08004aaf 	.word	0x08004aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7fe f93a 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8004a94:	61b8      	str	r0, [r7, #24]
        break;
 8004a96:	e013      	b.n	8004ac0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe f94a 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	61b8      	str	r0, [r7, #24]
        break;
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <UART_SetConfig+0x4c0>)
 8004aa2:	61bb      	str	r3, [r7, #24]
        break;
 8004aa4:	e00c      	b.n	8004ac0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa6:	f7fe f86d 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004aaa:	61b8      	str	r0, [r7, #24]
        break;
 8004aac:	e008      	b.n	8004ac0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	61bb      	str	r3, [r7, #24]
        break;
 8004ab4:	e004      	b.n	8004ac0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	77bb      	strb	r3, [r7, #30]
        break;
 8004abe:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085a      	lsrs	r2, r3, #1
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	441a      	add	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d908      	bls.n	8004af4 <UART_SetConfig+0x49c>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d204      	bcs.n	8004af4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e001      	b.n	8004af8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b04:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40007c00 	.word	0x40007c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	00f42400 	.word	0x00f42400

08004b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1a:	d10a      	bne.n	8004c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c70:	f7fd f826 	bl	8001cc0 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d10e      	bne.n	8004ca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f817 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e00d      	b.n	8004cbe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd6:	e05e      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d05a      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce0:	f7fc ffee 	bl	8001cc0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11b      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e043      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02c      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4a:	d124      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d091      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d10e      	bne.n	8004e12 <UART_Start_Receive_IT+0x52>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <UART_Start_Receive_IT+0x48>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e06:	e02d      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	22ff      	movs	r2, #255	; 0xff
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e10:	e028      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <UART_Start_Receive_IT+0x76>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <UART_Start_Receive_IT+0x6c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	22ff      	movs	r2, #255	; 0xff
 8004e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e2a:	e01b      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	227f      	movs	r2, #127	; 0x7f
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e34:	e016      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e3e:	d10d      	bne.n	8004e5c <UART_Start_Receive_IT+0x9c>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <UART_Start_Receive_IT+0x92>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	227f      	movs	r2, #127	; 0x7f
 8004e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e50:	e008      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	223f      	movs	r2, #63	; 0x3f
 8004e56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e5a:	e003      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2222      	movs	r2, #34	; 0x22
 8004e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	d107      	bne.n	8004e9c <UART_Start_Receive_IT+0xdc>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <UART_Start_Receive_IT+0x108>)
 8004e98:	665a      	str	r2, [r3, #100]	; 0x64
 8004e9a:	e002      	b.n	8004ea2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <UART_Start_Receive_IT+0x10c>)
 8004ea0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004eb8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	08005061 	.word	0x08005061
 8004ecc:	08004f8d 	.word	0x08004f8d

08004ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ee6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0210 	bic.w	r2, r2, #16
 8004f0e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fb6d 	bl	800462c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fb4a 	bl	8004618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f9a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa0:	2b22      	cmp	r3, #34	; 0x22
 8004fa2:	d151      	bne.n	8005048 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fac:	89bb      	ldrh	r3, [r7, #12]
 8004fae:	b2d9      	uxtb	r1, r3
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	400a      	ands	r2, r1
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d138      	bne.n	8005058 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10f      	bne.n	800503a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0210 	bic.w	r2, r2, #16
 8005028:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fb04 	bl	8004640 <HAL_UARTEx_RxEventCallback>
 8005038:	e002      	b.n	8005040 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc fa82 	bl	8001544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005046:	e007      	b.n	8005058 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	619a      	str	r2, [r3, #24]
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800506e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005074:	2b22      	cmp	r3, #34	; 0x22
 8005076:	d151      	bne.n	800511c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005086:	89ba      	ldrh	r2, [r7, #12]
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	4013      	ands	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d138      	bne.n	800512c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10f      	bne.n	800510e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0210 	bic.w	r2, r2, #16
 80050fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fa9a 	bl	8004640 <HAL_UARTEx_RxEventCallback>
 800510c:	e002      	b.n	8005114 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc fa18 	bl	8001544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800511a:	e007      	b.n	800512c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	619a      	str	r2, [r3, #24]
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <__errno>:
 8005134:	4b01      	ldr	r3, [pc, #4]	; (800513c <__errno+0x8>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4d0d      	ldr	r5, [pc, #52]	; (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	; (800517c <__libc_init_array+0x3c>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2600      	movs	r6, #0
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4d0b      	ldr	r5, [pc, #44]	; (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	; (8005184 <__libc_init_array+0x44>)
 8005154:	f004 fc60 	bl	8009a18 <_init>
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2600      	movs	r6, #0
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f855 3b04 	ldr.w	r3, [r5], #4
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	08009f8c 	.word	0x08009f8c
 800517c:	08009f8c 	.word	0x08009f8c
 8005180:	08009f8c 	.word	0x08009f8c
 8005184:	08009f90 	.word	0x08009f90

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <__cvt>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	ec55 4b10 	vmov	r4, r5, d0
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	460e      	mov	r6, r1
 80051a4:	4619      	mov	r1, r3
 80051a6:	462b      	mov	r3, r5
 80051a8:	bfbb      	ittet	lt
 80051aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051ae:	461d      	movlt	r5, r3
 80051b0:	2300      	movge	r3, #0
 80051b2:	232d      	movlt	r3, #45	; 0x2d
 80051b4:	700b      	strb	r3, [r1, #0]
 80051b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051bc:	4691      	mov	r9, r2
 80051be:	f023 0820 	bic.w	r8, r3, #32
 80051c2:	bfbc      	itt	lt
 80051c4:	4622      	movlt	r2, r4
 80051c6:	4614      	movlt	r4, r2
 80051c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051cc:	d005      	beq.n	80051da <__cvt+0x42>
 80051ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051d2:	d100      	bne.n	80051d6 <__cvt+0x3e>
 80051d4:	3601      	adds	r6, #1
 80051d6:	2102      	movs	r1, #2
 80051d8:	e000      	b.n	80051dc <__cvt+0x44>
 80051da:	2103      	movs	r1, #3
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	ab02      	add	r3, sp, #8
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	ec45 4b10 	vmov	d0, r4, r5
 80051e8:	4653      	mov	r3, sl
 80051ea:	4632      	mov	r2, r6
 80051ec:	f001 fde0 	bl	8006db0 <_dtoa_r>
 80051f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051f4:	4607      	mov	r7, r0
 80051f6:	d102      	bne.n	80051fe <__cvt+0x66>
 80051f8:	f019 0f01 	tst.w	r9, #1
 80051fc:	d022      	beq.n	8005244 <__cvt+0xac>
 80051fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005202:	eb07 0906 	add.w	r9, r7, r6
 8005206:	d110      	bne.n	800522a <__cvt+0x92>
 8005208:	783b      	ldrb	r3, [r7, #0]
 800520a:	2b30      	cmp	r3, #48	; 0x30
 800520c:	d10a      	bne.n	8005224 <__cvt+0x8c>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4620      	mov	r0, r4
 8005214:	4629      	mov	r1, r5
 8005216:	f7fb fc77 	bl	8000b08 <__aeabi_dcmpeq>
 800521a:	b918      	cbnz	r0, 8005224 <__cvt+0x8c>
 800521c:	f1c6 0601 	rsb	r6, r6, #1
 8005220:	f8ca 6000 	str.w	r6, [sl]
 8005224:	f8da 3000 	ldr.w	r3, [sl]
 8005228:	4499      	add	r9, r3
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8005236:	b108      	cbz	r0, 800523c <__cvt+0xa4>
 8005238:	f8cd 900c 	str.w	r9, [sp, #12]
 800523c:	2230      	movs	r2, #48	; 0x30
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	454b      	cmp	r3, r9
 8005242:	d307      	bcc.n	8005254 <__cvt+0xbc>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005248:	1bdb      	subs	r3, r3, r7
 800524a:	4638      	mov	r0, r7
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	b004      	add	sp, #16
 8005250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	9103      	str	r1, [sp, #12]
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e7f0      	b.n	800523e <__cvt+0xa6>

0800525c <__exponent>:
 800525c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800525e:	4603      	mov	r3, r0
 8005260:	2900      	cmp	r1, #0
 8005262:	bfb8      	it	lt
 8005264:	4249      	neglt	r1, r1
 8005266:	f803 2b02 	strb.w	r2, [r3], #2
 800526a:	bfb4      	ite	lt
 800526c:	222d      	movlt	r2, #45	; 0x2d
 800526e:	222b      	movge	r2, #43	; 0x2b
 8005270:	2909      	cmp	r1, #9
 8005272:	7042      	strb	r2, [r0, #1]
 8005274:	dd2a      	ble.n	80052cc <__exponent+0x70>
 8005276:	f10d 0407 	add.w	r4, sp, #7
 800527a:	46a4      	mov	ip, r4
 800527c:	270a      	movs	r7, #10
 800527e:	46a6      	mov	lr, r4
 8005280:	460a      	mov	r2, r1
 8005282:	fb91 f6f7 	sdiv	r6, r1, r7
 8005286:	fb07 1516 	mls	r5, r7, r6, r1
 800528a:	3530      	adds	r5, #48	; 0x30
 800528c:	2a63      	cmp	r2, #99	; 0x63
 800528e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005296:	4631      	mov	r1, r6
 8005298:	dcf1      	bgt.n	800527e <__exponent+0x22>
 800529a:	3130      	adds	r1, #48	; 0x30
 800529c:	f1ae 0502 	sub.w	r5, lr, #2
 80052a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052a4:	1c44      	adds	r4, r0, #1
 80052a6:	4629      	mov	r1, r5
 80052a8:	4561      	cmp	r1, ip
 80052aa:	d30a      	bcc.n	80052c2 <__exponent+0x66>
 80052ac:	f10d 0209 	add.w	r2, sp, #9
 80052b0:	eba2 020e 	sub.w	r2, r2, lr
 80052b4:	4565      	cmp	r5, ip
 80052b6:	bf88      	it	hi
 80052b8:	2200      	movhi	r2, #0
 80052ba:	4413      	add	r3, r2
 80052bc:	1a18      	subs	r0, r3, r0
 80052be:	b003      	add	sp, #12
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052ca:	e7ed      	b.n	80052a8 <__exponent+0x4c>
 80052cc:	2330      	movs	r3, #48	; 0x30
 80052ce:	3130      	adds	r1, #48	; 0x30
 80052d0:	7083      	strb	r3, [r0, #2]
 80052d2:	70c1      	strb	r1, [r0, #3]
 80052d4:	1d03      	adds	r3, r0, #4
 80052d6:	e7f1      	b.n	80052bc <__exponent+0x60>

080052d8 <_printf_float>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ed2d 8b02 	vpush	{d8}
 80052e0:	b08d      	sub	sp, #52	; 0x34
 80052e2:	460c      	mov	r4, r1
 80052e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052e8:	4616      	mov	r6, r2
 80052ea:	461f      	mov	r7, r3
 80052ec:	4605      	mov	r5, r0
 80052ee:	f002 ffaf 	bl	8008250 <_localeconv_r>
 80052f2:	f8d0 a000 	ldr.w	sl, [r0]
 80052f6:	4650      	mov	r0, sl
 80052f8:	f7fa ff8a 	bl	8000210 <strlen>
 80052fc:	2300      	movs	r3, #0
 80052fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	9305      	str	r3, [sp, #20]
 8005304:	f8d8 3000 	ldr.w	r3, [r8]
 8005308:	f894 b018 	ldrb.w	fp, [r4, #24]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	f103 0208 	add.w	r2, r3, #8
 8005316:	f8c8 2000 	str.w	r2, [r8]
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800532a:	9307      	str	r3, [sp, #28]
 800532c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005330:	ee08 0a10 	vmov	s16, r0
 8005334:	4b9f      	ldr	r3, [pc, #636]	; (80055b4 <_printf_float+0x2dc>)
 8005336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	f7fb fc15 	bl	8000b6c <__aeabi_dcmpun>
 8005342:	bb88      	cbnz	r0, 80053a8 <_printf_float+0xd0>
 8005344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005348:	4b9a      	ldr	r3, [pc, #616]	; (80055b4 <_printf_float+0x2dc>)
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	f7fb fbef 	bl	8000b30 <__aeabi_dcmple>
 8005352:	bb48      	cbnz	r0, 80053a8 <_printf_float+0xd0>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb fbde 	bl	8000b1c <__aeabi_dcmplt>
 8005360:	b110      	cbz	r0, 8005368 <_printf_float+0x90>
 8005362:	232d      	movs	r3, #45	; 0x2d
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <_printf_float+0x2e0>)
 800536a:	4894      	ldr	r0, [pc, #592]	; (80055bc <_printf_float+0x2e4>)
 800536c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005370:	bf94      	ite	ls
 8005372:	4698      	movls	r8, r3
 8005374:	4680      	movhi	r8, r0
 8005376:	2303      	movs	r3, #3
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	f023 0204 	bic.w	r2, r3, #4
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	9700      	str	r7, [sp, #0]
 8005388:	4633      	mov	r3, r6
 800538a:	aa0b      	add	r2, sp, #44	; 0x2c
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f9d8 	bl	8005744 <_printf_common>
 8005394:	3001      	adds	r0, #1
 8005396:	f040 8090 	bne.w	80054ba <_printf_float+0x1e2>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	b00d      	add	sp, #52	; 0x34
 80053a0:	ecbd 8b02 	vpop	{d8}
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fb fbdc 	bl	8000b6c <__aeabi_dcmpun>
 80053b4:	b140      	cbz	r0, 80053c8 <_printf_float+0xf0>
 80053b6:	464b      	mov	r3, r9
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbc      	itt	lt
 80053bc:	232d      	movlt	r3, #45	; 0x2d
 80053be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053c2:	487f      	ldr	r0, [pc, #508]	; (80055c0 <_printf_float+0x2e8>)
 80053c4:	4b7f      	ldr	r3, [pc, #508]	; (80055c4 <_printf_float+0x2ec>)
 80053c6:	e7d1      	b.n	800536c <_printf_float+0x94>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	d13f      	bne.n	8005454 <_printf_float+0x17c>
 80053d4:	2306      	movs	r3, #6
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	9b05      	ldr	r3, [sp, #20]
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053e0:	2300      	movs	r3, #0
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	ab0a      	add	r3, sp, #40	; 0x28
 80053e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053ea:	ab09      	add	r3, sp, #36	; 0x24
 80053ec:	ec49 8b10 	vmov	d0, r8, r9
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053f8:	4628      	mov	r0, r5
 80053fa:	f7ff fecd 	bl	8005198 <__cvt>
 80053fe:	9b06      	ldr	r3, [sp, #24]
 8005400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005402:	2b47      	cmp	r3, #71	; 0x47
 8005404:	4680      	mov	r8, r0
 8005406:	d108      	bne.n	800541a <_printf_float+0x142>
 8005408:	1cc8      	adds	r0, r1, #3
 800540a:	db02      	blt.n	8005412 <_printf_float+0x13a>
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	4299      	cmp	r1, r3
 8005410:	dd41      	ble.n	8005496 <_printf_float+0x1be>
 8005412:	f1ab 0b02 	sub.w	fp, fp, #2
 8005416:	fa5f fb8b 	uxtb.w	fp, fp
 800541a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800541e:	d820      	bhi.n	8005462 <_printf_float+0x18a>
 8005420:	3901      	subs	r1, #1
 8005422:	465a      	mov	r2, fp
 8005424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005428:	9109      	str	r1, [sp, #36]	; 0x24
 800542a:	f7ff ff17 	bl	800525c <__exponent>
 800542e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005430:	1813      	adds	r3, r2, r0
 8005432:	2a01      	cmp	r2, #1
 8005434:	4681      	mov	r9, r0
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	dc02      	bgt.n	8005440 <_printf_float+0x168>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d2      	lsls	r2, r2, #31
 800543e:	d501      	bpl.n	8005444 <_printf_float+0x16c>
 8005440:	3301      	adds	r3, #1
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005448:	2b00      	cmp	r3, #0
 800544a:	d09c      	beq.n	8005386 <_printf_float+0xae>
 800544c:	232d      	movs	r3, #45	; 0x2d
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005452:	e798      	b.n	8005386 <_printf_float+0xae>
 8005454:	9a06      	ldr	r2, [sp, #24]
 8005456:	2a47      	cmp	r2, #71	; 0x47
 8005458:	d1be      	bne.n	80053d8 <_printf_float+0x100>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1bc      	bne.n	80053d8 <_printf_float+0x100>
 800545e:	2301      	movs	r3, #1
 8005460:	e7b9      	b.n	80053d6 <_printf_float+0xfe>
 8005462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005466:	d118      	bne.n	800549a <_printf_float+0x1c2>
 8005468:	2900      	cmp	r1, #0
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	dd0b      	ble.n	8005486 <_printf_float+0x1ae>
 800546e:	6121      	str	r1, [r4, #16]
 8005470:	b913      	cbnz	r3, 8005478 <_printf_float+0x1a0>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	07d0      	lsls	r0, r2, #31
 8005476:	d502      	bpl.n	800547e <_printf_float+0x1a6>
 8005478:	3301      	adds	r3, #1
 800547a:	440b      	add	r3, r1
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005480:	f04f 0900 	mov.w	r9, #0
 8005484:	e7de      	b.n	8005444 <_printf_float+0x16c>
 8005486:	b913      	cbnz	r3, 800548e <_printf_float+0x1b6>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	07d2      	lsls	r2, r2, #31
 800548c:	d501      	bpl.n	8005492 <_printf_float+0x1ba>
 800548e:	3302      	adds	r3, #2
 8005490:	e7f4      	b.n	800547c <_printf_float+0x1a4>
 8005492:	2301      	movs	r3, #1
 8005494:	e7f2      	b.n	800547c <_printf_float+0x1a4>
 8005496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800549a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549c:	4299      	cmp	r1, r3
 800549e:	db05      	blt.n	80054ac <_printf_float+0x1d4>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	6121      	str	r1, [r4, #16]
 80054a4:	07d8      	lsls	r0, r3, #31
 80054a6:	d5ea      	bpl.n	800547e <_printf_float+0x1a6>
 80054a8:	1c4b      	adds	r3, r1, #1
 80054aa:	e7e7      	b.n	800547c <_printf_float+0x1a4>
 80054ac:	2900      	cmp	r1, #0
 80054ae:	bfd4      	ite	le
 80054b0:	f1c1 0202 	rsble	r2, r1, #2
 80054b4:	2201      	movgt	r2, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	e7e0      	b.n	800547c <_printf_float+0x1a4>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	055a      	lsls	r2, r3, #21
 80054be:	d407      	bmi.n	80054d0 <_printf_float+0x1f8>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	4642      	mov	r2, r8
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	d12c      	bne.n	8005528 <_printf_float+0x250>
 80054ce:	e764      	b.n	800539a <_printf_float+0xc2>
 80054d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054d4:	f240 80e0 	bls.w	8005698 <_printf_float+0x3c0>
 80054d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054dc:	2200      	movs	r2, #0
 80054de:	2300      	movs	r3, #0
 80054e0:	f7fb fb12 	bl	8000b08 <__aeabi_dcmpeq>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d034      	beq.n	8005552 <_printf_float+0x27a>
 80054e8:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <_printf_float+0x2f0>)
 80054ea:	2301      	movs	r3, #1
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f af51 	beq.w	800539a <_printf_float+0xc2>
 80054f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054fc:	429a      	cmp	r2, r3
 80054fe:	db02      	blt.n	8005506 <_printf_float+0x22e>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07d8      	lsls	r0, r3, #31
 8005504:	d510      	bpl.n	8005528 <_printf_float+0x250>
 8005506:	ee18 3a10 	vmov	r3, s16
 800550a:	4652      	mov	r2, sl
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f af41 	beq.w	800539a <_printf_float+0xc2>
 8005518:	f04f 0800 	mov.w	r8, #0
 800551c:	f104 091a 	add.w	r9, r4, #26
 8005520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005522:	3b01      	subs	r3, #1
 8005524:	4543      	cmp	r3, r8
 8005526:	dc09      	bgt.n	800553c <_printf_float+0x264>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	079b      	lsls	r3, r3, #30
 800552c:	f100 8105 	bmi.w	800573a <_printf_float+0x462>
 8005530:	68e0      	ldr	r0, [r4, #12]
 8005532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005534:	4298      	cmp	r0, r3
 8005536:	bfb8      	it	lt
 8005538:	4618      	movlt	r0, r3
 800553a:	e730      	b.n	800539e <_printf_float+0xc6>
 800553c:	2301      	movs	r3, #1
 800553e:	464a      	mov	r2, r9
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f af27 	beq.w	800539a <_printf_float+0xc2>
 800554c:	f108 0801 	add.w	r8, r8, #1
 8005550:	e7e6      	b.n	8005520 <_printf_float+0x248>
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	dc39      	bgt.n	80055cc <_printf_float+0x2f4>
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <_printf_float+0x2f0>)
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af19 	beq.w	800539a <_printf_float+0xc2>
 8005568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800556c:	4313      	orrs	r3, r2
 800556e:	d102      	bne.n	8005576 <_printf_float+0x29e>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	d5d8      	bpl.n	8005528 <_printf_float+0x250>
 8005576:	ee18 3a10 	vmov	r3, s16
 800557a:	4652      	mov	r2, sl
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af09 	beq.w	800539a <_printf_float+0xc2>
 8005588:	f04f 0900 	mov.w	r9, #0
 800558c:	f104 0a1a 	add.w	sl, r4, #26
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	425b      	negs	r3, r3
 8005594:	454b      	cmp	r3, r9
 8005596:	dc01      	bgt.n	800559c <_printf_float+0x2c4>
 8005598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559a:	e792      	b.n	80054c2 <_printf_float+0x1ea>
 800559c:	2301      	movs	r3, #1
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f aef7 	beq.w	800539a <_printf_float+0xc2>
 80055ac:	f109 0901 	add.w	r9, r9, #1
 80055b0:	e7ee      	b.n	8005590 <_printf_float+0x2b8>
 80055b2:	bf00      	nop
 80055b4:	7fefffff 	.word	0x7fefffff
 80055b8:	08009ad4 	.word	0x08009ad4
 80055bc:	08009ad8 	.word	0x08009ad8
 80055c0:	08009ae0 	.word	0x08009ae0
 80055c4:	08009adc 	.word	0x08009adc
 80055c8:	08009ae4 	.word	0x08009ae4
 80055cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055d0:	429a      	cmp	r2, r3
 80055d2:	bfa8      	it	ge
 80055d4:	461a      	movge	r2, r3
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	4691      	mov	r9, r2
 80055da:	dc37      	bgt.n	800564c <_printf_float+0x374>
 80055dc:	f04f 0b00 	mov.w	fp, #0
 80055e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e4:	f104 021a 	add.w	r2, r4, #26
 80055e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	eba3 0309 	sub.w	r3, r3, r9
 80055f0:	455b      	cmp	r3, fp
 80055f2:	dc33      	bgt.n	800565c <_printf_float+0x384>
 80055f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f8:	429a      	cmp	r2, r3
 80055fa:	db3b      	blt.n	8005674 <_printf_float+0x39c>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d438      	bmi.n	8005674 <_printf_float+0x39c>
 8005602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005604:	9b05      	ldr	r3, [sp, #20]
 8005606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	eba2 0901 	sub.w	r9, r2, r1
 800560e:	4599      	cmp	r9, r3
 8005610:	bfa8      	it	ge
 8005612:	4699      	movge	r9, r3
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	dc35      	bgt.n	8005686 <_printf_float+0x3ae>
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005622:	f104 0a1a 	add.w	sl, r4, #26
 8005626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	eba3 0309 	sub.w	r3, r3, r9
 8005630:	4543      	cmp	r3, r8
 8005632:	f77f af79 	ble.w	8005528 <_printf_float+0x250>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f aeaa 	beq.w	800539a <_printf_float+0xc2>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	e7ec      	b.n	8005626 <_printf_float+0x34e>
 800564c:	4613      	mov	r3, r2
 800564e:	4631      	mov	r1, r6
 8005650:	4642      	mov	r2, r8
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	d1c0      	bne.n	80055dc <_printf_float+0x304>
 800565a:	e69e      	b.n	800539a <_printf_float+0xc2>
 800565c:	2301      	movs	r3, #1
 800565e:	4631      	mov	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	9205      	str	r2, [sp, #20]
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f ae97 	beq.w	800539a <_printf_float+0xc2>
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	f10b 0b01 	add.w	fp, fp, #1
 8005672:	e7b9      	b.n	80055e8 <_printf_float+0x310>
 8005674:	ee18 3a10 	vmov	r3, s16
 8005678:	4652      	mov	r2, sl
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	d1be      	bne.n	8005602 <_printf_float+0x32a>
 8005684:	e689      	b.n	800539a <_printf_float+0xc2>
 8005686:	9a05      	ldr	r2, [sp, #20]
 8005688:	464b      	mov	r3, r9
 800568a:	4442      	add	r2, r8
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	d1c1      	bne.n	800561a <_printf_float+0x342>
 8005696:	e680      	b.n	800539a <_printf_float+0xc2>
 8005698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569a:	2a01      	cmp	r2, #1
 800569c:	dc01      	bgt.n	80056a2 <_printf_float+0x3ca>
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d538      	bpl.n	8005714 <_printf_float+0x43c>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4642      	mov	r2, r8
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	f43f ae74 	beq.w	800539a <_printf_float+0xc2>
 80056b2:	ee18 3a10 	vmov	r3, s16
 80056b6:	4652      	mov	r2, sl
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f ae6b 	beq.w	800539a <_printf_float+0xc2>
 80056c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	f7fb fa1c 	bl	8000b08 <__aeabi_dcmpeq>
 80056d0:	b9d8      	cbnz	r0, 800570a <_printf_float+0x432>
 80056d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d4:	f108 0201 	add.w	r2, r8, #1
 80056d8:	3b01      	subs	r3, #1
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	d10e      	bne.n	8005702 <_printf_float+0x42a>
 80056e4:	e659      	b.n	800539a <_printf_float+0xc2>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f ae52 	beq.w	800539a <_printf_float+0xc2>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	4543      	cmp	r3, r8
 8005700:	dcf1      	bgt.n	80056e6 <_printf_float+0x40e>
 8005702:	464b      	mov	r3, r9
 8005704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005708:	e6dc      	b.n	80054c4 <_printf_float+0x1ec>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	f104 0a1a 	add.w	sl, r4, #26
 8005712:	e7f2      	b.n	80056fa <_printf_float+0x422>
 8005714:	2301      	movs	r3, #1
 8005716:	4642      	mov	r2, r8
 8005718:	e7df      	b.n	80056da <_printf_float+0x402>
 800571a:	2301      	movs	r3, #1
 800571c:	464a      	mov	r2, r9
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f ae38 	beq.w	800539a <_printf_float+0xc2>
 800572a:	f108 0801 	add.w	r8, r8, #1
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	4543      	cmp	r3, r8
 8005736:	dcf0      	bgt.n	800571a <_printf_float+0x442>
 8005738:	e6fa      	b.n	8005530 <_printf_float+0x258>
 800573a:	f04f 0800 	mov.w	r8, #0
 800573e:	f104 0919 	add.w	r9, r4, #25
 8005742:	e7f4      	b.n	800572e <_printf_float+0x456>

08005744 <_printf_common>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	4616      	mov	r6, r2
 800574a:	4699      	mov	r9, r3
 800574c:	688a      	ldr	r2, [r1, #8]
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005754:	4293      	cmp	r3, r2
 8005756:	bfb8      	it	lt
 8005758:	4613      	movlt	r3, r2
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005760:	4607      	mov	r7, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b10a      	cbz	r2, 800576a <_printf_common+0x26>
 8005766:	3301      	adds	r3, #1
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0699      	lsls	r1, r3, #26
 800576e:	bf42      	ittt	mi
 8005770:	6833      	ldrmi	r3, [r6, #0]
 8005772:	3302      	addmi	r3, #2
 8005774:	6033      	strmi	r3, [r6, #0]
 8005776:	6825      	ldr	r5, [r4, #0]
 8005778:	f015 0506 	ands.w	r5, r5, #6
 800577c:	d106      	bne.n	800578c <_printf_common+0x48>
 800577e:	f104 0a19 	add.w	sl, r4, #25
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	6832      	ldr	r2, [r6, #0]
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	42ab      	cmp	r3, r5
 800578a:	dc26      	bgt.n	80057da <_printf_common+0x96>
 800578c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005790:	1e13      	subs	r3, r2, #0
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	bf18      	it	ne
 8005796:	2301      	movne	r3, #1
 8005798:	0692      	lsls	r2, r2, #26
 800579a:	d42b      	bmi.n	80057f4 <_printf_common+0xb0>
 800579c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d01e      	beq.n	80057e8 <_printf_common+0xa4>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	68e5      	ldr	r5, [r4, #12]
 80057ae:	6832      	ldr	r2, [r6, #0]
 80057b0:	f003 0306 	and.w	r3, r3, #6
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	bf08      	it	eq
 80057b8:	1aad      	subeq	r5, r5, r2
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	bf0c      	ite	eq
 80057c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c4:	2500      	movne	r5, #0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfc4      	itt	gt
 80057ca:	1a9b      	subgt	r3, r3, r2
 80057cc:	18ed      	addgt	r5, r5, r3
 80057ce:	2600      	movs	r6, #0
 80057d0:	341a      	adds	r4, #26
 80057d2:	42b5      	cmp	r5, r6
 80057d4:	d11a      	bne.n	800580c <_printf_common+0xc8>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e008      	b.n	80057ec <_printf_common+0xa8>
 80057da:	2301      	movs	r3, #1
 80057dc:	4652      	mov	r2, sl
 80057de:	4649      	mov	r1, r9
 80057e0:	4638      	mov	r0, r7
 80057e2:	47c0      	blx	r8
 80057e4:	3001      	adds	r0, #1
 80057e6:	d103      	bne.n	80057f0 <_printf_common+0xac>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7c6      	b.n	8005782 <_printf_common+0x3e>
 80057f4:	18e1      	adds	r1, r4, r3
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	2030      	movs	r0, #48	; 0x30
 80057fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057fe:	4422      	add	r2, r4
 8005800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005808:	3302      	adds	r3, #2
 800580a:	e7c7      	b.n	800579c <_printf_common+0x58>
 800580c:	2301      	movs	r3, #1
 800580e:	4622      	mov	r2, r4
 8005810:	4649      	mov	r1, r9
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d0e6      	beq.n	80057e8 <_printf_common+0xa4>
 800581a:	3601      	adds	r6, #1
 800581c:	e7d9      	b.n	80057d2 <_printf_common+0x8e>
	...

08005820 <_printf_i>:
 8005820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	460c      	mov	r4, r1
 8005826:	4691      	mov	r9, r2
 8005828:	7e27      	ldrb	r7, [r4, #24]
 800582a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800582c:	2f78      	cmp	r7, #120	; 0x78
 800582e:	4680      	mov	r8, r0
 8005830:	469a      	mov	sl, r3
 8005832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005836:	d807      	bhi.n	8005848 <_printf_i+0x28>
 8005838:	2f62      	cmp	r7, #98	; 0x62
 800583a:	d80a      	bhi.n	8005852 <_printf_i+0x32>
 800583c:	2f00      	cmp	r7, #0
 800583e:	f000 80d8 	beq.w	80059f2 <_printf_i+0x1d2>
 8005842:	2f58      	cmp	r7, #88	; 0x58
 8005844:	f000 80a3 	beq.w	800598e <_printf_i+0x16e>
 8005848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800584c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005850:	e03a      	b.n	80058c8 <_printf_i+0xa8>
 8005852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005856:	2b15      	cmp	r3, #21
 8005858:	d8f6      	bhi.n	8005848 <_printf_i+0x28>
 800585a:	a001      	add	r0, pc, #4	; (adr r0, 8005860 <_printf_i+0x40>)
 800585c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058cd 	.word	0x080058cd
 8005868:	08005849 	.word	0x08005849
 800586c:	08005849 	.word	0x08005849
 8005870:	08005849 	.word	0x08005849
 8005874:	08005849 	.word	0x08005849
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005849 	.word	0x08005849
 8005880:	08005849 	.word	0x08005849
 8005884:	08005849 	.word	0x08005849
 8005888:	08005849 	.word	0x08005849
 800588c:	080059d9 	.word	0x080059d9
 8005890:	080058fd 	.word	0x080058fd
 8005894:	080059bb 	.word	0x080059bb
 8005898:	08005849 	.word	0x08005849
 800589c:	08005849 	.word	0x08005849
 80058a0:	080059fb 	.word	0x080059fb
 80058a4:	08005849 	.word	0x08005849
 80058a8:	080058fd 	.word	0x080058fd
 80058ac:	08005849 	.word	0x08005849
 80058b0:	08005849 	.word	0x08005849
 80058b4:	080059c3 	.word	0x080059c3
 80058b8:	680b      	ldr	r3, [r1, #0]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	600a      	str	r2, [r1, #0]
 80058c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0a3      	b.n	8005a14 <_printf_i+0x1f4>
 80058cc:	6825      	ldr	r5, [r4, #0]
 80058ce:	6808      	ldr	r0, [r1, #0]
 80058d0:	062e      	lsls	r6, r5, #24
 80058d2:	f100 0304 	add.w	r3, r0, #4
 80058d6:	d50a      	bpl.n	80058ee <_printf_i+0xce>
 80058d8:	6805      	ldr	r5, [r0, #0]
 80058da:	600b      	str	r3, [r1, #0]
 80058dc:	2d00      	cmp	r5, #0
 80058de:	da03      	bge.n	80058e8 <_printf_i+0xc8>
 80058e0:	232d      	movs	r3, #45	; 0x2d
 80058e2:	426d      	negs	r5, r5
 80058e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e8:	485e      	ldr	r0, [pc, #376]	; (8005a64 <_printf_i+0x244>)
 80058ea:	230a      	movs	r3, #10
 80058ec:	e019      	b.n	8005922 <_printf_i+0x102>
 80058ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058f2:	6805      	ldr	r5, [r0, #0]
 80058f4:	600b      	str	r3, [r1, #0]
 80058f6:	bf18      	it	ne
 80058f8:	b22d      	sxthne	r5, r5
 80058fa:	e7ef      	b.n	80058dc <_printf_i+0xbc>
 80058fc:	680b      	ldr	r3, [r1, #0]
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	1d18      	adds	r0, r3, #4
 8005902:	6008      	str	r0, [r1, #0]
 8005904:	0628      	lsls	r0, r5, #24
 8005906:	d501      	bpl.n	800590c <_printf_i+0xec>
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0xf2>
 800590c:	0669      	lsls	r1, r5, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0xe8>
 8005910:	881d      	ldrh	r5, [r3, #0]
 8005912:	4854      	ldr	r0, [pc, #336]	; (8005a64 <_printf_i+0x244>)
 8005914:	2f6f      	cmp	r7, #111	; 0x6f
 8005916:	bf0c      	ite	eq
 8005918:	2308      	moveq	r3, #8
 800591a:	230a      	movne	r3, #10
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005922:	6866      	ldr	r6, [r4, #4]
 8005924:	60a6      	str	r6, [r4, #8]
 8005926:	2e00      	cmp	r6, #0
 8005928:	bfa2      	ittt	ge
 800592a:	6821      	ldrge	r1, [r4, #0]
 800592c:	f021 0104 	bicge.w	r1, r1, #4
 8005930:	6021      	strge	r1, [r4, #0]
 8005932:	b90d      	cbnz	r5, 8005938 <_printf_i+0x118>
 8005934:	2e00      	cmp	r6, #0
 8005936:	d04d      	beq.n	80059d4 <_printf_i+0x1b4>
 8005938:	4616      	mov	r6, r2
 800593a:	fbb5 f1f3 	udiv	r1, r5, r3
 800593e:	fb03 5711 	mls	r7, r3, r1, r5
 8005942:	5dc7      	ldrb	r7, [r0, r7]
 8005944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005948:	462f      	mov	r7, r5
 800594a:	42bb      	cmp	r3, r7
 800594c:	460d      	mov	r5, r1
 800594e:	d9f4      	bls.n	800593a <_printf_i+0x11a>
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <_printf_i+0x14c>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07df      	lsls	r7, r3, #31
 8005958:	d508      	bpl.n	800596c <_printf_i+0x14c>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	6861      	ldr	r1, [r4, #4]
 800595e:	4299      	cmp	r1, r3
 8005960:	bfde      	ittt	le
 8005962:	2330      	movle	r3, #48	; 0x30
 8005964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800596c:	1b92      	subs	r2, r2, r6
 800596e:	6122      	str	r2, [r4, #16]
 8005970:	f8cd a000 	str.w	sl, [sp]
 8005974:	464b      	mov	r3, r9
 8005976:	aa03      	add	r2, sp, #12
 8005978:	4621      	mov	r1, r4
 800597a:	4640      	mov	r0, r8
 800597c:	f7ff fee2 	bl	8005744 <_printf_common>
 8005980:	3001      	adds	r0, #1
 8005982:	d14c      	bne.n	8005a1e <_printf_i+0x1fe>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b004      	add	sp, #16
 800598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598e:	4835      	ldr	r0, [pc, #212]	; (8005a64 <_printf_i+0x244>)
 8005990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	680e      	ldr	r6, [r1, #0]
 8005998:	061f      	lsls	r7, r3, #24
 800599a:	f856 5b04 	ldr.w	r5, [r6], #4
 800599e:	600e      	str	r6, [r1, #0]
 80059a0:	d514      	bpl.n	80059cc <_printf_i+0x1ac>
 80059a2:	07d9      	lsls	r1, r3, #31
 80059a4:	bf44      	itt	mi
 80059a6:	f043 0320 	orrmi.w	r3, r3, #32
 80059aa:	6023      	strmi	r3, [r4, #0]
 80059ac:	b91d      	cbnz	r5, 80059b6 <_printf_i+0x196>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f023 0320 	bic.w	r3, r3, #32
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	2310      	movs	r3, #16
 80059b8:	e7b0      	b.n	800591c <_printf_i+0xfc>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f043 0320 	orr.w	r3, r3, #32
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	2378      	movs	r3, #120	; 0x78
 80059c4:	4828      	ldr	r0, [pc, #160]	; (8005a68 <_printf_i+0x248>)
 80059c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ca:	e7e3      	b.n	8005994 <_printf_i+0x174>
 80059cc:	065e      	lsls	r6, r3, #25
 80059ce:	bf48      	it	mi
 80059d0:	b2ad      	uxthmi	r5, r5
 80059d2:	e7e6      	b.n	80059a2 <_printf_i+0x182>
 80059d4:	4616      	mov	r6, r2
 80059d6:	e7bb      	b.n	8005950 <_printf_i+0x130>
 80059d8:	680b      	ldr	r3, [r1, #0]
 80059da:	6826      	ldr	r6, [r4, #0]
 80059dc:	6960      	ldr	r0, [r4, #20]
 80059de:	1d1d      	adds	r5, r3, #4
 80059e0:	600d      	str	r5, [r1, #0]
 80059e2:	0635      	lsls	r5, r6, #24
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0x1cc>
 80059e8:	6018      	str	r0, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <_printf_i+0x1d2>
 80059ec:	0671      	lsls	r1, r6, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0x1c8>
 80059f0:	8018      	strh	r0, [r3, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	4616      	mov	r6, r2
 80059f8:	e7ba      	b.n	8005970 <_printf_i+0x150>
 80059fa:	680b      	ldr	r3, [r1, #0]
 80059fc:	1d1a      	adds	r2, r3, #4
 80059fe:	600a      	str	r2, [r1, #0]
 8005a00:	681e      	ldr	r6, [r3, #0]
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	2100      	movs	r1, #0
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7fa fc0a 	bl	8000220 <memchr>
 8005a0c:	b108      	cbz	r0, 8005a12 <_printf_i+0x1f2>
 8005a0e:	1b80      	subs	r0, r0, r6
 8005a10:	6060      	str	r0, [r4, #4]
 8005a12:	6863      	ldr	r3, [r4, #4]
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	2300      	movs	r3, #0
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	e7a8      	b.n	8005970 <_printf_i+0x150>
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	47d0      	blx	sl
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d0ab      	beq.n	8005984 <_printf_i+0x164>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	079b      	lsls	r3, r3, #30
 8005a30:	d413      	bmi.n	8005a5a <_printf_i+0x23a>
 8005a32:	68e0      	ldr	r0, [r4, #12]
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	4298      	cmp	r0, r3
 8005a38:	bfb8      	it	lt
 8005a3a:	4618      	movlt	r0, r3
 8005a3c:	e7a4      	b.n	8005988 <_printf_i+0x168>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4632      	mov	r2, r6
 8005a42:	4649      	mov	r1, r9
 8005a44:	4640      	mov	r0, r8
 8005a46:	47d0      	blx	sl
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d09b      	beq.n	8005984 <_printf_i+0x164>
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	68e3      	ldr	r3, [r4, #12]
 8005a50:	9903      	ldr	r1, [sp, #12]
 8005a52:	1a5b      	subs	r3, r3, r1
 8005a54:	42ab      	cmp	r3, r5
 8005a56:	dcf2      	bgt.n	8005a3e <_printf_i+0x21e>
 8005a58:	e7eb      	b.n	8005a32 <_printf_i+0x212>
 8005a5a:	2500      	movs	r5, #0
 8005a5c:	f104 0619 	add.w	r6, r4, #25
 8005a60:	e7f5      	b.n	8005a4e <_printf_i+0x22e>
 8005a62:	bf00      	nop
 8005a64:	08009ae6 	.word	0x08009ae6
 8005a68:	08009af7 	.word	0x08009af7

08005a6c <_scanf_float>:
 8005a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a70:	b087      	sub	sp, #28
 8005a72:	4617      	mov	r7, r2
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	688b      	ldr	r3, [r1, #8]
 8005a78:	1e5a      	subs	r2, r3, #1
 8005a7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a7e:	bf83      	ittte	hi
 8005a80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a84:	195b      	addhi	r3, r3, r5
 8005a86:	9302      	strhi	r3, [sp, #8]
 8005a88:	2300      	movls	r3, #0
 8005a8a:	bf86      	itte	hi
 8005a8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a90:	608b      	strhi	r3, [r1, #8]
 8005a92:	9302      	strls	r3, [sp, #8]
 8005a94:	680b      	ldr	r3, [r1, #0]
 8005a96:	468b      	mov	fp, r1
 8005a98:	2500      	movs	r5, #0
 8005a9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005aa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	465e      	mov	r6, fp
 8005aac:	46aa      	mov	sl, r5
 8005aae:	46a9      	mov	r9, r5
 8005ab0:	9501      	str	r5, [sp, #4]
 8005ab2:	68a2      	ldr	r2, [r4, #8]
 8005ab4:	b152      	cbz	r2, 8005acc <_scanf_float+0x60>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b4e      	cmp	r3, #78	; 0x4e
 8005abc:	d864      	bhi.n	8005b88 <_scanf_float+0x11c>
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d83c      	bhi.n	8005b3c <_scanf_float+0xd0>
 8005ac2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ac6:	b2c8      	uxtb	r0, r1
 8005ac8:	280e      	cmp	r0, #14
 8005aca:	d93a      	bls.n	8005b42 <_scanf_float+0xd6>
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	d003      	beq.n	8005ada <_scanf_float+0x6e>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ade:	f1ba 0f01 	cmp.w	sl, #1
 8005ae2:	f200 8113 	bhi.w	8005d0c <_scanf_float+0x2a0>
 8005ae6:	455e      	cmp	r6, fp
 8005ae8:	f200 8105 	bhi.w	8005cf6 <_scanf_float+0x28a>
 8005aec:	2501      	movs	r5, #1
 8005aee:	4628      	mov	r0, r5
 8005af0:	b007      	add	sp, #28
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005afa:	2a0d      	cmp	r2, #13
 8005afc:	d8e6      	bhi.n	8005acc <_scanf_float+0x60>
 8005afe:	a101      	add	r1, pc, #4	; (adr r1, 8005b04 <_scanf_float+0x98>)
 8005b00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b04:	08005c43 	.word	0x08005c43
 8005b08:	08005acd 	.word	0x08005acd
 8005b0c:	08005acd 	.word	0x08005acd
 8005b10:	08005acd 	.word	0x08005acd
 8005b14:	08005ca3 	.word	0x08005ca3
 8005b18:	08005c7b 	.word	0x08005c7b
 8005b1c:	08005acd 	.word	0x08005acd
 8005b20:	08005acd 	.word	0x08005acd
 8005b24:	08005c51 	.word	0x08005c51
 8005b28:	08005acd 	.word	0x08005acd
 8005b2c:	08005acd 	.word	0x08005acd
 8005b30:	08005acd 	.word	0x08005acd
 8005b34:	08005acd 	.word	0x08005acd
 8005b38:	08005c09 	.word	0x08005c09
 8005b3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b40:	e7db      	b.n	8005afa <_scanf_float+0x8e>
 8005b42:	290e      	cmp	r1, #14
 8005b44:	d8c2      	bhi.n	8005acc <_scanf_float+0x60>
 8005b46:	a001      	add	r0, pc, #4	; (adr r0, 8005b4c <_scanf_float+0xe0>)
 8005b48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b4c:	08005bfb 	.word	0x08005bfb
 8005b50:	08005acd 	.word	0x08005acd
 8005b54:	08005bfb 	.word	0x08005bfb
 8005b58:	08005c8f 	.word	0x08005c8f
 8005b5c:	08005acd 	.word	0x08005acd
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005be5 	.word	0x08005be5
 8005b68:	08005be5 	.word	0x08005be5
 8005b6c:	08005be5 	.word	0x08005be5
 8005b70:	08005be5 	.word	0x08005be5
 8005b74:	08005be5 	.word	0x08005be5
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005be5 	.word	0x08005be5
 8005b84:	08005be5 	.word	0x08005be5
 8005b88:	2b6e      	cmp	r3, #110	; 0x6e
 8005b8a:	d809      	bhi.n	8005ba0 <_scanf_float+0x134>
 8005b8c:	2b60      	cmp	r3, #96	; 0x60
 8005b8e:	d8b2      	bhi.n	8005af6 <_scanf_float+0x8a>
 8005b90:	2b54      	cmp	r3, #84	; 0x54
 8005b92:	d077      	beq.n	8005c84 <_scanf_float+0x218>
 8005b94:	2b59      	cmp	r3, #89	; 0x59
 8005b96:	d199      	bne.n	8005acc <_scanf_float+0x60>
 8005b98:	2d07      	cmp	r5, #7
 8005b9a:	d197      	bne.n	8005acc <_scanf_float+0x60>
 8005b9c:	2508      	movs	r5, #8
 8005b9e:	e029      	b.n	8005bf4 <_scanf_float+0x188>
 8005ba0:	2b74      	cmp	r3, #116	; 0x74
 8005ba2:	d06f      	beq.n	8005c84 <_scanf_float+0x218>
 8005ba4:	2b79      	cmp	r3, #121	; 0x79
 8005ba6:	e7f6      	b.n	8005b96 <_scanf_float+0x12a>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	05c8      	lsls	r0, r1, #23
 8005bac:	d51a      	bpl.n	8005be4 <_scanf_float+0x178>
 8005bae:	9b02      	ldr	r3, [sp, #8]
 8005bb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005bb4:	6021      	str	r1, [r4, #0]
 8005bb6:	f109 0901 	add.w	r9, r9, #1
 8005bba:	b11b      	cbz	r3, 8005bc4 <_scanf_float+0x158>
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	3201      	adds	r2, #1
 8005bc0:	9302      	str	r3, [sp, #8]
 8005bc2:	60a2      	str	r2, [r4, #8]
 8005bc4:	68a3      	ldr	r3, [r4, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	60a3      	str	r3, [r4, #8]
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	f340 8084 	ble.w	8005ce4 <_scanf_float+0x278>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	e766      	b.n	8005ab2 <_scanf_float+0x46>
 8005be4:	eb1a 0f05 	cmn.w	sl, r5
 8005be8:	f47f af70 	bne.w	8005acc <_scanf_float+0x60>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8005bf8:	e7e4      	b.n	8005bc4 <_scanf_float+0x158>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	0610      	lsls	r0, r2, #24
 8005bfe:	f57f af65 	bpl.w	8005acc <_scanf_float+0x60>
 8005c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c06:	e7f4      	b.n	8005bf2 <_scanf_float+0x186>
 8005c08:	f1ba 0f00 	cmp.w	sl, #0
 8005c0c:	d10e      	bne.n	8005c2c <_scanf_float+0x1c0>
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	d10e      	bne.n	8005c32 <_scanf_float+0x1c6>
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c1e:	d108      	bne.n	8005c32 <_scanf_float+0x1c6>
 8005c20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	f04f 0a01 	mov.w	sl, #1
 8005c2a:	e7e3      	b.n	8005bf4 <_scanf_float+0x188>
 8005c2c:	f1ba 0f02 	cmp.w	sl, #2
 8005c30:	d055      	beq.n	8005cde <_scanf_float+0x272>
 8005c32:	2d01      	cmp	r5, #1
 8005c34:	d002      	beq.n	8005c3c <_scanf_float+0x1d0>
 8005c36:	2d04      	cmp	r5, #4
 8005c38:	f47f af48 	bne.w	8005acc <_scanf_float+0x60>
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	b2ed      	uxtb	r5, r5
 8005c40:	e7d8      	b.n	8005bf4 <_scanf_float+0x188>
 8005c42:	f1ba 0f01 	cmp.w	sl, #1
 8005c46:	f47f af41 	bne.w	8005acc <_scanf_float+0x60>
 8005c4a:	f04f 0a02 	mov.w	sl, #2
 8005c4e:	e7d1      	b.n	8005bf4 <_scanf_float+0x188>
 8005c50:	b97d      	cbnz	r5, 8005c72 <_scanf_float+0x206>
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	f47f af3c 	bne.w	8005ad2 <_scanf_float+0x66>
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c64:	f47f af39 	bne.w	8005ada <_scanf_float+0x6e>
 8005c68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c6c:	6022      	str	r2, [r4, #0]
 8005c6e:	2501      	movs	r5, #1
 8005c70:	e7c0      	b.n	8005bf4 <_scanf_float+0x188>
 8005c72:	2d03      	cmp	r5, #3
 8005c74:	d0e2      	beq.n	8005c3c <_scanf_float+0x1d0>
 8005c76:	2d05      	cmp	r5, #5
 8005c78:	e7de      	b.n	8005c38 <_scanf_float+0x1cc>
 8005c7a:	2d02      	cmp	r5, #2
 8005c7c:	f47f af26 	bne.w	8005acc <_scanf_float+0x60>
 8005c80:	2503      	movs	r5, #3
 8005c82:	e7b7      	b.n	8005bf4 <_scanf_float+0x188>
 8005c84:	2d06      	cmp	r5, #6
 8005c86:	f47f af21 	bne.w	8005acc <_scanf_float+0x60>
 8005c8a:	2507      	movs	r5, #7
 8005c8c:	e7b2      	b.n	8005bf4 <_scanf_float+0x188>
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	0591      	lsls	r1, r2, #22
 8005c92:	f57f af1b 	bpl.w	8005acc <_scanf_float+0x60>
 8005c96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ca0:	e7a8      	b.n	8005bf4 <_scanf_float+0x188>
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ca8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005cac:	d006      	beq.n	8005cbc <_scanf_float+0x250>
 8005cae:	0550      	lsls	r0, r2, #21
 8005cb0:	f57f af0c 	bpl.w	8005acc <_scanf_float+0x60>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	f43f af0f 	beq.w	8005ada <_scanf_float+0x6e>
 8005cbc:	0591      	lsls	r1, r2, #22
 8005cbe:	bf58      	it	pl
 8005cc0:	9901      	ldrpl	r1, [sp, #4]
 8005cc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cc6:	bf58      	it	pl
 8005cc8:	eba9 0101 	subpl.w	r1, r9, r1
 8005ccc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005cd0:	bf58      	it	pl
 8005cd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	e78a      	b.n	8005bf4 <_scanf_float+0x188>
 8005cde:	f04f 0a03 	mov.w	sl, #3
 8005ce2:	e787      	b.n	8005bf4 <_scanf_float+0x188>
 8005ce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4640      	mov	r0, r8
 8005cec:	4798      	blx	r3
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f aedf 	beq.w	8005ab2 <_scanf_float+0x46>
 8005cf4:	e6ea      	b.n	8005acc <_scanf_float+0x60>
 8005cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cfe:	463a      	mov	r2, r7
 8005d00:	4640      	mov	r0, r8
 8005d02:	4798      	blx	r3
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	e6ec      	b.n	8005ae6 <_scanf_float+0x7a>
 8005d0c:	1e6b      	subs	r3, r5, #1
 8005d0e:	2b06      	cmp	r3, #6
 8005d10:	d825      	bhi.n	8005d5e <_scanf_float+0x2f2>
 8005d12:	2d02      	cmp	r5, #2
 8005d14:	d836      	bhi.n	8005d84 <_scanf_float+0x318>
 8005d16:	455e      	cmp	r6, fp
 8005d18:	f67f aee8 	bls.w	8005aec <_scanf_float+0x80>
 8005d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d24:	463a      	mov	r2, r7
 8005d26:	4640      	mov	r0, r8
 8005d28:	4798      	blx	r3
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	e7f1      	b.n	8005d16 <_scanf_float+0x2aa>
 8005d32:	9802      	ldr	r0, [sp, #8]
 8005d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d3c:	9002      	str	r0, [sp, #8]
 8005d3e:	463a      	mov	r2, r7
 8005d40:	4640      	mov	r0, r8
 8005d42:	4798      	blx	r3
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d4e:	fa5f fa8a 	uxtb.w	sl, sl
 8005d52:	f1ba 0f02 	cmp.w	sl, #2
 8005d56:	d1ec      	bne.n	8005d32 <_scanf_float+0x2c6>
 8005d58:	3d03      	subs	r5, #3
 8005d5a:	b2ed      	uxtb	r5, r5
 8005d5c:	1b76      	subs	r6, r6, r5
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	05da      	lsls	r2, r3, #23
 8005d62:	d52f      	bpl.n	8005dc4 <_scanf_float+0x358>
 8005d64:	055b      	lsls	r3, r3, #21
 8005d66:	d510      	bpl.n	8005d8a <_scanf_float+0x31e>
 8005d68:	455e      	cmp	r6, fp
 8005d6a:	f67f aebf 	bls.w	8005aec <_scanf_float+0x80>
 8005d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d76:	463a      	mov	r2, r7
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4798      	blx	r3
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	e7f1      	b.n	8005d68 <_scanf_float+0x2fc>
 8005d84:	46aa      	mov	sl, r5
 8005d86:	9602      	str	r6, [sp, #8]
 8005d88:	e7df      	b.n	8005d4a <_scanf_float+0x2de>
 8005d8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	2965      	cmp	r1, #101	; 0x65
 8005d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d96:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	d00c      	beq.n	8005db8 <_scanf_float+0x34c>
 8005d9e:	2945      	cmp	r1, #69	; 0x45
 8005da0:	d00a      	beq.n	8005db8 <_scanf_float+0x34c>
 8005da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da6:	463a      	mov	r2, r7
 8005da8:	4640      	mov	r0, r8
 8005daa:	4798      	blx	r3
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	1eb5      	subs	r5, r6, #2
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4798      	blx	r3
 8005dc2:	462e      	mov	r6, r5
 8005dc4:	6825      	ldr	r5, [r4, #0]
 8005dc6:	f015 0510 	ands.w	r5, r5, #16
 8005dca:	d158      	bne.n	8005e7e <_scanf_float+0x412>
 8005dcc:	7035      	strb	r5, [r6, #0]
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	d11c      	bne.n	8005e14 <_scanf_float+0x3a8>
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	454b      	cmp	r3, r9
 8005dde:	eba3 0209 	sub.w	r2, r3, r9
 8005de2:	d124      	bne.n	8005e2e <_scanf_float+0x3c2>
 8005de4:	2200      	movs	r2, #0
 8005de6:	4659      	mov	r1, fp
 8005de8:	4640      	mov	r0, r8
 8005dea:	f000 fec7 	bl	8006b7c <_strtod_r>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f011 0f02 	tst.w	r1, #2
 8005df8:	ec57 6b10 	vmov	r6, r7, d0
 8005dfc:	f103 0204 	add.w	r2, r3, #4
 8005e00:	d020      	beq.n	8005e44 <_scanf_float+0x3d8>
 8005e02:	9903      	ldr	r1, [sp, #12]
 8005e04:	600a      	str	r2, [r1, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	e9c3 6700 	strd	r6, r7, [r3]
 8005e0c:	68e3      	ldr	r3, [r4, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60e3      	str	r3, [r4, #12]
 8005e12:	e66c      	b.n	8005aee <_scanf_float+0x82>
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0e4      	beq.n	8005de4 <_scanf_float+0x378>
 8005e1a:	9905      	ldr	r1, [sp, #20]
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	462a      	mov	r2, r5
 8005e20:	3101      	adds	r1, #1
 8005e22:	4640      	mov	r0, r8
 8005e24:	f000 ff34 	bl	8006c90 <_strtol_r>
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	9e05      	ldr	r6, [sp, #20]
 8005e2c:	1ac2      	subs	r2, r0, r3
 8005e2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e32:	429e      	cmp	r6, r3
 8005e34:	bf28      	it	cs
 8005e36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e3a:	4912      	ldr	r1, [pc, #72]	; (8005e84 <_scanf_float+0x418>)
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f843 	bl	8005ec8 <siprintf>
 8005e42:	e7cf      	b.n	8005de4 <_scanf_float+0x378>
 8005e44:	f011 0f04 	tst.w	r1, #4
 8005e48:	9903      	ldr	r1, [sp, #12]
 8005e4a:	600a      	str	r2, [r1, #0]
 8005e4c:	d1db      	bne.n	8005e06 <_scanf_float+0x39a>
 8005e4e:	f8d3 8000 	ldr.w	r8, [r3]
 8005e52:	ee10 2a10 	vmov	r2, s0
 8005e56:	ee10 0a10 	vmov	r0, s0
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	f7fa fe85 	bl	8000b6c <__aeabi_dcmpun>
 8005e62:	b128      	cbz	r0, 8005e70 <_scanf_float+0x404>
 8005e64:	4808      	ldr	r0, [pc, #32]	; (8005e88 <_scanf_float+0x41c>)
 8005e66:	f000 f829 	bl	8005ebc <nanf>
 8005e6a:	ed88 0a00 	vstr	s0, [r8]
 8005e6e:	e7cd      	b.n	8005e0c <_scanf_float+0x3a0>
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fed8 	bl	8000c28 <__aeabi_d2f>
 8005e78:	f8c8 0000 	str.w	r0, [r8]
 8005e7c:	e7c6      	b.n	8005e0c <_scanf_float+0x3a0>
 8005e7e:	2500      	movs	r5, #0
 8005e80:	e635      	b.n	8005aee <_scanf_float+0x82>
 8005e82:	bf00      	nop
 8005e84:	08009b08 	.word	0x08009b08
 8005e88:	08009f80 	.word	0x08009f80

08005e8c <iprintf>:
 8005e8c:	b40f      	push	{r0, r1, r2, r3}
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <iprintf+0x2c>)
 8005e90:	b513      	push	{r0, r1, r4, lr}
 8005e92:	681c      	ldr	r4, [r3, #0]
 8005e94:	b124      	cbz	r4, 8005ea0 <iprintf+0x14>
 8005e96:	69a3      	ldr	r3, [r4, #24]
 8005e98:	b913      	cbnz	r3, 8005ea0 <iprintf+0x14>
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f001 fdcc 	bl	8007a38 <__sinit>
 8005ea0:	ab05      	add	r3, sp, #20
 8005ea2:	9a04      	ldr	r2, [sp, #16]
 8005ea4:	68a1      	ldr	r1, [r4, #8]
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f003 f8fb 	bl	80090a4 <_vfiprintf_r>
 8005eae:	b002      	add	sp, #8
 8005eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb4:	b004      	add	sp, #16
 8005eb6:	4770      	bx	lr
 8005eb8:	2000000c 	.word	0x2000000c

08005ebc <nanf>:
 8005ebc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ec4 <nanf+0x8>
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	7fc00000 	.word	0x7fc00000

08005ec8 <siprintf>:
 8005ec8:	b40e      	push	{r1, r2, r3}
 8005eca:	b500      	push	{lr}
 8005ecc:	b09c      	sub	sp, #112	; 0x70
 8005ece:	ab1d      	add	r3, sp, #116	; 0x74
 8005ed0:	9002      	str	r0, [sp, #8]
 8005ed2:	9006      	str	r0, [sp, #24]
 8005ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ed8:	4809      	ldr	r0, [pc, #36]	; (8005f00 <siprintf+0x38>)
 8005eda:	9107      	str	r1, [sp, #28]
 8005edc:	9104      	str	r1, [sp, #16]
 8005ede:	4909      	ldr	r1, [pc, #36]	; (8005f04 <siprintf+0x3c>)
 8005ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee4:	9105      	str	r1, [sp, #20]
 8005ee6:	6800      	ldr	r0, [r0, #0]
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	a902      	add	r1, sp, #8
 8005eec:	f002 ffb0 	bl	8008e50 <_svfiprintf_r>
 8005ef0:	9b02      	ldr	r3, [sp, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	b01c      	add	sp, #112	; 0x70
 8005ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005efc:	b003      	add	sp, #12
 8005efe:	4770      	bx	lr
 8005f00:	2000000c 	.word	0x2000000c
 8005f04:	ffff0208 	.word	0xffff0208

08005f08 <strncmp>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	b16a      	cbz	r2, 8005f28 <strncmp+0x20>
 8005f0c:	3901      	subs	r1, #1
 8005f0e:	1884      	adds	r4, r0, r2
 8005f10:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005f14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <strncmp+0x1c>
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d001      	beq.n	8005f24 <strncmp+0x1c>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f5      	bne.n	8005f10 <strncmp+0x8>
 8005f24:	1a98      	subs	r0, r3, r2
 8005f26:	bd10      	pop	{r4, pc}
 8005f28:	4610      	mov	r0, r2
 8005f2a:	e7fc      	b.n	8005f26 <strncmp+0x1e>

08005f2c <sulp>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	ec45 4b10 	vmov	d0, r4, r5
 8005f36:	4616      	mov	r6, r2
 8005f38:	f002 fd26 	bl	8008988 <__ulp>
 8005f3c:	ec51 0b10 	vmov	r0, r1, d0
 8005f40:	b17e      	cbz	r6, 8005f62 <sulp+0x36>
 8005f42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd09      	ble.n	8005f62 <sulp+0x36>
 8005f4e:	051b      	lsls	r3, r3, #20
 8005f50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f54:	2400      	movs	r4, #0
 8005f56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	f7fa fb6b 	bl	8000638 <__aeabi_dmul>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	0000      	movs	r0, r0
	...

08005f68 <_strtod_l>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b0a3      	sub	sp, #140	; 0x8c
 8005f6e:	461f      	mov	r7, r3
 8005f70:	2300      	movs	r3, #0
 8005f72:	931e      	str	r3, [sp, #120]	; 0x78
 8005f74:	4ba4      	ldr	r3, [pc, #656]	; (8006208 <_strtod_l+0x2a0>)
 8005f76:	9219      	str	r2, [sp, #100]	; 0x64
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	9307      	str	r3, [sp, #28]
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	4688      	mov	r8, r1
 8005f82:	f7fa f945 	bl	8000210 <strlen>
 8005f86:	f04f 0a00 	mov.w	sl, #0
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	f04f 0b00 	mov.w	fp, #0
 8005f90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	2a2b      	cmp	r2, #43	; 0x2b
 8005f9a:	d04c      	beq.n	8006036 <_strtod_l+0xce>
 8005f9c:	d839      	bhi.n	8006012 <_strtod_l+0xaa>
 8005f9e:	2a0d      	cmp	r2, #13
 8005fa0:	d832      	bhi.n	8006008 <_strtod_l+0xa0>
 8005fa2:	2a08      	cmp	r2, #8
 8005fa4:	d832      	bhi.n	800600c <_strtod_l+0xa4>
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	d03c      	beq.n	8006024 <_strtod_l+0xbc>
 8005faa:	2300      	movs	r3, #0
 8005fac:	930e      	str	r3, [sp, #56]	; 0x38
 8005fae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005fb0:	7833      	ldrb	r3, [r6, #0]
 8005fb2:	2b30      	cmp	r3, #48	; 0x30
 8005fb4:	f040 80b4 	bne.w	8006120 <_strtod_l+0x1b8>
 8005fb8:	7873      	ldrb	r3, [r6, #1]
 8005fba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fbe:	2b58      	cmp	r3, #88	; 0x58
 8005fc0:	d16c      	bne.n	800609c <_strtod_l+0x134>
 8005fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	ab1e      	add	r3, sp, #120	; 0x78
 8005fc8:	9702      	str	r7, [sp, #8]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4a8f      	ldr	r2, [pc, #572]	; (800620c <_strtod_l+0x2a4>)
 8005fce:	ab1f      	add	r3, sp, #124	; 0x7c
 8005fd0:	a91d      	add	r1, sp, #116	; 0x74
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f001 fe34 	bl	8007c40 <__gethex>
 8005fd8:	f010 0707 	ands.w	r7, r0, #7
 8005fdc:	4605      	mov	r5, r0
 8005fde:	d005      	beq.n	8005fec <_strtod_l+0x84>
 8005fe0:	2f06      	cmp	r7, #6
 8005fe2:	d12a      	bne.n	800603a <_strtod_l+0xd2>
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	961d      	str	r6, [sp, #116]	; 0x74
 8005fea:	930e      	str	r3, [sp, #56]	; 0x38
 8005fec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f040 8596 	bne.w	8006b20 <_strtod_l+0xbb8>
 8005ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff6:	b1db      	cbz	r3, 8006030 <_strtod_l+0xc8>
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ffe:	ec43 2b10 	vmov	d0, r2, r3
 8006002:	b023      	add	sp, #140	; 0x8c
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	2a20      	cmp	r2, #32
 800600a:	d1ce      	bne.n	8005faa <_strtod_l+0x42>
 800600c:	3301      	adds	r3, #1
 800600e:	931d      	str	r3, [sp, #116]	; 0x74
 8006010:	e7c0      	b.n	8005f94 <_strtod_l+0x2c>
 8006012:	2a2d      	cmp	r2, #45	; 0x2d
 8006014:	d1c9      	bne.n	8005faa <_strtod_l+0x42>
 8006016:	2201      	movs	r2, #1
 8006018:	920e      	str	r2, [sp, #56]	; 0x38
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	921d      	str	r2, [sp, #116]	; 0x74
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1c4      	bne.n	8005fae <_strtod_l+0x46>
 8006024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006026:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 8576 	bne.w	8006b1c <_strtod_l+0xbb4>
 8006030:	4652      	mov	r2, sl
 8006032:	465b      	mov	r3, fp
 8006034:	e7e3      	b.n	8005ffe <_strtod_l+0x96>
 8006036:	2200      	movs	r2, #0
 8006038:	e7ee      	b.n	8006018 <_strtod_l+0xb0>
 800603a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800603c:	b13a      	cbz	r2, 800604e <_strtod_l+0xe6>
 800603e:	2135      	movs	r1, #53	; 0x35
 8006040:	a820      	add	r0, sp, #128	; 0x80
 8006042:	f002 fdac 	bl	8008b9e <__copybits>
 8006046:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006048:	4620      	mov	r0, r4
 800604a:	f002 f971 	bl	8008330 <_Bfree>
 800604e:	3f01      	subs	r7, #1
 8006050:	2f05      	cmp	r7, #5
 8006052:	d807      	bhi.n	8006064 <_strtod_l+0xfc>
 8006054:	e8df f007 	tbb	[pc, r7]
 8006058:	1d180b0e 	.word	0x1d180b0e
 800605c:	030e      	.short	0x030e
 800605e:	f04f 0b00 	mov.w	fp, #0
 8006062:	46da      	mov	sl, fp
 8006064:	0728      	lsls	r0, r5, #28
 8006066:	d5c1      	bpl.n	8005fec <_strtod_l+0x84>
 8006068:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800606c:	e7be      	b.n	8005fec <_strtod_l+0x84>
 800606e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006072:	e7f7      	b.n	8006064 <_strtod_l+0xfc>
 8006074:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006078:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800607a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800607e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006082:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006086:	e7ed      	b.n	8006064 <_strtod_l+0xfc>
 8006088:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006210 <_strtod_l+0x2a8>
 800608c:	f04f 0a00 	mov.w	sl, #0
 8006090:	e7e8      	b.n	8006064 <_strtod_l+0xfc>
 8006092:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006096:	f04f 3aff 	mov.w	sl, #4294967295
 800609a:	e7e3      	b.n	8006064 <_strtod_l+0xfc>
 800609c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	921d      	str	r2, [sp, #116]	; 0x74
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d0f9      	beq.n	800609c <_strtod_l+0x134>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d09f      	beq.n	8005fec <_strtod_l+0x84>
 80060ac:	2301      	movs	r3, #1
 80060ae:	f04f 0900 	mov.w	r9, #0
 80060b2:	9304      	str	r3, [sp, #16]
 80060b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060b6:	930a      	str	r3, [sp, #40]	; 0x28
 80060b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80060bc:	464f      	mov	r7, r9
 80060be:	220a      	movs	r2, #10
 80060c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80060c2:	7806      	ldrb	r6, [r0, #0]
 80060c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80060c8:	b2d9      	uxtb	r1, r3
 80060ca:	2909      	cmp	r1, #9
 80060cc:	d92a      	bls.n	8006124 <_strtod_l+0x1bc>
 80060ce:	9907      	ldr	r1, [sp, #28]
 80060d0:	462a      	mov	r2, r5
 80060d2:	f7ff ff19 	bl	8005f08 <strncmp>
 80060d6:	b398      	cbz	r0, 8006140 <_strtod_l+0x1d8>
 80060d8:	2000      	movs	r0, #0
 80060da:	4633      	mov	r3, r6
 80060dc:	463d      	mov	r5, r7
 80060de:	9007      	str	r0, [sp, #28]
 80060e0:	4602      	mov	r2, r0
 80060e2:	2b65      	cmp	r3, #101	; 0x65
 80060e4:	d001      	beq.n	80060ea <_strtod_l+0x182>
 80060e6:	2b45      	cmp	r3, #69	; 0x45
 80060e8:	d118      	bne.n	800611c <_strtod_l+0x1b4>
 80060ea:	b91d      	cbnz	r5, 80060f4 <_strtod_l+0x18c>
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	4303      	orrs	r3, r0
 80060f0:	d098      	beq.n	8006024 <_strtod_l+0xbc>
 80060f2:	2500      	movs	r5, #0
 80060f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80060f8:	f108 0301 	add.w	r3, r8, #1
 80060fc:	931d      	str	r3, [sp, #116]	; 0x74
 80060fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006102:	2b2b      	cmp	r3, #43	; 0x2b
 8006104:	d075      	beq.n	80061f2 <_strtod_l+0x28a>
 8006106:	2b2d      	cmp	r3, #45	; 0x2d
 8006108:	d07b      	beq.n	8006202 <_strtod_l+0x29a>
 800610a:	f04f 0c00 	mov.w	ip, #0
 800610e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006112:	2909      	cmp	r1, #9
 8006114:	f240 8082 	bls.w	800621c <_strtod_l+0x2b4>
 8006118:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800611c:	2600      	movs	r6, #0
 800611e:	e09d      	b.n	800625c <_strtod_l+0x2f4>
 8006120:	2300      	movs	r3, #0
 8006122:	e7c4      	b.n	80060ae <_strtod_l+0x146>
 8006124:	2f08      	cmp	r7, #8
 8006126:	bfd8      	it	le
 8006128:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800612a:	f100 0001 	add.w	r0, r0, #1
 800612e:	bfda      	itte	le
 8006130:	fb02 3301 	mlale	r3, r2, r1, r3
 8006134:	9309      	strle	r3, [sp, #36]	; 0x24
 8006136:	fb02 3909 	mlagt	r9, r2, r9, r3
 800613a:	3701      	adds	r7, #1
 800613c:	901d      	str	r0, [sp, #116]	; 0x74
 800613e:	e7bf      	b.n	80060c0 <_strtod_l+0x158>
 8006140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006142:	195a      	adds	r2, r3, r5
 8006144:	921d      	str	r2, [sp, #116]	; 0x74
 8006146:	5d5b      	ldrb	r3, [r3, r5]
 8006148:	2f00      	cmp	r7, #0
 800614a:	d037      	beq.n	80061bc <_strtod_l+0x254>
 800614c:	9007      	str	r0, [sp, #28]
 800614e:	463d      	mov	r5, r7
 8006150:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006154:	2a09      	cmp	r2, #9
 8006156:	d912      	bls.n	800617e <_strtod_l+0x216>
 8006158:	2201      	movs	r2, #1
 800615a:	e7c2      	b.n	80060e2 <_strtod_l+0x17a>
 800615c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	921d      	str	r2, [sp, #116]	; 0x74
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	3001      	adds	r0, #1
 8006166:	2b30      	cmp	r3, #48	; 0x30
 8006168:	d0f8      	beq.n	800615c <_strtod_l+0x1f4>
 800616a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800616e:	2a08      	cmp	r2, #8
 8006170:	f200 84db 	bhi.w	8006b2a <_strtod_l+0xbc2>
 8006174:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006176:	9007      	str	r0, [sp, #28]
 8006178:	2000      	movs	r0, #0
 800617a:	920a      	str	r2, [sp, #40]	; 0x28
 800617c:	4605      	mov	r5, r0
 800617e:	3b30      	subs	r3, #48	; 0x30
 8006180:	f100 0201 	add.w	r2, r0, #1
 8006184:	d014      	beq.n	80061b0 <_strtod_l+0x248>
 8006186:	9907      	ldr	r1, [sp, #28]
 8006188:	4411      	add	r1, r2
 800618a:	9107      	str	r1, [sp, #28]
 800618c:	462a      	mov	r2, r5
 800618e:	eb00 0e05 	add.w	lr, r0, r5
 8006192:	210a      	movs	r1, #10
 8006194:	4572      	cmp	r2, lr
 8006196:	d113      	bne.n	80061c0 <_strtod_l+0x258>
 8006198:	182a      	adds	r2, r5, r0
 800619a:	2a08      	cmp	r2, #8
 800619c:	f105 0501 	add.w	r5, r5, #1
 80061a0:	4405      	add	r5, r0
 80061a2:	dc1c      	bgt.n	80061de <_strtod_l+0x276>
 80061a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a6:	220a      	movs	r2, #10
 80061a8:	fb02 3301 	mla	r3, r2, r1, r3
 80061ac:	9309      	str	r3, [sp, #36]	; 0x24
 80061ae:	2200      	movs	r2, #0
 80061b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061b2:	1c59      	adds	r1, r3, #1
 80061b4:	911d      	str	r1, [sp, #116]	; 0x74
 80061b6:	785b      	ldrb	r3, [r3, #1]
 80061b8:	4610      	mov	r0, r2
 80061ba:	e7c9      	b.n	8006150 <_strtod_l+0x1e8>
 80061bc:	4638      	mov	r0, r7
 80061be:	e7d2      	b.n	8006166 <_strtod_l+0x1fe>
 80061c0:	2a08      	cmp	r2, #8
 80061c2:	dc04      	bgt.n	80061ce <_strtod_l+0x266>
 80061c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80061c6:	434e      	muls	r6, r1
 80061c8:	9609      	str	r6, [sp, #36]	; 0x24
 80061ca:	3201      	adds	r2, #1
 80061cc:	e7e2      	b.n	8006194 <_strtod_l+0x22c>
 80061ce:	f102 0c01 	add.w	ip, r2, #1
 80061d2:	f1bc 0f10 	cmp.w	ip, #16
 80061d6:	bfd8      	it	le
 80061d8:	fb01 f909 	mulle.w	r9, r1, r9
 80061dc:	e7f5      	b.n	80061ca <_strtod_l+0x262>
 80061de:	2d10      	cmp	r5, #16
 80061e0:	bfdc      	itt	le
 80061e2:	220a      	movle	r2, #10
 80061e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80061e8:	e7e1      	b.n	80061ae <_strtod_l+0x246>
 80061ea:	2300      	movs	r3, #0
 80061ec:	9307      	str	r3, [sp, #28]
 80061ee:	2201      	movs	r2, #1
 80061f0:	e77c      	b.n	80060ec <_strtod_l+0x184>
 80061f2:	f04f 0c00 	mov.w	ip, #0
 80061f6:	f108 0302 	add.w	r3, r8, #2
 80061fa:	931d      	str	r3, [sp, #116]	; 0x74
 80061fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006200:	e785      	b.n	800610e <_strtod_l+0x1a6>
 8006202:	f04f 0c01 	mov.w	ip, #1
 8006206:	e7f6      	b.n	80061f6 <_strtod_l+0x28e>
 8006208:	08009dc4 	.word	0x08009dc4
 800620c:	08009b10 	.word	0x08009b10
 8006210:	7ff00000 	.word	0x7ff00000
 8006214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	911d      	str	r1, [sp, #116]	; 0x74
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d0f9      	beq.n	8006214 <_strtod_l+0x2ac>
 8006220:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006224:	2908      	cmp	r1, #8
 8006226:	f63f af79 	bhi.w	800611c <_strtod_l+0x1b4>
 800622a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800622e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006230:	9308      	str	r3, [sp, #32]
 8006232:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006234:	1c59      	adds	r1, r3, #1
 8006236:	911d      	str	r1, [sp, #116]	; 0x74
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800623e:	2e09      	cmp	r6, #9
 8006240:	d937      	bls.n	80062b2 <_strtod_l+0x34a>
 8006242:	9e08      	ldr	r6, [sp, #32]
 8006244:	1b89      	subs	r1, r1, r6
 8006246:	2908      	cmp	r1, #8
 8006248:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800624c:	dc02      	bgt.n	8006254 <_strtod_l+0x2ec>
 800624e:	4576      	cmp	r6, lr
 8006250:	bfa8      	it	ge
 8006252:	4676      	movge	r6, lr
 8006254:	f1bc 0f00 	cmp.w	ip, #0
 8006258:	d000      	beq.n	800625c <_strtod_l+0x2f4>
 800625a:	4276      	negs	r6, r6
 800625c:	2d00      	cmp	r5, #0
 800625e:	d14f      	bne.n	8006300 <_strtod_l+0x398>
 8006260:	9904      	ldr	r1, [sp, #16]
 8006262:	4301      	orrs	r1, r0
 8006264:	f47f aec2 	bne.w	8005fec <_strtod_l+0x84>
 8006268:	2a00      	cmp	r2, #0
 800626a:	f47f aedb 	bne.w	8006024 <_strtod_l+0xbc>
 800626e:	2b69      	cmp	r3, #105	; 0x69
 8006270:	d027      	beq.n	80062c2 <_strtod_l+0x35a>
 8006272:	dc24      	bgt.n	80062be <_strtod_l+0x356>
 8006274:	2b49      	cmp	r3, #73	; 0x49
 8006276:	d024      	beq.n	80062c2 <_strtod_l+0x35a>
 8006278:	2b4e      	cmp	r3, #78	; 0x4e
 800627a:	f47f aed3 	bne.w	8006024 <_strtod_l+0xbc>
 800627e:	499e      	ldr	r1, [pc, #632]	; (80064f8 <_strtod_l+0x590>)
 8006280:	a81d      	add	r0, sp, #116	; 0x74
 8006282:	f001 ff35 	bl	80080f0 <__match>
 8006286:	2800      	cmp	r0, #0
 8006288:	f43f aecc 	beq.w	8006024 <_strtod_l+0xbc>
 800628c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b28      	cmp	r3, #40	; 0x28
 8006292:	d12d      	bne.n	80062f0 <_strtod_l+0x388>
 8006294:	4999      	ldr	r1, [pc, #612]	; (80064fc <_strtod_l+0x594>)
 8006296:	aa20      	add	r2, sp, #128	; 0x80
 8006298:	a81d      	add	r0, sp, #116	; 0x74
 800629a:	f001 ff3d 	bl	8008118 <__hexnan>
 800629e:	2805      	cmp	r0, #5
 80062a0:	d126      	bne.n	80062f0 <_strtod_l+0x388>
 80062a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80062a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80062ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80062b0:	e69c      	b.n	8005fec <_strtod_l+0x84>
 80062b2:	210a      	movs	r1, #10
 80062b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80062b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80062bc:	e7b9      	b.n	8006232 <_strtod_l+0x2ca>
 80062be:	2b6e      	cmp	r3, #110	; 0x6e
 80062c0:	e7db      	b.n	800627a <_strtod_l+0x312>
 80062c2:	498f      	ldr	r1, [pc, #572]	; (8006500 <_strtod_l+0x598>)
 80062c4:	a81d      	add	r0, sp, #116	; 0x74
 80062c6:	f001 ff13 	bl	80080f0 <__match>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f43f aeaa 	beq.w	8006024 <_strtod_l+0xbc>
 80062d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062d2:	498c      	ldr	r1, [pc, #560]	; (8006504 <_strtod_l+0x59c>)
 80062d4:	3b01      	subs	r3, #1
 80062d6:	a81d      	add	r0, sp, #116	; 0x74
 80062d8:	931d      	str	r3, [sp, #116]	; 0x74
 80062da:	f001 ff09 	bl	80080f0 <__match>
 80062de:	b910      	cbnz	r0, 80062e6 <_strtod_l+0x37e>
 80062e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062e2:	3301      	adds	r3, #1
 80062e4:	931d      	str	r3, [sp, #116]	; 0x74
 80062e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006514 <_strtod_l+0x5ac>
 80062ea:	f04f 0a00 	mov.w	sl, #0
 80062ee:	e67d      	b.n	8005fec <_strtod_l+0x84>
 80062f0:	4885      	ldr	r0, [pc, #532]	; (8006508 <_strtod_l+0x5a0>)
 80062f2:	f003 f809 	bl	8009308 <nan>
 80062f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80062fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80062fe:	e675      	b.n	8005fec <_strtod_l+0x84>
 8006300:	9b07      	ldr	r3, [sp, #28]
 8006302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006304:	1af3      	subs	r3, r6, r3
 8006306:	2f00      	cmp	r7, #0
 8006308:	bf08      	it	eq
 800630a:	462f      	moveq	r7, r5
 800630c:	2d10      	cmp	r5, #16
 800630e:	9308      	str	r3, [sp, #32]
 8006310:	46a8      	mov	r8, r5
 8006312:	bfa8      	it	ge
 8006314:	f04f 0810 	movge.w	r8, #16
 8006318:	f7fa f914 	bl	8000544 <__aeabi_ui2d>
 800631c:	2d09      	cmp	r5, #9
 800631e:	4682      	mov	sl, r0
 8006320:	468b      	mov	fp, r1
 8006322:	dd13      	ble.n	800634c <_strtod_l+0x3e4>
 8006324:	4b79      	ldr	r3, [pc, #484]	; (800650c <_strtod_l+0x5a4>)
 8006326:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800632a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800632e:	f7fa f983 	bl	8000638 <__aeabi_dmul>
 8006332:	4682      	mov	sl, r0
 8006334:	4648      	mov	r0, r9
 8006336:	468b      	mov	fp, r1
 8006338:	f7fa f904 	bl	8000544 <__aeabi_ui2d>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4650      	mov	r0, sl
 8006342:	4659      	mov	r1, fp
 8006344:	f7f9 ffc2 	bl	80002cc <__adddf3>
 8006348:	4682      	mov	sl, r0
 800634a:	468b      	mov	fp, r1
 800634c:	2d0f      	cmp	r5, #15
 800634e:	dc38      	bgt.n	80063c2 <_strtod_l+0x45a>
 8006350:	9b08      	ldr	r3, [sp, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f43f ae4a 	beq.w	8005fec <_strtod_l+0x84>
 8006358:	dd24      	ble.n	80063a4 <_strtod_l+0x43c>
 800635a:	2b16      	cmp	r3, #22
 800635c:	dc0b      	bgt.n	8006376 <_strtod_l+0x40e>
 800635e:	4d6b      	ldr	r5, [pc, #428]	; (800650c <_strtod_l+0x5a4>)
 8006360:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006364:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006368:	4652      	mov	r2, sl
 800636a:	465b      	mov	r3, fp
 800636c:	f7fa f964 	bl	8000638 <__aeabi_dmul>
 8006370:	4682      	mov	sl, r0
 8006372:	468b      	mov	fp, r1
 8006374:	e63a      	b.n	8005fec <_strtod_l+0x84>
 8006376:	9a08      	ldr	r2, [sp, #32]
 8006378:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800637c:	4293      	cmp	r3, r2
 800637e:	db20      	blt.n	80063c2 <_strtod_l+0x45a>
 8006380:	4c62      	ldr	r4, [pc, #392]	; (800650c <_strtod_l+0x5a4>)
 8006382:	f1c5 050f 	rsb	r5, r5, #15
 8006386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800638a:	4652      	mov	r2, sl
 800638c:	465b      	mov	r3, fp
 800638e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006392:	f7fa f951 	bl	8000638 <__aeabi_dmul>
 8006396:	9b08      	ldr	r3, [sp, #32]
 8006398:	1b5d      	subs	r5, r3, r5
 800639a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800639e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063a2:	e7e3      	b.n	800636c <_strtod_l+0x404>
 80063a4:	9b08      	ldr	r3, [sp, #32]
 80063a6:	3316      	adds	r3, #22
 80063a8:	db0b      	blt.n	80063c2 <_strtod_l+0x45a>
 80063aa:	9b07      	ldr	r3, [sp, #28]
 80063ac:	4a57      	ldr	r2, [pc, #348]	; (800650c <_strtod_l+0x5a4>)
 80063ae:	1b9e      	subs	r6, r3, r6
 80063b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80063b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063b8:	4650      	mov	r0, sl
 80063ba:	4659      	mov	r1, fp
 80063bc:	f7fa fa66 	bl	800088c <__aeabi_ddiv>
 80063c0:	e7d6      	b.n	8006370 <_strtod_l+0x408>
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	eba5 0808 	sub.w	r8, r5, r8
 80063c8:	4498      	add	r8, r3
 80063ca:	f1b8 0f00 	cmp.w	r8, #0
 80063ce:	dd71      	ble.n	80064b4 <_strtod_l+0x54c>
 80063d0:	f018 030f 	ands.w	r3, r8, #15
 80063d4:	d00a      	beq.n	80063ec <_strtod_l+0x484>
 80063d6:	494d      	ldr	r1, [pc, #308]	; (800650c <_strtod_l+0x5a4>)
 80063d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063dc:	4652      	mov	r2, sl
 80063de:	465b      	mov	r3, fp
 80063e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e4:	f7fa f928 	bl	8000638 <__aeabi_dmul>
 80063e8:	4682      	mov	sl, r0
 80063ea:	468b      	mov	fp, r1
 80063ec:	f038 080f 	bics.w	r8, r8, #15
 80063f0:	d04d      	beq.n	800648e <_strtod_l+0x526>
 80063f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80063f6:	dd22      	ble.n	800643e <_strtod_l+0x4d6>
 80063f8:	2500      	movs	r5, #0
 80063fa:	462e      	mov	r6, r5
 80063fc:	9509      	str	r5, [sp, #36]	; 0x24
 80063fe:	9507      	str	r5, [sp, #28]
 8006400:	2322      	movs	r3, #34	; 0x22
 8006402:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006514 <_strtod_l+0x5ac>
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f04f 0a00 	mov.w	sl, #0
 800640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	f43f adec 	beq.w	8005fec <_strtod_l+0x84>
 8006414:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006416:	4620      	mov	r0, r4
 8006418:	f001 ff8a 	bl	8008330 <_Bfree>
 800641c:	9907      	ldr	r1, [sp, #28]
 800641e:	4620      	mov	r0, r4
 8006420:	f001 ff86 	bl	8008330 <_Bfree>
 8006424:	4631      	mov	r1, r6
 8006426:	4620      	mov	r0, r4
 8006428:	f001 ff82 	bl	8008330 <_Bfree>
 800642c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800642e:	4620      	mov	r0, r4
 8006430:	f001 ff7e 	bl	8008330 <_Bfree>
 8006434:	4629      	mov	r1, r5
 8006436:	4620      	mov	r0, r4
 8006438:	f001 ff7a 	bl	8008330 <_Bfree>
 800643c:	e5d6      	b.n	8005fec <_strtod_l+0x84>
 800643e:	2300      	movs	r3, #0
 8006440:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006444:	4650      	mov	r0, sl
 8006446:	4659      	mov	r1, fp
 8006448:	4699      	mov	r9, r3
 800644a:	f1b8 0f01 	cmp.w	r8, #1
 800644e:	dc21      	bgt.n	8006494 <_strtod_l+0x52c>
 8006450:	b10b      	cbz	r3, 8006456 <_strtod_l+0x4ee>
 8006452:	4682      	mov	sl, r0
 8006454:	468b      	mov	fp, r1
 8006456:	4b2e      	ldr	r3, [pc, #184]	; (8006510 <_strtod_l+0x5a8>)
 8006458:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800645c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006460:	4652      	mov	r2, sl
 8006462:	465b      	mov	r3, fp
 8006464:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006468:	f7fa f8e6 	bl	8000638 <__aeabi_dmul>
 800646c:	4b29      	ldr	r3, [pc, #164]	; (8006514 <_strtod_l+0x5ac>)
 800646e:	460a      	mov	r2, r1
 8006470:	400b      	ands	r3, r1
 8006472:	4929      	ldr	r1, [pc, #164]	; (8006518 <_strtod_l+0x5b0>)
 8006474:	428b      	cmp	r3, r1
 8006476:	4682      	mov	sl, r0
 8006478:	d8be      	bhi.n	80063f8 <_strtod_l+0x490>
 800647a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800647e:	428b      	cmp	r3, r1
 8006480:	bf86      	itte	hi
 8006482:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800651c <_strtod_l+0x5b4>
 8006486:	f04f 3aff 	movhi.w	sl, #4294967295
 800648a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800648e:	2300      	movs	r3, #0
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	e081      	b.n	8006598 <_strtod_l+0x630>
 8006494:	f018 0f01 	tst.w	r8, #1
 8006498:	d007      	beq.n	80064aa <_strtod_l+0x542>
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <_strtod_l+0x5a8>)
 800649c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f8c8 	bl	8000638 <__aeabi_dmul>
 80064a8:	2301      	movs	r3, #1
 80064aa:	f109 0901 	add.w	r9, r9, #1
 80064ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064b2:	e7ca      	b.n	800644a <_strtod_l+0x4e2>
 80064b4:	d0eb      	beq.n	800648e <_strtod_l+0x526>
 80064b6:	f1c8 0800 	rsb	r8, r8, #0
 80064ba:	f018 020f 	ands.w	r2, r8, #15
 80064be:	d00a      	beq.n	80064d6 <_strtod_l+0x56e>
 80064c0:	4b12      	ldr	r3, [pc, #72]	; (800650c <_strtod_l+0x5a4>)
 80064c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c6:	4650      	mov	r0, sl
 80064c8:	4659      	mov	r1, fp
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7fa f9dd 	bl	800088c <__aeabi_ddiv>
 80064d2:	4682      	mov	sl, r0
 80064d4:	468b      	mov	fp, r1
 80064d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80064da:	d0d8      	beq.n	800648e <_strtod_l+0x526>
 80064dc:	f1b8 0f1f 	cmp.w	r8, #31
 80064e0:	dd1e      	ble.n	8006520 <_strtod_l+0x5b8>
 80064e2:	2500      	movs	r5, #0
 80064e4:	462e      	mov	r6, r5
 80064e6:	9509      	str	r5, [sp, #36]	; 0x24
 80064e8:	9507      	str	r5, [sp, #28]
 80064ea:	2322      	movs	r3, #34	; 0x22
 80064ec:	f04f 0a00 	mov.w	sl, #0
 80064f0:	f04f 0b00 	mov.w	fp, #0
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	e789      	b.n	800640c <_strtod_l+0x4a4>
 80064f8:	08009ae1 	.word	0x08009ae1
 80064fc:	08009b24 	.word	0x08009b24
 8006500:	08009ad9 	.word	0x08009ad9
 8006504:	08009c64 	.word	0x08009c64
 8006508:	08009f80 	.word	0x08009f80
 800650c:	08009e60 	.word	0x08009e60
 8006510:	08009e38 	.word	0x08009e38
 8006514:	7ff00000 	.word	0x7ff00000
 8006518:	7ca00000 	.word	0x7ca00000
 800651c:	7fefffff 	.word	0x7fefffff
 8006520:	f018 0310 	ands.w	r3, r8, #16
 8006524:	bf18      	it	ne
 8006526:	236a      	movne	r3, #106	; 0x6a
 8006528:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80068e0 <_strtod_l+0x978>
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	4650      	mov	r0, sl
 8006530:	4659      	mov	r1, fp
 8006532:	2300      	movs	r3, #0
 8006534:	f018 0f01 	tst.w	r8, #1
 8006538:	d004      	beq.n	8006544 <_strtod_l+0x5dc>
 800653a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800653e:	f7fa f87b 	bl	8000638 <__aeabi_dmul>
 8006542:	2301      	movs	r3, #1
 8006544:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006548:	f109 0908 	add.w	r9, r9, #8
 800654c:	d1f2      	bne.n	8006534 <_strtod_l+0x5cc>
 800654e:	b10b      	cbz	r3, 8006554 <_strtod_l+0x5ec>
 8006550:	4682      	mov	sl, r0
 8006552:	468b      	mov	fp, r1
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	b1bb      	cbz	r3, 8006588 <_strtod_l+0x620>
 8006558:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800655c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006560:	2b00      	cmp	r3, #0
 8006562:	4659      	mov	r1, fp
 8006564:	dd10      	ble.n	8006588 <_strtod_l+0x620>
 8006566:	2b1f      	cmp	r3, #31
 8006568:	f340 8128 	ble.w	80067bc <_strtod_l+0x854>
 800656c:	2b34      	cmp	r3, #52	; 0x34
 800656e:	bfde      	ittt	le
 8006570:	3b20      	suble	r3, #32
 8006572:	f04f 32ff 	movle.w	r2, #4294967295
 8006576:	fa02 f303 	lslle.w	r3, r2, r3
 800657a:	f04f 0a00 	mov.w	sl, #0
 800657e:	bfcc      	ite	gt
 8006580:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006584:	ea03 0b01 	andle.w	fp, r3, r1
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	4650      	mov	r0, sl
 800658e:	4659      	mov	r1, fp
 8006590:	f7fa faba 	bl	8000b08 <__aeabi_dcmpeq>
 8006594:	2800      	cmp	r0, #0
 8006596:	d1a4      	bne.n	80064e2 <_strtod_l+0x57a>
 8006598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800659e:	462b      	mov	r3, r5
 80065a0:	463a      	mov	r2, r7
 80065a2:	4620      	mov	r0, r4
 80065a4:	f001 ff30 	bl	8008408 <__s2b>
 80065a8:	9009      	str	r0, [sp, #36]	; 0x24
 80065aa:	2800      	cmp	r0, #0
 80065ac:	f43f af24 	beq.w	80063f8 <_strtod_l+0x490>
 80065b0:	9b07      	ldr	r3, [sp, #28]
 80065b2:	1b9e      	subs	r6, r3, r6
 80065b4:	9b08      	ldr	r3, [sp, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfb4      	ite	lt
 80065ba:	4633      	movlt	r3, r6
 80065bc:	2300      	movge	r3, #0
 80065be:	9310      	str	r3, [sp, #64]	; 0x40
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	2500      	movs	r5, #0
 80065c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80065c8:	9318      	str	r3, [sp, #96]	; 0x60
 80065ca:	462e      	mov	r6, r5
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	4620      	mov	r0, r4
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	f001 fe6d 	bl	80082b0 <_Balloc>
 80065d6:	9007      	str	r0, [sp, #28]
 80065d8:	2800      	cmp	r0, #0
 80065da:	f43f af11 	beq.w	8006400 <_strtod_l+0x498>
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	3202      	adds	r2, #2
 80065e4:	f103 010c 	add.w	r1, r3, #12
 80065e8:	0092      	lsls	r2, r2, #2
 80065ea:	300c      	adds	r0, #12
 80065ec:	f001 fe52 	bl	8008294 <memcpy>
 80065f0:	ec4b ab10 	vmov	d0, sl, fp
 80065f4:	aa20      	add	r2, sp, #128	; 0x80
 80065f6:	a91f      	add	r1, sp, #124	; 0x7c
 80065f8:	4620      	mov	r0, r4
 80065fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80065fe:	f002 fa3f 	bl	8008a80 <__d2b>
 8006602:	901e      	str	r0, [sp, #120]	; 0x78
 8006604:	2800      	cmp	r0, #0
 8006606:	f43f aefb 	beq.w	8006400 <_strtod_l+0x498>
 800660a:	2101      	movs	r1, #1
 800660c:	4620      	mov	r0, r4
 800660e:	f001 ff95 	bl	800853c <__i2b>
 8006612:	4606      	mov	r6, r0
 8006614:	2800      	cmp	r0, #0
 8006616:	f43f aef3 	beq.w	8006400 <_strtod_l+0x498>
 800661a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800661c:	9904      	ldr	r1, [sp, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	bfab      	itete	ge
 8006622:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006624:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006626:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006628:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800662c:	bfac      	ite	ge
 800662e:	eb03 0902 	addge.w	r9, r3, r2
 8006632:	1ad7      	sublt	r7, r2, r3
 8006634:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006636:	eba3 0801 	sub.w	r8, r3, r1
 800663a:	4490      	add	r8, r2
 800663c:	4ba3      	ldr	r3, [pc, #652]	; (80068cc <_strtod_l+0x964>)
 800663e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006642:	4598      	cmp	r8, r3
 8006644:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006648:	f280 80cc 	bge.w	80067e4 <_strtod_l+0x87c>
 800664c:	eba3 0308 	sub.w	r3, r3, r8
 8006650:	2b1f      	cmp	r3, #31
 8006652:	eba2 0203 	sub.w	r2, r2, r3
 8006656:	f04f 0101 	mov.w	r1, #1
 800665a:	f300 80b6 	bgt.w	80067ca <_strtod_l+0x862>
 800665e:	fa01 f303 	lsl.w	r3, r1, r3
 8006662:	9311      	str	r3, [sp, #68]	; 0x44
 8006664:	2300      	movs	r3, #0
 8006666:	930c      	str	r3, [sp, #48]	; 0x30
 8006668:	eb09 0802 	add.w	r8, r9, r2
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	45c1      	cmp	r9, r8
 8006670:	4417      	add	r7, r2
 8006672:	441f      	add	r7, r3
 8006674:	464b      	mov	r3, r9
 8006676:	bfa8      	it	ge
 8006678:	4643      	movge	r3, r8
 800667a:	42bb      	cmp	r3, r7
 800667c:	bfa8      	it	ge
 800667e:	463b      	movge	r3, r7
 8006680:	2b00      	cmp	r3, #0
 8006682:	bfc2      	ittt	gt
 8006684:	eba8 0803 	subgt.w	r8, r8, r3
 8006688:	1aff      	subgt	r7, r7, r3
 800668a:	eba9 0903 	subgt.w	r9, r9, r3
 800668e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	dd17      	ble.n	80066c4 <_strtod_l+0x75c>
 8006694:	4631      	mov	r1, r6
 8006696:	461a      	mov	r2, r3
 8006698:	4620      	mov	r0, r4
 800669a:	f002 f80b 	bl	80086b4 <__pow5mult>
 800669e:	4606      	mov	r6, r0
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f43f aead 	beq.w	8006400 <_strtod_l+0x498>
 80066a6:	4601      	mov	r1, r0
 80066a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066aa:	4620      	mov	r0, r4
 80066ac:	f001 ff5c 	bl	8008568 <__multiply>
 80066b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f43f aea4 	beq.w	8006400 <_strtod_l+0x498>
 80066b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80066ba:	4620      	mov	r0, r4
 80066bc:	f001 fe38 	bl	8008330 <_Bfree>
 80066c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066c2:	931e      	str	r3, [sp, #120]	; 0x78
 80066c4:	f1b8 0f00 	cmp.w	r8, #0
 80066c8:	f300 8091 	bgt.w	80067ee <_strtod_l+0x886>
 80066cc:	9b08      	ldr	r3, [sp, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dd08      	ble.n	80066e4 <_strtod_l+0x77c>
 80066d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066d4:	9907      	ldr	r1, [sp, #28]
 80066d6:	4620      	mov	r0, r4
 80066d8:	f001 ffec 	bl	80086b4 <__pow5mult>
 80066dc:	9007      	str	r0, [sp, #28]
 80066de:	2800      	cmp	r0, #0
 80066e0:	f43f ae8e 	beq.w	8006400 <_strtod_l+0x498>
 80066e4:	2f00      	cmp	r7, #0
 80066e6:	dd08      	ble.n	80066fa <_strtod_l+0x792>
 80066e8:	9907      	ldr	r1, [sp, #28]
 80066ea:	463a      	mov	r2, r7
 80066ec:	4620      	mov	r0, r4
 80066ee:	f002 f83b 	bl	8008768 <__lshift>
 80066f2:	9007      	str	r0, [sp, #28]
 80066f4:	2800      	cmp	r0, #0
 80066f6:	f43f ae83 	beq.w	8006400 <_strtod_l+0x498>
 80066fa:	f1b9 0f00 	cmp.w	r9, #0
 80066fe:	dd08      	ble.n	8006712 <_strtod_l+0x7aa>
 8006700:	4631      	mov	r1, r6
 8006702:	464a      	mov	r2, r9
 8006704:	4620      	mov	r0, r4
 8006706:	f002 f82f 	bl	8008768 <__lshift>
 800670a:	4606      	mov	r6, r0
 800670c:	2800      	cmp	r0, #0
 800670e:	f43f ae77 	beq.w	8006400 <_strtod_l+0x498>
 8006712:	9a07      	ldr	r2, [sp, #28]
 8006714:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006716:	4620      	mov	r0, r4
 8006718:	f002 f8ae 	bl	8008878 <__mdiff>
 800671c:	4605      	mov	r5, r0
 800671e:	2800      	cmp	r0, #0
 8006720:	f43f ae6e 	beq.w	8006400 <_strtod_l+0x498>
 8006724:	68c3      	ldr	r3, [r0, #12]
 8006726:	930f      	str	r3, [sp, #60]	; 0x3c
 8006728:	2300      	movs	r3, #0
 800672a:	60c3      	str	r3, [r0, #12]
 800672c:	4631      	mov	r1, r6
 800672e:	f002 f887 	bl	8008840 <__mcmp>
 8006732:	2800      	cmp	r0, #0
 8006734:	da65      	bge.n	8006802 <_strtod_l+0x89a>
 8006736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006738:	ea53 030a 	orrs.w	r3, r3, sl
 800673c:	f040 8087 	bne.w	800684e <_strtod_l+0x8e6>
 8006740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 8082 	bne.w	800684e <_strtod_l+0x8e6>
 800674a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800674e:	0d1b      	lsrs	r3, r3, #20
 8006750:	051b      	lsls	r3, r3, #20
 8006752:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006756:	d97a      	bls.n	800684e <_strtod_l+0x8e6>
 8006758:	696b      	ldr	r3, [r5, #20]
 800675a:	b913      	cbnz	r3, 8006762 <_strtod_l+0x7fa>
 800675c:	692b      	ldr	r3, [r5, #16]
 800675e:	2b01      	cmp	r3, #1
 8006760:	dd75      	ble.n	800684e <_strtod_l+0x8e6>
 8006762:	4629      	mov	r1, r5
 8006764:	2201      	movs	r2, #1
 8006766:	4620      	mov	r0, r4
 8006768:	f001 fffe 	bl	8008768 <__lshift>
 800676c:	4631      	mov	r1, r6
 800676e:	4605      	mov	r5, r0
 8006770:	f002 f866 	bl	8008840 <__mcmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	dd6a      	ble.n	800684e <_strtod_l+0x8e6>
 8006778:	9904      	ldr	r1, [sp, #16]
 800677a:	4a55      	ldr	r2, [pc, #340]	; (80068d0 <_strtod_l+0x968>)
 800677c:	465b      	mov	r3, fp
 800677e:	2900      	cmp	r1, #0
 8006780:	f000 8085 	beq.w	800688e <_strtod_l+0x926>
 8006784:	ea02 010b 	and.w	r1, r2, fp
 8006788:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800678c:	dc7f      	bgt.n	800688e <_strtod_l+0x926>
 800678e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006792:	f77f aeaa 	ble.w	80064ea <_strtod_l+0x582>
 8006796:	4a4f      	ldr	r2, [pc, #316]	; (80068d4 <_strtod_l+0x96c>)
 8006798:	2300      	movs	r3, #0
 800679a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800679e:	4650      	mov	r0, sl
 80067a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80067a4:	4659      	mov	r1, fp
 80067a6:	f7f9 ff47 	bl	8000638 <__aeabi_dmul>
 80067aa:	460b      	mov	r3, r1
 80067ac:	4303      	orrs	r3, r0
 80067ae:	bf08      	it	eq
 80067b0:	2322      	moveq	r3, #34	; 0x22
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	bf08      	it	eq
 80067b8:	6023      	streq	r3, [r4, #0]
 80067ba:	e62b      	b.n	8006414 <_strtod_l+0x4ac>
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	ea03 0a0a 	and.w	sl, r3, sl
 80067c8:	e6de      	b.n	8006588 <_strtod_l+0x620>
 80067ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80067ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80067d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80067d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80067da:	fa01 f308 	lsl.w	r3, r1, r8
 80067de:	930c      	str	r3, [sp, #48]	; 0x30
 80067e0:	9111      	str	r1, [sp, #68]	; 0x44
 80067e2:	e741      	b.n	8006668 <_strtod_l+0x700>
 80067e4:	2300      	movs	r3, #0
 80067e6:	930c      	str	r3, [sp, #48]	; 0x30
 80067e8:	2301      	movs	r3, #1
 80067ea:	9311      	str	r3, [sp, #68]	; 0x44
 80067ec:	e73c      	b.n	8006668 <_strtod_l+0x700>
 80067ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80067f0:	4642      	mov	r2, r8
 80067f2:	4620      	mov	r0, r4
 80067f4:	f001 ffb8 	bl	8008768 <__lshift>
 80067f8:	901e      	str	r0, [sp, #120]	; 0x78
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f47f af66 	bne.w	80066cc <_strtod_l+0x764>
 8006800:	e5fe      	b.n	8006400 <_strtod_l+0x498>
 8006802:	465f      	mov	r7, fp
 8006804:	d16e      	bne.n	80068e4 <_strtod_l+0x97c>
 8006806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800680c:	b342      	cbz	r2, 8006860 <_strtod_l+0x8f8>
 800680e:	4a32      	ldr	r2, [pc, #200]	; (80068d8 <_strtod_l+0x970>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d128      	bne.n	8006866 <_strtod_l+0x8fe>
 8006814:	9b04      	ldr	r3, [sp, #16]
 8006816:	4650      	mov	r0, sl
 8006818:	b1eb      	cbz	r3, 8006856 <_strtod_l+0x8ee>
 800681a:	4a2d      	ldr	r2, [pc, #180]	; (80068d0 <_strtod_l+0x968>)
 800681c:	403a      	ands	r2, r7
 800681e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006822:	f04f 31ff 	mov.w	r1, #4294967295
 8006826:	d819      	bhi.n	800685c <_strtod_l+0x8f4>
 8006828:	0d12      	lsrs	r2, r2, #20
 800682a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800682e:	fa01 f303 	lsl.w	r3, r1, r3
 8006832:	4298      	cmp	r0, r3
 8006834:	d117      	bne.n	8006866 <_strtod_l+0x8fe>
 8006836:	4b29      	ldr	r3, [pc, #164]	; (80068dc <_strtod_l+0x974>)
 8006838:	429f      	cmp	r7, r3
 800683a:	d102      	bne.n	8006842 <_strtod_l+0x8da>
 800683c:	3001      	adds	r0, #1
 800683e:	f43f addf 	beq.w	8006400 <_strtod_l+0x498>
 8006842:	4b23      	ldr	r3, [pc, #140]	; (80068d0 <_strtod_l+0x968>)
 8006844:	403b      	ands	r3, r7
 8006846:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1a0      	bne.n	8006796 <_strtod_l+0x82e>
 8006854:	e5de      	b.n	8006414 <_strtod_l+0x4ac>
 8006856:	f04f 33ff 	mov.w	r3, #4294967295
 800685a:	e7ea      	b.n	8006832 <_strtod_l+0x8ca>
 800685c:	460b      	mov	r3, r1
 800685e:	e7e8      	b.n	8006832 <_strtod_l+0x8ca>
 8006860:	ea53 030a 	orrs.w	r3, r3, sl
 8006864:	d088      	beq.n	8006778 <_strtod_l+0x810>
 8006866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006868:	b1db      	cbz	r3, 80068a2 <_strtod_l+0x93a>
 800686a:	423b      	tst	r3, r7
 800686c:	d0ef      	beq.n	800684e <_strtod_l+0x8e6>
 800686e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	4650      	mov	r0, sl
 8006874:	4659      	mov	r1, fp
 8006876:	b1c3      	cbz	r3, 80068aa <_strtod_l+0x942>
 8006878:	f7ff fb58 	bl	8005f2c <sulp>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006884:	f7f9 fd22 	bl	80002cc <__adddf3>
 8006888:	4682      	mov	sl, r0
 800688a:	468b      	mov	fp, r1
 800688c:	e7df      	b.n	800684e <_strtod_l+0x8e6>
 800688e:	4013      	ands	r3, r2
 8006890:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006894:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006898:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800689c:	f04f 3aff 	mov.w	sl, #4294967295
 80068a0:	e7d5      	b.n	800684e <_strtod_l+0x8e6>
 80068a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a4:	ea13 0f0a 	tst.w	r3, sl
 80068a8:	e7e0      	b.n	800686c <_strtod_l+0x904>
 80068aa:	f7ff fb3f 	bl	8005f2c <sulp>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068b6:	f7f9 fd07 	bl	80002c8 <__aeabi_dsub>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4682      	mov	sl, r0
 80068c0:	468b      	mov	fp, r1
 80068c2:	f7fa f921 	bl	8000b08 <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d0c1      	beq.n	800684e <_strtod_l+0x8e6>
 80068ca:	e60e      	b.n	80064ea <_strtod_l+0x582>
 80068cc:	fffffc02 	.word	0xfffffc02
 80068d0:	7ff00000 	.word	0x7ff00000
 80068d4:	39500000 	.word	0x39500000
 80068d8:	000fffff 	.word	0x000fffff
 80068dc:	7fefffff 	.word	0x7fefffff
 80068e0:	08009b38 	.word	0x08009b38
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	f002 f926 	bl	8008b38 <__ratio>
 80068ec:	ec59 8b10 	vmov	r8, r9, d0
 80068f0:	ee10 0a10 	vmov	r0, s0
 80068f4:	2200      	movs	r2, #0
 80068f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068fa:	4649      	mov	r1, r9
 80068fc:	f7fa f918 	bl	8000b30 <__aeabi_dcmple>
 8006900:	2800      	cmp	r0, #0
 8006902:	d07c      	beq.n	80069fe <_strtod_l+0xa96>
 8006904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04c      	beq.n	80069a4 <_strtod_l+0xa3c>
 800690a:	4b95      	ldr	r3, [pc, #596]	; (8006b60 <_strtod_l+0xbf8>)
 800690c:	2200      	movs	r2, #0
 800690e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006912:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006b60 <_strtod_l+0xbf8>
 8006916:	f04f 0800 	mov.w	r8, #0
 800691a:	4b92      	ldr	r3, [pc, #584]	; (8006b64 <_strtod_l+0xbfc>)
 800691c:	403b      	ands	r3, r7
 800691e:	9311      	str	r3, [sp, #68]	; 0x44
 8006920:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006922:	4b91      	ldr	r3, [pc, #580]	; (8006b68 <_strtod_l+0xc00>)
 8006924:	429a      	cmp	r2, r3
 8006926:	f040 80b2 	bne.w	8006a8e <_strtod_l+0xb26>
 800692a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800692e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006932:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006936:	ec4b ab10 	vmov	d0, sl, fp
 800693a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800693e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006942:	f002 f821 	bl	8008988 <__ulp>
 8006946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800694a:	ec53 2b10 	vmov	r2, r3, d0
 800694e:	f7f9 fe73 	bl	8000638 <__aeabi_dmul>
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f7f9 fcb9 	bl	80002cc <__adddf3>
 800695a:	460b      	mov	r3, r1
 800695c:	4981      	ldr	r1, [pc, #516]	; (8006b64 <_strtod_l+0xbfc>)
 800695e:	4a83      	ldr	r2, [pc, #524]	; (8006b6c <_strtod_l+0xc04>)
 8006960:	4019      	ands	r1, r3
 8006962:	4291      	cmp	r1, r2
 8006964:	4682      	mov	sl, r0
 8006966:	d95e      	bls.n	8006a26 <_strtod_l+0xabe>
 8006968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800696e:	4293      	cmp	r3, r2
 8006970:	d103      	bne.n	800697a <_strtod_l+0xa12>
 8006972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006974:	3301      	adds	r3, #1
 8006976:	f43f ad43 	beq.w	8006400 <_strtod_l+0x498>
 800697a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006b78 <_strtod_l+0xc10>
 800697e:	f04f 3aff 	mov.w	sl, #4294967295
 8006982:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006984:	4620      	mov	r0, r4
 8006986:	f001 fcd3 	bl	8008330 <_Bfree>
 800698a:	9907      	ldr	r1, [sp, #28]
 800698c:	4620      	mov	r0, r4
 800698e:	f001 fccf 	bl	8008330 <_Bfree>
 8006992:	4631      	mov	r1, r6
 8006994:	4620      	mov	r0, r4
 8006996:	f001 fccb 	bl	8008330 <_Bfree>
 800699a:	4629      	mov	r1, r5
 800699c:	4620      	mov	r0, r4
 800699e:	f001 fcc7 	bl	8008330 <_Bfree>
 80069a2:	e613      	b.n	80065cc <_strtod_l+0x664>
 80069a4:	f1ba 0f00 	cmp.w	sl, #0
 80069a8:	d11b      	bne.n	80069e2 <_strtod_l+0xa7a>
 80069aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069ae:	b9f3      	cbnz	r3, 80069ee <_strtod_l+0xa86>
 80069b0:	4b6b      	ldr	r3, [pc, #428]	; (8006b60 <_strtod_l+0xbf8>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7fa f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80069bc:	b9d0      	cbnz	r0, 80069f4 <_strtod_l+0xa8c>
 80069be:	4640      	mov	r0, r8
 80069c0:	4649      	mov	r1, r9
 80069c2:	4b6b      	ldr	r3, [pc, #428]	; (8006b70 <_strtod_l+0xc08>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	f7f9 fe37 	bl	8000638 <__aeabi_dmul>
 80069ca:	4680      	mov	r8, r0
 80069cc:	4689      	mov	r9, r1
 80069ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80069d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80069d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80069d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80069dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80069e0:	e79b      	b.n	800691a <_strtod_l+0x9b2>
 80069e2:	f1ba 0f01 	cmp.w	sl, #1
 80069e6:	d102      	bne.n	80069ee <_strtod_l+0xa86>
 80069e8:	2f00      	cmp	r7, #0
 80069ea:	f43f ad7e 	beq.w	80064ea <_strtod_l+0x582>
 80069ee:	4b61      	ldr	r3, [pc, #388]	; (8006b74 <_strtod_l+0xc0c>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	e78c      	b.n	800690e <_strtod_l+0x9a6>
 80069f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b70 <_strtod_l+0xc08>
 80069f8:	f04f 0800 	mov.w	r8, #0
 80069fc:	e7e7      	b.n	80069ce <_strtod_l+0xa66>
 80069fe:	4b5c      	ldr	r3, [pc, #368]	; (8006b70 <_strtod_l+0xc08>)
 8006a00:	4640      	mov	r0, r8
 8006a02:	4649      	mov	r1, r9
 8006a04:	2200      	movs	r2, #0
 8006a06:	f7f9 fe17 	bl	8000638 <__aeabi_dmul>
 8006a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4689      	mov	r9, r1
 8006a10:	b933      	cbnz	r3, 8006a20 <_strtod_l+0xab8>
 8006a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a16:	9012      	str	r0, [sp, #72]	; 0x48
 8006a18:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006a1e:	e7dd      	b.n	80069dc <_strtod_l+0xa74>
 8006a20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006a24:	e7f9      	b.n	8006a1a <_strtod_l+0xab2>
 8006a26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1a8      	bne.n	8006982 <_strtod_l+0xa1a>
 8006a30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a36:	0d1b      	lsrs	r3, r3, #20
 8006a38:	051b      	lsls	r3, r3, #20
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d1a1      	bne.n	8006982 <_strtod_l+0xa1a>
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7fa f959 	bl	8000cf8 <__aeabi_d2lz>
 8006a46:	f7f9 fdc9 	bl	80005dc <__aeabi_l2d>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f7f9 fc39 	bl	80002c8 <__aeabi_dsub>
 8006a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a5c:	ea43 030a 	orr.w	r3, r3, sl
 8006a60:	4313      	orrs	r3, r2
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	d053      	beq.n	8006b10 <_strtod_l+0xba8>
 8006a68:	a335      	add	r3, pc, #212	; (adr r3, 8006b40 <_strtod_l+0xbd8>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7fa f855 	bl	8000b1c <__aeabi_dcmplt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f47f acce 	bne.w	8006414 <_strtod_l+0x4ac>
 8006a78:	a333      	add	r3, pc, #204	; (adr r3, 8006b48 <_strtod_l+0xbe0>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	4640      	mov	r0, r8
 8006a80:	4649      	mov	r1, r9
 8006a82:	f7fa f869 	bl	8000b58 <__aeabi_dcmpgt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f43f af7b 	beq.w	8006982 <_strtod_l+0xa1a>
 8006a8c:	e4c2      	b.n	8006414 <_strtod_l+0x4ac>
 8006a8e:	9b04      	ldr	r3, [sp, #16]
 8006a90:	b333      	cbz	r3, 8006ae0 <_strtod_l+0xb78>
 8006a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a98:	d822      	bhi.n	8006ae0 <_strtod_l+0xb78>
 8006a9a:	a32d      	add	r3, pc, #180	; (adr r3, 8006b50 <_strtod_l+0xbe8>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	f7fa f844 	bl	8000b30 <__aeabi_dcmple>
 8006aa8:	b1a0      	cbz	r0, 8006ad4 <_strtod_l+0xb6c>
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	f7fa f89b 	bl	8000be8 <__aeabi_d2uiz>
 8006ab2:	2801      	cmp	r0, #1
 8006ab4:	bf38      	it	cc
 8006ab6:	2001      	movcc	r0, #1
 8006ab8:	f7f9 fd44 	bl	8000544 <__aeabi_ui2d>
 8006abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006abe:	4680      	mov	r8, r0
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	bb13      	cbnz	r3, 8006b0a <_strtod_l+0xba2>
 8006ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac8:	9014      	str	r0, [sp, #80]	; 0x50
 8006aca:	9315      	str	r3, [sp, #84]	; 0x54
 8006acc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ad0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ad8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	930d      	str	r3, [sp, #52]	; 0x34
 8006ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ae4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006ae8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006aec:	f001 ff4c 	bl	8008988 <__ulp>
 8006af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006af4:	ec53 2b10 	vmov	r2, r3, d0
 8006af8:	f7f9 fd9e 	bl	8000638 <__aeabi_dmul>
 8006afc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b00:	f7f9 fbe4 	bl	80002cc <__adddf3>
 8006b04:	4682      	mov	sl, r0
 8006b06:	468b      	mov	fp, r1
 8006b08:	e78f      	b.n	8006a2a <_strtod_l+0xac2>
 8006b0a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006b0e:	e7dd      	b.n	8006acc <_strtod_l+0xb64>
 8006b10:	a311      	add	r3, pc, #68	; (adr r3, 8006b58 <_strtod_l+0xbf0>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7fa f801 	bl	8000b1c <__aeabi_dcmplt>
 8006b1a:	e7b4      	b.n	8006a86 <_strtod_l+0xb1e>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	f7ff ba65 	b.w	8005ff4 <_strtod_l+0x8c>
 8006b2a:	2b65      	cmp	r3, #101	; 0x65
 8006b2c:	f43f ab5d 	beq.w	80061ea <_strtod_l+0x282>
 8006b30:	2b45      	cmp	r3, #69	; 0x45
 8006b32:	f43f ab5a 	beq.w	80061ea <_strtod_l+0x282>
 8006b36:	2201      	movs	r2, #1
 8006b38:	f7ff bb92 	b.w	8006260 <_strtod_l+0x2f8>
 8006b3c:	f3af 8000 	nop.w
 8006b40:	94a03595 	.word	0x94a03595
 8006b44:	3fdfffff 	.word	0x3fdfffff
 8006b48:	35afe535 	.word	0x35afe535
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	ffc00000 	.word	0xffc00000
 8006b54:	41dfffff 	.word	0x41dfffff
 8006b58:	94a03595 	.word	0x94a03595
 8006b5c:	3fcfffff 	.word	0x3fcfffff
 8006b60:	3ff00000 	.word	0x3ff00000
 8006b64:	7ff00000 	.word	0x7ff00000
 8006b68:	7fe00000 	.word	0x7fe00000
 8006b6c:	7c9fffff 	.word	0x7c9fffff
 8006b70:	3fe00000 	.word	0x3fe00000
 8006b74:	bff00000 	.word	0xbff00000
 8006b78:	7fefffff 	.word	0x7fefffff

08006b7c <_strtod_r>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <_strtod_r+0x8>)
 8006b7e:	f7ff b9f3 	b.w	8005f68 <_strtod_l>
 8006b82:	bf00      	nop
 8006b84:	20000074 	.word	0x20000074

08006b88 <_strtol_l.isra.0>:
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8e:	d001      	beq.n	8006b94 <_strtol_l.isra.0+0xc>
 8006b90:	2b24      	cmp	r3, #36	; 0x24
 8006b92:	d906      	bls.n	8006ba2 <_strtol_l.isra.0+0x1a>
 8006b94:	f7fe face 	bl	8005134 <__errno>
 8006b98:	2316      	movs	r3, #22
 8006b9a:	6003      	str	r3, [r0, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	4f3a      	ldr	r7, [pc, #232]	; (8006c8c <_strtol_l.isra.0+0x104>)
 8006ba4:	468e      	mov	lr, r1
 8006ba6:	4676      	mov	r6, lr
 8006ba8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006bac:	5de5      	ldrb	r5, [r4, r7]
 8006bae:	f015 0508 	ands.w	r5, r5, #8
 8006bb2:	d1f8      	bne.n	8006ba6 <_strtol_l.isra.0+0x1e>
 8006bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8006bb6:	d134      	bne.n	8006c22 <_strtol_l.isra.0+0x9a>
 8006bb8:	f89e 4000 	ldrb.w	r4, [lr]
 8006bbc:	f04f 0801 	mov.w	r8, #1
 8006bc0:	f106 0e02 	add.w	lr, r6, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d05c      	beq.n	8006c82 <_strtol_l.isra.0+0xfa>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d10c      	bne.n	8006be6 <_strtol_l.isra.0+0x5e>
 8006bcc:	2c30      	cmp	r4, #48	; 0x30
 8006bce:	d10a      	bne.n	8006be6 <_strtol_l.isra.0+0x5e>
 8006bd0:	f89e 4000 	ldrb.w	r4, [lr]
 8006bd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006bd8:	2c58      	cmp	r4, #88	; 0x58
 8006bda:	d14d      	bne.n	8006c78 <_strtol_l.isra.0+0xf0>
 8006bdc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006be0:	2310      	movs	r3, #16
 8006be2:	f10e 0e02 	add.w	lr, lr, #2
 8006be6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006bea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006bee:	2600      	movs	r6, #0
 8006bf0:	fbbc f9f3 	udiv	r9, ip, r3
 8006bf4:	4635      	mov	r5, r6
 8006bf6:	fb03 ca19 	mls	sl, r3, r9, ip
 8006bfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006bfe:	2f09      	cmp	r7, #9
 8006c00:	d818      	bhi.n	8006c34 <_strtol_l.isra.0+0xac>
 8006c02:	463c      	mov	r4, r7
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	dd24      	ble.n	8006c52 <_strtol_l.isra.0+0xca>
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	db1f      	blt.n	8006c4c <_strtol_l.isra.0+0xc4>
 8006c0c:	45a9      	cmp	r9, r5
 8006c0e:	d31d      	bcc.n	8006c4c <_strtol_l.isra.0+0xc4>
 8006c10:	d101      	bne.n	8006c16 <_strtol_l.isra.0+0x8e>
 8006c12:	45a2      	cmp	sl, r4
 8006c14:	db1a      	blt.n	8006c4c <_strtol_l.isra.0+0xc4>
 8006c16:	fb05 4503 	mla	r5, r5, r3, r4
 8006c1a:	2601      	movs	r6, #1
 8006c1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006c20:	e7eb      	b.n	8006bfa <_strtol_l.isra.0+0x72>
 8006c22:	2c2b      	cmp	r4, #43	; 0x2b
 8006c24:	bf08      	it	eq
 8006c26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006c2a:	46a8      	mov	r8, r5
 8006c2c:	bf08      	it	eq
 8006c2e:	f106 0e02 	addeq.w	lr, r6, #2
 8006c32:	e7c7      	b.n	8006bc4 <_strtol_l.isra.0+0x3c>
 8006c34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006c38:	2f19      	cmp	r7, #25
 8006c3a:	d801      	bhi.n	8006c40 <_strtol_l.isra.0+0xb8>
 8006c3c:	3c37      	subs	r4, #55	; 0x37
 8006c3e:	e7e1      	b.n	8006c04 <_strtol_l.isra.0+0x7c>
 8006c40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006c44:	2f19      	cmp	r7, #25
 8006c46:	d804      	bhi.n	8006c52 <_strtol_l.isra.0+0xca>
 8006c48:	3c57      	subs	r4, #87	; 0x57
 8006c4a:	e7db      	b.n	8006c04 <_strtol_l.isra.0+0x7c>
 8006c4c:	f04f 36ff 	mov.w	r6, #4294967295
 8006c50:	e7e4      	b.n	8006c1c <_strtol_l.isra.0+0x94>
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	da05      	bge.n	8006c62 <_strtol_l.isra.0+0xda>
 8006c56:	2322      	movs	r3, #34	; 0x22
 8006c58:	6003      	str	r3, [r0, #0]
 8006c5a:	4665      	mov	r5, ip
 8006c5c:	b942      	cbnz	r2, 8006c70 <_strtol_l.isra.0+0xe8>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	e79d      	b.n	8006b9e <_strtol_l.isra.0+0x16>
 8006c62:	f1b8 0f00 	cmp.w	r8, #0
 8006c66:	d000      	beq.n	8006c6a <_strtol_l.isra.0+0xe2>
 8006c68:	426d      	negs	r5, r5
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d0f7      	beq.n	8006c5e <_strtol_l.isra.0+0xd6>
 8006c6e:	b10e      	cbz	r6, 8006c74 <_strtol_l.isra.0+0xec>
 8006c70:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	e7f2      	b.n	8006c5e <_strtol_l.isra.0+0xd6>
 8006c78:	2430      	movs	r4, #48	; 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1b3      	bne.n	8006be6 <_strtol_l.isra.0+0x5e>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	e7b1      	b.n	8006be6 <_strtol_l.isra.0+0x5e>
 8006c82:	2c30      	cmp	r4, #48	; 0x30
 8006c84:	d0a4      	beq.n	8006bd0 <_strtol_l.isra.0+0x48>
 8006c86:	230a      	movs	r3, #10
 8006c88:	e7ad      	b.n	8006be6 <_strtol_l.isra.0+0x5e>
 8006c8a:	bf00      	nop
 8006c8c:	08009b61 	.word	0x08009b61

08006c90 <_strtol_r>:
 8006c90:	f7ff bf7a 	b.w	8006b88 <_strtol_l.isra.0>

08006c94 <quorem>:
 8006c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	6903      	ldr	r3, [r0, #16]
 8006c9a:	690c      	ldr	r4, [r1, #16]
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	f2c0 8081 	blt.w	8006da6 <quorem+0x112>
 8006ca4:	3c01      	subs	r4, #1
 8006ca6:	f101 0814 	add.w	r8, r1, #20
 8006caa:	f100 0514 	add.w	r5, r0, #20
 8006cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ccc:	d331      	bcc.n	8006d32 <quorem+0x9e>
 8006cce:	f04f 0e00 	mov.w	lr, #0
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	46ac      	mov	ip, r5
 8006cd6:	46f2      	mov	sl, lr
 8006cd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cdc:	b293      	uxth	r3, r2
 8006cde:	fb06 e303 	mla	r3, r6, r3, lr
 8006ce2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8006cec:	0c12      	lsrs	r2, r2, #16
 8006cee:	f8dc a000 	ldr.w	sl, [ip]
 8006cf2:	fb06 e202 	mla	r2, r6, r2, lr
 8006cf6:	fa13 f38a 	uxtah	r3, r3, sl
 8006cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cfe:	fa1f fa82 	uxth.w	sl, r2
 8006d02:	f8dc 2000 	ldr.w	r2, [ip]
 8006d06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006d0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d14:	4581      	cmp	r9, r0
 8006d16:	f84c 3b04 	str.w	r3, [ip], #4
 8006d1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d1e:	d2db      	bcs.n	8006cd8 <quorem+0x44>
 8006d20:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d24:	b92b      	cbnz	r3, 8006d32 <quorem+0x9e>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	d32e      	bcc.n	8006d8e <quorem+0xfa>
 8006d30:	613c      	str	r4, [r7, #16]
 8006d32:	4638      	mov	r0, r7
 8006d34:	f001 fd84 	bl	8008840 <__mcmp>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	db24      	blt.n	8006d86 <quorem+0xf2>
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f04f 0c00 	mov.w	ip, #0
 8006d44:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d48:	f8d0 e000 	ldr.w	lr, [r0]
 8006d4c:	b293      	uxth	r3, r2
 8006d4e:	ebac 0303 	sub.w	r3, ip, r3
 8006d52:	0c12      	lsrs	r2, r2, #16
 8006d54:	fa13 f38e 	uxtah	r3, r3, lr
 8006d58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d66:	45c1      	cmp	r9, r8
 8006d68:	f840 3b04 	str.w	r3, [r0], #4
 8006d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d70:	d2e8      	bcs.n	8006d44 <quorem+0xb0>
 8006d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d7a:	b922      	cbnz	r2, 8006d86 <quorem+0xf2>
 8006d7c:	3b04      	subs	r3, #4
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	d30a      	bcc.n	8006d9a <quorem+0x106>
 8006d84:	613c      	str	r4, [r7, #16]
 8006d86:	4630      	mov	r0, r6
 8006d88:	b003      	add	sp, #12
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	3b04      	subs	r3, #4
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	d1cc      	bne.n	8006d30 <quorem+0x9c>
 8006d96:	3c01      	subs	r4, #1
 8006d98:	e7c7      	b.n	8006d2a <quorem+0x96>
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	3b04      	subs	r3, #4
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	d1f0      	bne.n	8006d84 <quorem+0xf0>
 8006da2:	3c01      	subs	r4, #1
 8006da4:	e7eb      	b.n	8006d7e <quorem+0xea>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e7ee      	b.n	8006d88 <quorem+0xf4>
 8006daa:	0000      	movs	r0, r0
 8006dac:	0000      	movs	r0, r0
	...

08006db0 <_dtoa_r>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	ed2d 8b02 	vpush	{d8}
 8006db8:	ec57 6b10 	vmov	r6, r7, d0
 8006dbc:	b095      	sub	sp, #84	; 0x54
 8006dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006dc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006dc4:	9105      	str	r1, [sp, #20]
 8006dc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006dca:	4604      	mov	r4, r0
 8006dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dd0:	b975      	cbnz	r5, 8006df0 <_dtoa_r+0x40>
 8006dd2:	2010      	movs	r0, #16
 8006dd4:	f001 fa44 	bl	8008260 <malloc>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6260      	str	r0, [r4, #36]	; 0x24
 8006ddc:	b920      	cbnz	r0, 8006de8 <_dtoa_r+0x38>
 8006dde:	4bb2      	ldr	r3, [pc, #712]	; (80070a8 <_dtoa_r+0x2f8>)
 8006de0:	21ea      	movs	r1, #234	; 0xea
 8006de2:	48b2      	ldr	r0, [pc, #712]	; (80070ac <_dtoa_r+0x2fc>)
 8006de4:	f002 fbcc 	bl	8009580 <__assert_func>
 8006de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dec:	6005      	str	r5, [r0, #0]
 8006dee:	60c5      	str	r5, [r0, #12]
 8006df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	b151      	cbz	r1, 8006e0c <_dtoa_r+0x5c>
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	604a      	str	r2, [r1, #4]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4093      	lsls	r3, r2
 8006dfe:	608b      	str	r3, [r1, #8]
 8006e00:	4620      	mov	r0, r4
 8006e02:	f001 fa95 	bl	8008330 <_Bfree>
 8006e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	1e3b      	subs	r3, r7, #0
 8006e0e:	bfb9      	ittee	lt
 8006e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e14:	9303      	strlt	r3, [sp, #12]
 8006e16:	2300      	movge	r3, #0
 8006e18:	f8c8 3000 	strge.w	r3, [r8]
 8006e1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e20:	4ba3      	ldr	r3, [pc, #652]	; (80070b0 <_dtoa_r+0x300>)
 8006e22:	bfbc      	itt	lt
 8006e24:	2201      	movlt	r2, #1
 8006e26:	f8c8 2000 	strlt.w	r2, [r8]
 8006e2a:	ea33 0309 	bics.w	r3, r3, r9
 8006e2e:	d11b      	bne.n	8006e68 <_dtoa_r+0xb8>
 8006e30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e3c:	4333      	orrs	r3, r6
 8006e3e:	f000 857a 	beq.w	8007936 <_dtoa_r+0xb86>
 8006e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e44:	b963      	cbnz	r3, 8006e60 <_dtoa_r+0xb0>
 8006e46:	4b9b      	ldr	r3, [pc, #620]	; (80070b4 <_dtoa_r+0x304>)
 8006e48:	e024      	b.n	8006e94 <_dtoa_r+0xe4>
 8006e4a:	4b9b      	ldr	r3, [pc, #620]	; (80070b8 <_dtoa_r+0x308>)
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	9800      	ldr	r0, [sp, #0]
 8006e56:	b015      	add	sp, #84	; 0x54
 8006e58:	ecbd 8b02 	vpop	{d8}
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	4b94      	ldr	r3, [pc, #592]	; (80070b4 <_dtoa_r+0x304>)
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	3303      	adds	r3, #3
 8006e66:	e7f3      	b.n	8006e50 <_dtoa_r+0xa0>
 8006e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	ec51 0b17 	vmov	r0, r1, d7
 8006e72:	2300      	movs	r3, #0
 8006e74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006e78:	f7f9 fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	b158      	cbz	r0, 8006e98 <_dtoa_r+0xe8>
 8006e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e82:	2301      	movs	r3, #1
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8551 	beq.w	8007930 <_dtoa_r+0xb80>
 8006e8e:	488b      	ldr	r0, [pc, #556]	; (80070bc <_dtoa_r+0x30c>)
 8006e90:	6018      	str	r0, [r3, #0]
 8006e92:	1e43      	subs	r3, r0, #1
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	e7dd      	b.n	8006e54 <_dtoa_r+0xa4>
 8006e98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e9c:	aa12      	add	r2, sp, #72	; 0x48
 8006e9e:	a913      	add	r1, sp, #76	; 0x4c
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 fded 	bl	8008a80 <__d2b>
 8006ea6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eaa:	4683      	mov	fp, r0
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	d07c      	beq.n	8006faa <_dtoa_r+0x1fa>
 8006eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006eb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006ebe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ec2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eca:	4b7d      	ldr	r3, [pc, #500]	; (80070c0 <_dtoa_r+0x310>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	f7f9 f9f9 	bl	80002c8 <__aeabi_dsub>
 8006ed6:	a36e      	add	r3, pc, #440	; (adr r3, 8007090 <_dtoa_r+0x2e0>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 fbac 	bl	8000638 <__aeabi_dmul>
 8006ee0:	a36d      	add	r3, pc, #436	; (adr r3, 8007098 <_dtoa_r+0x2e8>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 f9f1 	bl	80002cc <__adddf3>
 8006eea:	4606      	mov	r6, r0
 8006eec:	4628      	mov	r0, r5
 8006eee:	460f      	mov	r7, r1
 8006ef0:	f7f9 fb38 	bl	8000564 <__aeabi_i2d>
 8006ef4:	a36a      	add	r3, pc, #424	; (adr r3, 80070a0 <_dtoa_r+0x2f0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 fb9d 	bl	8000638 <__aeabi_dmul>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	f7f9 f9e1 	bl	80002cc <__adddf3>
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	f7f9 fe43 	bl	8000b98 <__aeabi_d2iz>
 8006f12:	2200      	movs	r2, #0
 8006f14:	4682      	mov	sl, r0
 8006f16:	2300      	movs	r3, #0
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 fdfe 	bl	8000b1c <__aeabi_dcmplt>
 8006f20:	b148      	cbz	r0, 8006f36 <_dtoa_r+0x186>
 8006f22:	4650      	mov	r0, sl
 8006f24:	f7f9 fb1e 	bl	8000564 <__aeabi_i2d>
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	f7f9 fdec 	bl	8000b08 <__aeabi_dcmpeq>
 8006f30:	b908      	cbnz	r0, 8006f36 <_dtoa_r+0x186>
 8006f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f36:	f1ba 0f16 	cmp.w	sl, #22
 8006f3a:	d854      	bhi.n	8006fe6 <_dtoa_r+0x236>
 8006f3c:	4b61      	ldr	r3, [pc, #388]	; (80070c4 <_dtoa_r+0x314>)
 8006f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f4a:	f7f9 fde7 	bl	8000b1c <__aeabi_dcmplt>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d04b      	beq.n	8006fea <_dtoa_r+0x23a>
 8006f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f56:	2300      	movs	r3, #0
 8006f58:	930e      	str	r3, [sp, #56]	; 0x38
 8006f5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f5c:	1b5d      	subs	r5, r3, r5
 8006f5e:	1e6b      	subs	r3, r5, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	bf43      	ittte	mi
 8006f64:	2300      	movmi	r3, #0
 8006f66:	f1c5 0801 	rsbmi	r8, r5, #1
 8006f6a:	9304      	strmi	r3, [sp, #16]
 8006f6c:	f04f 0800 	movpl.w	r8, #0
 8006f70:	f1ba 0f00 	cmp.w	sl, #0
 8006f74:	db3b      	blt.n	8006fee <_dtoa_r+0x23e>
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006f7c:	4453      	add	r3, sl
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	2300      	movs	r3, #0
 8006f82:	9306      	str	r3, [sp, #24]
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	d869      	bhi.n	800705e <_dtoa_r+0x2ae>
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	bfc4      	itt	gt
 8006f8e:	3b04      	subgt	r3, #4
 8006f90:	9305      	strgt	r3, [sp, #20]
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	f1a3 0302 	sub.w	r3, r3, #2
 8006f98:	bfcc      	ite	gt
 8006f9a:	2500      	movgt	r5, #0
 8006f9c:	2501      	movle	r5, #1
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d869      	bhi.n	8007076 <_dtoa_r+0x2c6>
 8006fa2:	e8df f003 	tbb	[pc, r3]
 8006fa6:	4e2c      	.short	0x4e2c
 8006fa8:	5a4c      	.short	0x5a4c
 8006faa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006fae:	441d      	add	r5, r3
 8006fb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	bfc1      	itttt	gt
 8006fb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006fc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8006fc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fc8:	bfda      	itte	le
 8006fca:	f1c3 0320 	rsble	r3, r3, #32
 8006fce:	fa06 f003 	lslle.w	r0, r6, r3
 8006fd2:	4318      	orrgt	r0, r3
 8006fd4:	f7f9 fab6 	bl	8000544 <__aeabi_ui2d>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4606      	mov	r6, r0
 8006fdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006fe0:	3d01      	subs	r5, #1
 8006fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8006fe4:	e771      	b.n	8006eca <_dtoa_r+0x11a>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7b6      	b.n	8006f58 <_dtoa_r+0x1a8>
 8006fea:	900e      	str	r0, [sp, #56]	; 0x38
 8006fec:	e7b5      	b.n	8006f5a <_dtoa_r+0x1aa>
 8006fee:	f1ca 0300 	rsb	r3, sl, #0
 8006ff2:	9306      	str	r3, [sp, #24]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	eba8 080a 	sub.w	r8, r8, sl
 8006ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8006ffc:	e7c2      	b.n	8006f84 <_dtoa_r+0x1d4>
 8006ffe:	2300      	movs	r3, #0
 8007000:	9308      	str	r3, [sp, #32]
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc39      	bgt.n	800707c <_dtoa_r+0x2cc>
 8007008:	f04f 0901 	mov.w	r9, #1
 800700c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007010:	464b      	mov	r3, r9
 8007012:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007016:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007018:	2200      	movs	r2, #0
 800701a:	6042      	str	r2, [r0, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	f102 0614 	add.w	r6, r2, #20
 8007022:	429e      	cmp	r6, r3
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	d92f      	bls.n	8007088 <_dtoa_r+0x2d8>
 8007028:	4620      	mov	r0, r4
 800702a:	f001 f941 	bl	80082b0 <_Balloc>
 800702e:	9000      	str	r0, [sp, #0]
 8007030:	2800      	cmp	r0, #0
 8007032:	d14b      	bne.n	80070cc <_dtoa_r+0x31c>
 8007034:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <_dtoa_r+0x318>)
 8007036:	4602      	mov	r2, r0
 8007038:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800703c:	e6d1      	b.n	8006de2 <_dtoa_r+0x32>
 800703e:	2301      	movs	r3, #1
 8007040:	e7de      	b.n	8007000 <_dtoa_r+0x250>
 8007042:	2300      	movs	r3, #0
 8007044:	9308      	str	r3, [sp, #32]
 8007046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007048:	eb0a 0903 	add.w	r9, sl, r3
 800704c:	f109 0301 	add.w	r3, r9, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	bfb8      	it	lt
 8007056:	2301      	movlt	r3, #1
 8007058:	e7dd      	b.n	8007016 <_dtoa_r+0x266>
 800705a:	2301      	movs	r3, #1
 800705c:	e7f2      	b.n	8007044 <_dtoa_r+0x294>
 800705e:	2501      	movs	r5, #1
 8007060:	2300      	movs	r3, #0
 8007062:	9305      	str	r3, [sp, #20]
 8007064:	9508      	str	r5, [sp, #32]
 8007066:	f04f 39ff 	mov.w	r9, #4294967295
 800706a:	2200      	movs	r2, #0
 800706c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007070:	2312      	movs	r3, #18
 8007072:	9209      	str	r2, [sp, #36]	; 0x24
 8007074:	e7cf      	b.n	8007016 <_dtoa_r+0x266>
 8007076:	2301      	movs	r3, #1
 8007078:	9308      	str	r3, [sp, #32]
 800707a:	e7f4      	b.n	8007066 <_dtoa_r+0x2b6>
 800707c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007080:	f8cd 9004 	str.w	r9, [sp, #4]
 8007084:	464b      	mov	r3, r9
 8007086:	e7c6      	b.n	8007016 <_dtoa_r+0x266>
 8007088:	3101      	adds	r1, #1
 800708a:	6041      	str	r1, [r0, #4]
 800708c:	0052      	lsls	r2, r2, #1
 800708e:	e7c6      	b.n	800701e <_dtoa_r+0x26e>
 8007090:	636f4361 	.word	0x636f4361
 8007094:	3fd287a7 	.word	0x3fd287a7
 8007098:	8b60c8b3 	.word	0x8b60c8b3
 800709c:	3fc68a28 	.word	0x3fc68a28
 80070a0:	509f79fb 	.word	0x509f79fb
 80070a4:	3fd34413 	.word	0x3fd34413
 80070a8:	08009c6e 	.word	0x08009c6e
 80070ac:	08009c85 	.word	0x08009c85
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	08009c6a 	.word	0x08009c6a
 80070b8:	08009c61 	.word	0x08009c61
 80070bc:	08009ae5 	.word	0x08009ae5
 80070c0:	3ff80000 	.word	0x3ff80000
 80070c4:	08009e60 	.word	0x08009e60
 80070c8:	08009ce4 	.word	0x08009ce4
 80070cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ce:	9a00      	ldr	r2, [sp, #0]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	9b01      	ldr	r3, [sp, #4]
 80070d4:	2b0e      	cmp	r3, #14
 80070d6:	f200 80ad 	bhi.w	8007234 <_dtoa_r+0x484>
 80070da:	2d00      	cmp	r5, #0
 80070dc:	f000 80aa 	beq.w	8007234 <_dtoa_r+0x484>
 80070e0:	f1ba 0f00 	cmp.w	sl, #0
 80070e4:	dd36      	ble.n	8007154 <_dtoa_r+0x3a4>
 80070e6:	4ac3      	ldr	r2, [pc, #780]	; (80073f4 <_dtoa_r+0x644>)
 80070e8:	f00a 030f 	and.w	r3, sl, #15
 80070ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070f0:	ed93 7b00 	vldr	d7, [r3]
 80070f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80070fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007100:	eef0 8a67 	vmov.f32	s17, s15
 8007104:	d016      	beq.n	8007134 <_dtoa_r+0x384>
 8007106:	4bbc      	ldr	r3, [pc, #752]	; (80073f8 <_dtoa_r+0x648>)
 8007108:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800710c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007110:	f7f9 fbbc 	bl	800088c <__aeabi_ddiv>
 8007114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007118:	f007 070f 	and.w	r7, r7, #15
 800711c:	2503      	movs	r5, #3
 800711e:	4eb6      	ldr	r6, [pc, #728]	; (80073f8 <_dtoa_r+0x648>)
 8007120:	b957      	cbnz	r7, 8007138 <_dtoa_r+0x388>
 8007122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007126:	ec53 2b18 	vmov	r2, r3, d8
 800712a:	f7f9 fbaf 	bl	800088c <__aeabi_ddiv>
 800712e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007132:	e029      	b.n	8007188 <_dtoa_r+0x3d8>
 8007134:	2502      	movs	r5, #2
 8007136:	e7f2      	b.n	800711e <_dtoa_r+0x36e>
 8007138:	07f9      	lsls	r1, r7, #31
 800713a:	d508      	bpl.n	800714e <_dtoa_r+0x39e>
 800713c:	ec51 0b18 	vmov	r0, r1, d8
 8007140:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007144:	f7f9 fa78 	bl	8000638 <__aeabi_dmul>
 8007148:	ec41 0b18 	vmov	d8, r0, r1
 800714c:	3501      	adds	r5, #1
 800714e:	107f      	asrs	r7, r7, #1
 8007150:	3608      	adds	r6, #8
 8007152:	e7e5      	b.n	8007120 <_dtoa_r+0x370>
 8007154:	f000 80a6 	beq.w	80072a4 <_dtoa_r+0x4f4>
 8007158:	f1ca 0600 	rsb	r6, sl, #0
 800715c:	4ba5      	ldr	r3, [pc, #660]	; (80073f4 <_dtoa_r+0x644>)
 800715e:	4fa6      	ldr	r7, [pc, #664]	; (80073f8 <_dtoa_r+0x648>)
 8007160:	f006 020f 	and.w	r2, r6, #15
 8007164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007170:	f7f9 fa62 	bl	8000638 <__aeabi_dmul>
 8007174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007178:	1136      	asrs	r6, r6, #4
 800717a:	2300      	movs	r3, #0
 800717c:	2502      	movs	r5, #2
 800717e:	2e00      	cmp	r6, #0
 8007180:	f040 8085 	bne.w	800728e <_dtoa_r+0x4de>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1d2      	bne.n	800712e <_dtoa_r+0x37e>
 8007188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 808c 	beq.w	80072a8 <_dtoa_r+0x4f8>
 8007190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007194:	4b99      	ldr	r3, [pc, #612]	; (80073fc <_dtoa_r+0x64c>)
 8007196:	2200      	movs	r2, #0
 8007198:	4630      	mov	r0, r6
 800719a:	4639      	mov	r1, r7
 800719c:	f7f9 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f000 8081 	beq.w	80072a8 <_dtoa_r+0x4f8>
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d07d      	beq.n	80072a8 <_dtoa_r+0x4f8>
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	dd3c      	ble.n	800722c <_dtoa_r+0x47c>
 80071b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80071b6:	9307      	str	r3, [sp, #28]
 80071b8:	2200      	movs	r2, #0
 80071ba:	4b91      	ldr	r3, [pc, #580]	; (8007400 <_dtoa_r+0x650>)
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fa3a 	bl	8000638 <__aeabi_dmul>
 80071c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071c8:	3501      	adds	r5, #1
 80071ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80071ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071d2:	4628      	mov	r0, r5
 80071d4:	f7f9 f9c6 	bl	8000564 <__aeabi_i2d>
 80071d8:	4632      	mov	r2, r6
 80071da:	463b      	mov	r3, r7
 80071dc:	f7f9 fa2c 	bl	8000638 <__aeabi_dmul>
 80071e0:	4b88      	ldr	r3, [pc, #544]	; (8007404 <_dtoa_r+0x654>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	f7f9 f872 	bl	80002cc <__adddf3>
 80071e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80071ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f0:	9303      	str	r3, [sp, #12]
 80071f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d15c      	bne.n	80072b2 <_dtoa_r+0x502>
 80071f8:	4b83      	ldr	r3, [pc, #524]	; (8007408 <_dtoa_r+0x658>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f9 f862 	bl	80002c8 <__aeabi_dsub>
 8007204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007208:	4606      	mov	r6, r0
 800720a:	460f      	mov	r7, r1
 800720c:	f7f9 fca4 	bl	8000b58 <__aeabi_dcmpgt>
 8007210:	2800      	cmp	r0, #0
 8007212:	f040 8296 	bne.w	8007742 <_dtoa_r+0x992>
 8007216:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800721a:	4630      	mov	r0, r6
 800721c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	f040 8288 	bne.w	800773c <_dtoa_r+0x98c>
 800722c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007236:	2b00      	cmp	r3, #0
 8007238:	f2c0 8158 	blt.w	80074ec <_dtoa_r+0x73c>
 800723c:	f1ba 0f0e 	cmp.w	sl, #14
 8007240:	f300 8154 	bgt.w	80074ec <_dtoa_r+0x73c>
 8007244:	4b6b      	ldr	r3, [pc, #428]	; (80073f4 <_dtoa_r+0x644>)
 8007246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800724a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	f280 80e3 	bge.w	800741c <_dtoa_r+0x66c>
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f300 80df 	bgt.w	800741c <_dtoa_r+0x66c>
 800725e:	f040 826d 	bne.w	800773c <_dtoa_r+0x98c>
 8007262:	4b69      	ldr	r3, [pc, #420]	; (8007408 <_dtoa_r+0x658>)
 8007264:	2200      	movs	r2, #0
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f9 f9e5 	bl	8000638 <__aeabi_dmul>
 800726e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007272:	f7f9 fc67 	bl	8000b44 <__aeabi_dcmpge>
 8007276:	9e01      	ldr	r6, [sp, #4]
 8007278:	4637      	mov	r7, r6
 800727a:	2800      	cmp	r0, #0
 800727c:	f040 8243 	bne.w	8007706 <_dtoa_r+0x956>
 8007280:	9d00      	ldr	r5, [sp, #0]
 8007282:	2331      	movs	r3, #49	; 0x31
 8007284:	f805 3b01 	strb.w	r3, [r5], #1
 8007288:	f10a 0a01 	add.w	sl, sl, #1
 800728c:	e23f      	b.n	800770e <_dtoa_r+0x95e>
 800728e:	07f2      	lsls	r2, r6, #31
 8007290:	d505      	bpl.n	800729e <_dtoa_r+0x4ee>
 8007292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007296:	f7f9 f9cf 	bl	8000638 <__aeabi_dmul>
 800729a:	3501      	adds	r5, #1
 800729c:	2301      	movs	r3, #1
 800729e:	1076      	asrs	r6, r6, #1
 80072a0:	3708      	adds	r7, #8
 80072a2:	e76c      	b.n	800717e <_dtoa_r+0x3ce>
 80072a4:	2502      	movs	r5, #2
 80072a6:	e76f      	b.n	8007188 <_dtoa_r+0x3d8>
 80072a8:	9b01      	ldr	r3, [sp, #4]
 80072aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80072ae:	930c      	str	r3, [sp, #48]	; 0x30
 80072b0:	e78d      	b.n	80071ce <_dtoa_r+0x41e>
 80072b2:	9900      	ldr	r1, [sp, #0]
 80072b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b8:	4b4e      	ldr	r3, [pc, #312]	; (80073f4 <_dtoa_r+0x644>)
 80072ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072be:	4401      	add	r1, r0
 80072c0:	9102      	str	r1, [sp, #8]
 80072c2:	9908      	ldr	r1, [sp, #32]
 80072c4:	eeb0 8a47 	vmov.f32	s16, s14
 80072c8:	eef0 8a67 	vmov.f32	s17, s15
 80072cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072d4:	2900      	cmp	r1, #0
 80072d6:	d045      	beq.n	8007364 <_dtoa_r+0x5b4>
 80072d8:	494c      	ldr	r1, [pc, #304]	; (800740c <_dtoa_r+0x65c>)
 80072da:	2000      	movs	r0, #0
 80072dc:	f7f9 fad6 	bl	800088c <__aeabi_ddiv>
 80072e0:	ec53 2b18 	vmov	r2, r3, d8
 80072e4:	f7f8 fff0 	bl	80002c8 <__aeabi_dsub>
 80072e8:	9d00      	ldr	r5, [sp, #0]
 80072ea:	ec41 0b18 	vmov	d8, r0, r1
 80072ee:	4639      	mov	r1, r7
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7f9 fc51 	bl	8000b98 <__aeabi_d2iz>
 80072f6:	900c      	str	r0, [sp, #48]	; 0x30
 80072f8:	f7f9 f934 	bl	8000564 <__aeabi_i2d>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ffe0 	bl	80002c8 <__aeabi_dsub>
 8007308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800730a:	3330      	adds	r3, #48	; 0x30
 800730c:	f805 3b01 	strb.w	r3, [r5], #1
 8007310:	ec53 2b18 	vmov	r2, r3, d8
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	f7f9 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	d165      	bne.n	80073ec <_dtoa_r+0x63c>
 8007320:	4632      	mov	r2, r6
 8007322:	463b      	mov	r3, r7
 8007324:	4935      	ldr	r1, [pc, #212]	; (80073fc <_dtoa_r+0x64c>)
 8007326:	2000      	movs	r0, #0
 8007328:	f7f8 ffce 	bl	80002c8 <__aeabi_dsub>
 800732c:	ec53 2b18 	vmov	r2, r3, d8
 8007330:	f7f9 fbf4 	bl	8000b1c <__aeabi_dcmplt>
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 80b9 	bne.w	80074ac <_dtoa_r+0x6fc>
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	429d      	cmp	r5, r3
 800733e:	f43f af75 	beq.w	800722c <_dtoa_r+0x47c>
 8007342:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <_dtoa_r+0x650>)
 8007344:	ec51 0b18 	vmov	r0, r1, d8
 8007348:	2200      	movs	r2, #0
 800734a:	f7f9 f975 	bl	8000638 <__aeabi_dmul>
 800734e:	4b2c      	ldr	r3, [pc, #176]	; (8007400 <_dtoa_r+0x650>)
 8007350:	ec41 0b18 	vmov	d8, r0, r1
 8007354:	2200      	movs	r2, #0
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f9 f96d 	bl	8000638 <__aeabi_dmul>
 800735e:	4606      	mov	r6, r0
 8007360:	460f      	mov	r7, r1
 8007362:	e7c4      	b.n	80072ee <_dtoa_r+0x53e>
 8007364:	ec51 0b17 	vmov	r0, r1, d7
 8007368:	f7f9 f966 	bl	8000638 <__aeabi_dmul>
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	9d00      	ldr	r5, [sp, #0]
 8007370:	930c      	str	r3, [sp, #48]	; 0x30
 8007372:	ec41 0b18 	vmov	d8, r0, r1
 8007376:	4639      	mov	r1, r7
 8007378:	4630      	mov	r0, r6
 800737a:	f7f9 fc0d 	bl	8000b98 <__aeabi_d2iz>
 800737e:	9011      	str	r0, [sp, #68]	; 0x44
 8007380:	f7f9 f8f0 	bl	8000564 <__aeabi_i2d>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f8 ff9c 	bl	80002c8 <__aeabi_dsub>
 8007390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007392:	3330      	adds	r3, #48	; 0x30
 8007394:	f805 3b01 	strb.w	r3, [r5], #1
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	429d      	cmp	r5, r3
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	d134      	bne.n	8007410 <_dtoa_r+0x660>
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <_dtoa_r+0x65c>)
 80073a8:	ec51 0b18 	vmov	r0, r1, d8
 80073ac:	f7f8 ff8e 	bl	80002cc <__adddf3>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f9 fbce 	bl	8000b58 <__aeabi_dcmpgt>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d175      	bne.n	80074ac <_dtoa_r+0x6fc>
 80073c0:	ec53 2b18 	vmov	r2, r3, d8
 80073c4:	4911      	ldr	r1, [pc, #68]	; (800740c <_dtoa_r+0x65c>)
 80073c6:	2000      	movs	r0, #0
 80073c8:	f7f8 ff7e 	bl	80002c8 <__aeabi_dsub>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fba2 	bl	8000b1c <__aeabi_dcmplt>
 80073d8:	2800      	cmp	r0, #0
 80073da:	f43f af27 	beq.w	800722c <_dtoa_r+0x47c>
 80073de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073e0:	1e6b      	subs	r3, r5, #1
 80073e2:	930c      	str	r3, [sp, #48]	; 0x30
 80073e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d0f8      	beq.n	80073de <_dtoa_r+0x62e>
 80073ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80073f0:	e04a      	b.n	8007488 <_dtoa_r+0x6d8>
 80073f2:	bf00      	nop
 80073f4:	08009e60 	.word	0x08009e60
 80073f8:	08009e38 	.word	0x08009e38
 80073fc:	3ff00000 	.word	0x3ff00000
 8007400:	40240000 	.word	0x40240000
 8007404:	401c0000 	.word	0x401c0000
 8007408:	40140000 	.word	0x40140000
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	4baf      	ldr	r3, [pc, #700]	; (80076d0 <_dtoa_r+0x920>)
 8007412:	f7f9 f911 	bl	8000638 <__aeabi_dmul>
 8007416:	4606      	mov	r6, r0
 8007418:	460f      	mov	r7, r1
 800741a:	e7ac      	b.n	8007376 <_dtoa_r+0x5c6>
 800741c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007420:	9d00      	ldr	r5, [sp, #0]
 8007422:	4642      	mov	r2, r8
 8007424:	464b      	mov	r3, r9
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 fa2f 	bl	800088c <__aeabi_ddiv>
 800742e:	f7f9 fbb3 	bl	8000b98 <__aeabi_d2iz>
 8007432:	9002      	str	r0, [sp, #8]
 8007434:	f7f9 f896 	bl	8000564 <__aeabi_i2d>
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	f7f9 f8fc 	bl	8000638 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4630      	mov	r0, r6
 8007446:	4639      	mov	r1, r7
 8007448:	f7f8 ff3e 	bl	80002c8 <__aeabi_dsub>
 800744c:	9e02      	ldr	r6, [sp, #8]
 800744e:	9f01      	ldr	r7, [sp, #4]
 8007450:	3630      	adds	r6, #48	; 0x30
 8007452:	f805 6b01 	strb.w	r6, [r5], #1
 8007456:	9e00      	ldr	r6, [sp, #0]
 8007458:	1bae      	subs	r6, r5, r6
 800745a:	42b7      	cmp	r7, r6
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	d137      	bne.n	80074d2 <_dtoa_r+0x722>
 8007462:	f7f8 ff33 	bl	80002cc <__adddf3>
 8007466:	4642      	mov	r2, r8
 8007468:	464b      	mov	r3, r9
 800746a:	4606      	mov	r6, r0
 800746c:	460f      	mov	r7, r1
 800746e:	f7f9 fb73 	bl	8000b58 <__aeabi_dcmpgt>
 8007472:	b9c8      	cbnz	r0, 80074a8 <_dtoa_r+0x6f8>
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	4630      	mov	r0, r6
 800747a:	4639      	mov	r1, r7
 800747c:	f7f9 fb44 	bl	8000b08 <__aeabi_dcmpeq>
 8007480:	b110      	cbz	r0, 8007488 <_dtoa_r+0x6d8>
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d40f      	bmi.n	80074a8 <_dtoa_r+0x6f8>
 8007488:	4620      	mov	r0, r4
 800748a:	4659      	mov	r1, fp
 800748c:	f000 ff50 	bl	8008330 <_Bfree>
 8007490:	2300      	movs	r3, #0
 8007492:	702b      	strb	r3, [r5, #0]
 8007494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007496:	f10a 0001 	add.w	r0, sl, #1
 800749a:	6018      	str	r0, [r3, #0]
 800749c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f43f acd8 	beq.w	8006e54 <_dtoa_r+0xa4>
 80074a4:	601d      	str	r5, [r3, #0]
 80074a6:	e4d5      	b.n	8006e54 <_dtoa_r+0xa4>
 80074a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80074ac:	462b      	mov	r3, r5
 80074ae:	461d      	mov	r5, r3
 80074b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074b4:	2a39      	cmp	r2, #57	; 0x39
 80074b6:	d108      	bne.n	80074ca <_dtoa_r+0x71a>
 80074b8:	9a00      	ldr	r2, [sp, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d1f7      	bne.n	80074ae <_dtoa_r+0x6fe>
 80074be:	9a07      	ldr	r2, [sp, #28]
 80074c0:	9900      	ldr	r1, [sp, #0]
 80074c2:	3201      	adds	r2, #1
 80074c4:	9207      	str	r2, [sp, #28]
 80074c6:	2230      	movs	r2, #48	; 0x30
 80074c8:	700a      	strb	r2, [r1, #0]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	3201      	adds	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e78c      	b.n	80073ec <_dtoa_r+0x63c>
 80074d2:	4b7f      	ldr	r3, [pc, #508]	; (80076d0 <_dtoa_r+0x920>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	f7f9 f8af 	bl	8000638 <__aeabi_dmul>
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	f7f9 fb11 	bl	8000b08 <__aeabi_dcmpeq>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d09b      	beq.n	8007422 <_dtoa_r+0x672>
 80074ea:	e7cd      	b.n	8007488 <_dtoa_r+0x6d8>
 80074ec:	9a08      	ldr	r2, [sp, #32]
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	f000 80c4 	beq.w	800767c <_dtoa_r+0x8cc>
 80074f4:	9a05      	ldr	r2, [sp, #20]
 80074f6:	2a01      	cmp	r2, #1
 80074f8:	f300 80a8 	bgt.w	800764c <_dtoa_r+0x89c>
 80074fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074fe:	2a00      	cmp	r2, #0
 8007500:	f000 80a0 	beq.w	8007644 <_dtoa_r+0x894>
 8007504:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007508:	9e06      	ldr	r6, [sp, #24]
 800750a:	4645      	mov	r5, r8
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	2101      	movs	r1, #1
 8007510:	441a      	add	r2, r3
 8007512:	4620      	mov	r0, r4
 8007514:	4498      	add	r8, r3
 8007516:	9204      	str	r2, [sp, #16]
 8007518:	f001 f810 	bl	800853c <__i2b>
 800751c:	4607      	mov	r7, r0
 800751e:	2d00      	cmp	r5, #0
 8007520:	dd0b      	ble.n	800753a <_dtoa_r+0x78a>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd08      	ble.n	800753a <_dtoa_r+0x78a>
 8007528:	42ab      	cmp	r3, r5
 800752a:	9a04      	ldr	r2, [sp, #16]
 800752c:	bfa8      	it	ge
 800752e:	462b      	movge	r3, r5
 8007530:	eba8 0803 	sub.w	r8, r8, r3
 8007534:	1aed      	subs	r5, r5, r3
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	b1fb      	cbz	r3, 800757e <_dtoa_r+0x7ce>
 800753e:	9b08      	ldr	r3, [sp, #32]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 809f 	beq.w	8007684 <_dtoa_r+0x8d4>
 8007546:	2e00      	cmp	r6, #0
 8007548:	dd11      	ble.n	800756e <_dtoa_r+0x7be>
 800754a:	4639      	mov	r1, r7
 800754c:	4632      	mov	r2, r6
 800754e:	4620      	mov	r0, r4
 8007550:	f001 f8b0 	bl	80086b4 <__pow5mult>
 8007554:	465a      	mov	r2, fp
 8007556:	4601      	mov	r1, r0
 8007558:	4607      	mov	r7, r0
 800755a:	4620      	mov	r0, r4
 800755c:	f001 f804 	bl	8008568 <__multiply>
 8007560:	4659      	mov	r1, fp
 8007562:	9007      	str	r0, [sp, #28]
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fee3 	bl	8008330 <_Bfree>
 800756a:	9b07      	ldr	r3, [sp, #28]
 800756c:	469b      	mov	fp, r3
 800756e:	9b06      	ldr	r3, [sp, #24]
 8007570:	1b9a      	subs	r2, r3, r6
 8007572:	d004      	beq.n	800757e <_dtoa_r+0x7ce>
 8007574:	4659      	mov	r1, fp
 8007576:	4620      	mov	r0, r4
 8007578:	f001 f89c 	bl	80086b4 <__pow5mult>
 800757c:	4683      	mov	fp, r0
 800757e:	2101      	movs	r1, #1
 8007580:	4620      	mov	r0, r4
 8007582:	f000 ffdb 	bl	800853c <__i2b>
 8007586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007588:	2b00      	cmp	r3, #0
 800758a:	4606      	mov	r6, r0
 800758c:	dd7c      	ble.n	8007688 <_dtoa_r+0x8d8>
 800758e:	461a      	mov	r2, r3
 8007590:	4601      	mov	r1, r0
 8007592:	4620      	mov	r0, r4
 8007594:	f001 f88e 	bl	80086b4 <__pow5mult>
 8007598:	9b05      	ldr	r3, [sp, #20]
 800759a:	2b01      	cmp	r3, #1
 800759c:	4606      	mov	r6, r0
 800759e:	dd76      	ble.n	800768e <_dtoa_r+0x8de>
 80075a0:	2300      	movs	r3, #0
 80075a2:	9306      	str	r3, [sp, #24]
 80075a4:	6933      	ldr	r3, [r6, #16]
 80075a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075aa:	6918      	ldr	r0, [r3, #16]
 80075ac:	f000 ff76 	bl	800849c <__hi0bits>
 80075b0:	f1c0 0020 	rsb	r0, r0, #32
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	4418      	add	r0, r3
 80075b8:	f010 001f 	ands.w	r0, r0, #31
 80075bc:	f000 8086 	beq.w	80076cc <_dtoa_r+0x91c>
 80075c0:	f1c0 0320 	rsb	r3, r0, #32
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	dd7f      	ble.n	80076c8 <_dtoa_r+0x918>
 80075c8:	f1c0 001c 	rsb	r0, r0, #28
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	4403      	add	r3, r0
 80075d0:	4480      	add	r8, r0
 80075d2:	4405      	add	r5, r0
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x838>
 80075dc:	4659      	mov	r1, fp
 80075de:	4642      	mov	r2, r8
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 f8c1 	bl	8008768 <__lshift>
 80075e6:	4683      	mov	fp, r0
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd05      	ble.n	80075fa <_dtoa_r+0x84a>
 80075ee:	4631      	mov	r1, r6
 80075f0:	461a      	mov	r2, r3
 80075f2:	4620      	mov	r0, r4
 80075f4:	f001 f8b8 	bl	8008768 <__lshift>
 80075f8:	4606      	mov	r6, r0
 80075fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d069      	beq.n	80076d4 <_dtoa_r+0x924>
 8007600:	4631      	mov	r1, r6
 8007602:	4658      	mov	r0, fp
 8007604:	f001 f91c 	bl	8008840 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	da63      	bge.n	80076d4 <_dtoa_r+0x924>
 800760c:	2300      	movs	r3, #0
 800760e:	4659      	mov	r1, fp
 8007610:	220a      	movs	r2, #10
 8007612:	4620      	mov	r0, r4
 8007614:	f000 feae 	bl	8008374 <__multadd>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800761e:	4683      	mov	fp, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 818f 	beq.w	8007944 <_dtoa_r+0xb94>
 8007626:	4639      	mov	r1, r7
 8007628:	2300      	movs	r3, #0
 800762a:	220a      	movs	r2, #10
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fea1 	bl	8008374 <__multadd>
 8007632:	f1b9 0f00 	cmp.w	r9, #0
 8007636:	4607      	mov	r7, r0
 8007638:	f300 808e 	bgt.w	8007758 <_dtoa_r+0x9a8>
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc50      	bgt.n	80076e4 <_dtoa_r+0x934>
 8007642:	e089      	b.n	8007758 <_dtoa_r+0x9a8>
 8007644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800764a:	e75d      	b.n	8007508 <_dtoa_r+0x758>
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	1e5e      	subs	r6, r3, #1
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	42b3      	cmp	r3, r6
 8007654:	bfbf      	itttt	lt
 8007656:	9b06      	ldrlt	r3, [sp, #24]
 8007658:	9606      	strlt	r6, [sp, #24]
 800765a:	1af2      	sublt	r2, r6, r3
 800765c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800765e:	bfb6      	itet	lt
 8007660:	189b      	addlt	r3, r3, r2
 8007662:	1b9e      	subge	r6, r3, r6
 8007664:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	bfb8      	it	lt
 800766a:	2600      	movlt	r6, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfb5      	itete	lt
 8007670:	eba8 0503 	sublt.w	r5, r8, r3
 8007674:	9b01      	ldrge	r3, [sp, #4]
 8007676:	2300      	movlt	r3, #0
 8007678:	4645      	movge	r5, r8
 800767a:	e747      	b.n	800750c <_dtoa_r+0x75c>
 800767c:	9e06      	ldr	r6, [sp, #24]
 800767e:	9f08      	ldr	r7, [sp, #32]
 8007680:	4645      	mov	r5, r8
 8007682:	e74c      	b.n	800751e <_dtoa_r+0x76e>
 8007684:	9a06      	ldr	r2, [sp, #24]
 8007686:	e775      	b.n	8007574 <_dtoa_r+0x7c4>
 8007688:	9b05      	ldr	r3, [sp, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	dc18      	bgt.n	80076c0 <_dtoa_r+0x910>
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	b9b3      	cbnz	r3, 80076c0 <_dtoa_r+0x910>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007698:	b9a3      	cbnz	r3, 80076c4 <_dtoa_r+0x914>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076a0:	0d1b      	lsrs	r3, r3, #20
 80076a2:	051b      	lsls	r3, r3, #20
 80076a4:	b12b      	cbz	r3, 80076b2 <_dtoa_r+0x902>
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	3301      	adds	r3, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f108 0801 	add.w	r8, r8, #1
 80076b0:	2301      	movs	r3, #1
 80076b2:	9306      	str	r3, [sp, #24]
 80076b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f47f af74 	bne.w	80075a4 <_dtoa_r+0x7f4>
 80076bc:	2001      	movs	r0, #1
 80076be:	e779      	b.n	80075b4 <_dtoa_r+0x804>
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7f6      	b.n	80076b2 <_dtoa_r+0x902>
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	e7f4      	b.n	80076b2 <_dtoa_r+0x902>
 80076c8:	d085      	beq.n	80075d6 <_dtoa_r+0x826>
 80076ca:	4618      	mov	r0, r3
 80076cc:	301c      	adds	r0, #28
 80076ce:	e77d      	b.n	80075cc <_dtoa_r+0x81c>
 80076d0:	40240000 	.word	0x40240000
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dc38      	bgt.n	800774c <_dtoa_r+0x99c>
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	dd35      	ble.n	800774c <_dtoa_r+0x99c>
 80076e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	d10d      	bne.n	8007706 <_dtoa_r+0x956>
 80076ea:	4631      	mov	r1, r6
 80076ec:	464b      	mov	r3, r9
 80076ee:	2205      	movs	r2, #5
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fe3f 	bl	8008374 <__multadd>
 80076f6:	4601      	mov	r1, r0
 80076f8:	4606      	mov	r6, r0
 80076fa:	4658      	mov	r0, fp
 80076fc:	f001 f8a0 	bl	8008840 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	f73f adbd 	bgt.w	8007280 <_dtoa_r+0x4d0>
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	9d00      	ldr	r5, [sp, #0]
 800770a:	ea6f 0a03 	mvn.w	sl, r3
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	4631      	mov	r1, r6
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fe0b 	bl	8008330 <_Bfree>
 800771a:	2f00      	cmp	r7, #0
 800771c:	f43f aeb4 	beq.w	8007488 <_dtoa_r+0x6d8>
 8007720:	f1b8 0f00 	cmp.w	r8, #0
 8007724:	d005      	beq.n	8007732 <_dtoa_r+0x982>
 8007726:	45b8      	cmp	r8, r7
 8007728:	d003      	beq.n	8007732 <_dtoa_r+0x982>
 800772a:	4641      	mov	r1, r8
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fdff 	bl	8008330 <_Bfree>
 8007732:	4639      	mov	r1, r7
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fdfb 	bl	8008330 <_Bfree>
 800773a:	e6a5      	b.n	8007488 <_dtoa_r+0x6d8>
 800773c:	2600      	movs	r6, #0
 800773e:	4637      	mov	r7, r6
 8007740:	e7e1      	b.n	8007706 <_dtoa_r+0x956>
 8007742:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007744:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007748:	4637      	mov	r7, r6
 800774a:	e599      	b.n	8007280 <_dtoa_r+0x4d0>
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80fd 	beq.w	8007952 <_dtoa_r+0xba2>
 8007758:	2d00      	cmp	r5, #0
 800775a:	dd05      	ble.n	8007768 <_dtoa_r+0x9b8>
 800775c:	4639      	mov	r1, r7
 800775e:	462a      	mov	r2, r5
 8007760:	4620      	mov	r0, r4
 8007762:	f001 f801 	bl	8008768 <__lshift>
 8007766:	4607      	mov	r7, r0
 8007768:	9b06      	ldr	r3, [sp, #24]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d05c      	beq.n	8007828 <_dtoa_r+0xa78>
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fd9d 	bl	80082b0 <_Balloc>
 8007776:	4605      	mov	r5, r0
 8007778:	b928      	cbnz	r0, 8007786 <_dtoa_r+0x9d6>
 800777a:	4b80      	ldr	r3, [pc, #512]	; (800797c <_dtoa_r+0xbcc>)
 800777c:	4602      	mov	r2, r0
 800777e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007782:	f7ff bb2e 	b.w	8006de2 <_dtoa_r+0x32>
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	3202      	adds	r2, #2
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	f107 010c 	add.w	r1, r7, #12
 8007790:	300c      	adds	r0, #12
 8007792:	f000 fd7f 	bl	8008294 <memcpy>
 8007796:	2201      	movs	r2, #1
 8007798:	4629      	mov	r1, r5
 800779a:	4620      	mov	r0, r4
 800779c:	f000 ffe4 	bl	8008768 <__lshift>
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	444b      	add	r3, r9
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	9b02      	ldr	r3, [sp, #8]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	46b8      	mov	r8, r7
 80077b4:	9306      	str	r3, [sp, #24]
 80077b6:	4607      	mov	r7, r0
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	4631      	mov	r1, r6
 80077bc:	3b01      	subs	r3, #1
 80077be:	4658      	mov	r0, fp
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	f7ff fa67 	bl	8006c94 <quorem>
 80077c6:	4603      	mov	r3, r0
 80077c8:	3330      	adds	r3, #48	; 0x30
 80077ca:	9004      	str	r0, [sp, #16]
 80077cc:	4641      	mov	r1, r8
 80077ce:	4658      	mov	r0, fp
 80077d0:	9308      	str	r3, [sp, #32]
 80077d2:	f001 f835 	bl	8008840 <__mcmp>
 80077d6:	463a      	mov	r2, r7
 80077d8:	4681      	mov	r9, r0
 80077da:	4631      	mov	r1, r6
 80077dc:	4620      	mov	r0, r4
 80077de:	f001 f84b 	bl	8008878 <__mdiff>
 80077e2:	68c2      	ldr	r2, [r0, #12]
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	4605      	mov	r5, r0
 80077e8:	bb02      	cbnz	r2, 800782c <_dtoa_r+0xa7c>
 80077ea:	4601      	mov	r1, r0
 80077ec:	4658      	mov	r0, fp
 80077ee:	f001 f827 	bl	8008840 <__mcmp>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	4602      	mov	r2, r0
 80077f6:	4629      	mov	r1, r5
 80077f8:	4620      	mov	r0, r4
 80077fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80077fe:	f000 fd97 	bl	8008330 <_Bfree>
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007806:	9d01      	ldr	r5, [sp, #4]
 8007808:	ea43 0102 	orr.w	r1, r3, r2
 800780c:	9b06      	ldr	r3, [sp, #24]
 800780e:	430b      	orrs	r3, r1
 8007810:	9b08      	ldr	r3, [sp, #32]
 8007812:	d10d      	bne.n	8007830 <_dtoa_r+0xa80>
 8007814:	2b39      	cmp	r3, #57	; 0x39
 8007816:	d029      	beq.n	800786c <_dtoa_r+0xabc>
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	dd01      	ble.n	8007822 <_dtoa_r+0xa72>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	3331      	adds	r3, #49	; 0x31
 8007822:	9a02      	ldr	r2, [sp, #8]
 8007824:	7013      	strb	r3, [r2, #0]
 8007826:	e774      	b.n	8007712 <_dtoa_r+0x962>
 8007828:	4638      	mov	r0, r7
 800782a:	e7b9      	b.n	80077a0 <_dtoa_r+0x9f0>
 800782c:	2201      	movs	r2, #1
 800782e:	e7e2      	b.n	80077f6 <_dtoa_r+0xa46>
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	db06      	blt.n	8007844 <_dtoa_r+0xa94>
 8007836:	9905      	ldr	r1, [sp, #20]
 8007838:	ea41 0909 	orr.w	r9, r1, r9
 800783c:	9906      	ldr	r1, [sp, #24]
 800783e:	ea59 0101 	orrs.w	r1, r9, r1
 8007842:	d120      	bne.n	8007886 <_dtoa_r+0xad6>
 8007844:	2a00      	cmp	r2, #0
 8007846:	ddec      	ble.n	8007822 <_dtoa_r+0xa72>
 8007848:	4659      	mov	r1, fp
 800784a:	2201      	movs	r2, #1
 800784c:	4620      	mov	r0, r4
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f000 ff8a 	bl	8008768 <__lshift>
 8007854:	4631      	mov	r1, r6
 8007856:	4683      	mov	fp, r0
 8007858:	f000 fff2 	bl	8008840 <__mcmp>
 800785c:	2800      	cmp	r0, #0
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	dc02      	bgt.n	8007868 <_dtoa_r+0xab8>
 8007862:	d1de      	bne.n	8007822 <_dtoa_r+0xa72>
 8007864:	07da      	lsls	r2, r3, #31
 8007866:	d5dc      	bpl.n	8007822 <_dtoa_r+0xa72>
 8007868:	2b39      	cmp	r3, #57	; 0x39
 800786a:	d1d8      	bne.n	800781e <_dtoa_r+0xa6e>
 800786c:	9a02      	ldr	r2, [sp, #8]
 800786e:	2339      	movs	r3, #57	; 0x39
 8007870:	7013      	strb	r3, [r2, #0]
 8007872:	462b      	mov	r3, r5
 8007874:	461d      	mov	r5, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800787c:	2a39      	cmp	r2, #57	; 0x39
 800787e:	d050      	beq.n	8007922 <_dtoa_r+0xb72>
 8007880:	3201      	adds	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e745      	b.n	8007712 <_dtoa_r+0x962>
 8007886:	2a00      	cmp	r2, #0
 8007888:	dd03      	ble.n	8007892 <_dtoa_r+0xae2>
 800788a:	2b39      	cmp	r3, #57	; 0x39
 800788c:	d0ee      	beq.n	800786c <_dtoa_r+0xabc>
 800788e:	3301      	adds	r3, #1
 8007890:	e7c7      	b.n	8007822 <_dtoa_r+0xa72>
 8007892:	9a01      	ldr	r2, [sp, #4]
 8007894:	9907      	ldr	r1, [sp, #28]
 8007896:	f802 3c01 	strb.w	r3, [r2, #-1]
 800789a:	428a      	cmp	r2, r1
 800789c:	d02a      	beq.n	80078f4 <_dtoa_r+0xb44>
 800789e:	4659      	mov	r1, fp
 80078a0:	2300      	movs	r3, #0
 80078a2:	220a      	movs	r2, #10
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fd65 	bl	8008374 <__multadd>
 80078aa:	45b8      	cmp	r8, r7
 80078ac:	4683      	mov	fp, r0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	f04f 020a 	mov.w	r2, #10
 80078b6:	4641      	mov	r1, r8
 80078b8:	4620      	mov	r0, r4
 80078ba:	d107      	bne.n	80078cc <_dtoa_r+0xb1c>
 80078bc:	f000 fd5a 	bl	8008374 <__multadd>
 80078c0:	4680      	mov	r8, r0
 80078c2:	4607      	mov	r7, r0
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	3301      	adds	r3, #1
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	e775      	b.n	80077b8 <_dtoa_r+0xa08>
 80078cc:	f000 fd52 	bl	8008374 <__multadd>
 80078d0:	4639      	mov	r1, r7
 80078d2:	4680      	mov	r8, r0
 80078d4:	2300      	movs	r3, #0
 80078d6:	220a      	movs	r2, #10
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fd4b 	bl	8008374 <__multadd>
 80078de:	4607      	mov	r7, r0
 80078e0:	e7f0      	b.n	80078c4 <_dtoa_r+0xb14>
 80078e2:	f1b9 0f00 	cmp.w	r9, #0
 80078e6:	9a00      	ldr	r2, [sp, #0]
 80078e8:	bfcc      	ite	gt
 80078ea:	464d      	movgt	r5, r9
 80078ec:	2501      	movle	r5, #1
 80078ee:	4415      	add	r5, r2
 80078f0:	f04f 0800 	mov.w	r8, #0
 80078f4:	4659      	mov	r1, fp
 80078f6:	2201      	movs	r2, #1
 80078f8:	4620      	mov	r0, r4
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	f000 ff34 	bl	8008768 <__lshift>
 8007900:	4631      	mov	r1, r6
 8007902:	4683      	mov	fp, r0
 8007904:	f000 ff9c 	bl	8008840 <__mcmp>
 8007908:	2800      	cmp	r0, #0
 800790a:	dcb2      	bgt.n	8007872 <_dtoa_r+0xac2>
 800790c:	d102      	bne.n	8007914 <_dtoa_r+0xb64>
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	07db      	lsls	r3, r3, #31
 8007912:	d4ae      	bmi.n	8007872 <_dtoa_r+0xac2>
 8007914:	462b      	mov	r3, r5
 8007916:	461d      	mov	r5, r3
 8007918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800791c:	2a30      	cmp	r2, #48	; 0x30
 800791e:	d0fa      	beq.n	8007916 <_dtoa_r+0xb66>
 8007920:	e6f7      	b.n	8007712 <_dtoa_r+0x962>
 8007922:	9a00      	ldr	r2, [sp, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d1a5      	bne.n	8007874 <_dtoa_r+0xac4>
 8007928:	f10a 0a01 	add.w	sl, sl, #1
 800792c:	2331      	movs	r3, #49	; 0x31
 800792e:	e779      	b.n	8007824 <_dtoa_r+0xa74>
 8007930:	4b13      	ldr	r3, [pc, #76]	; (8007980 <_dtoa_r+0xbd0>)
 8007932:	f7ff baaf 	b.w	8006e94 <_dtoa_r+0xe4>
 8007936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f aa86 	bne.w	8006e4a <_dtoa_r+0x9a>
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <_dtoa_r+0xbd4>)
 8007940:	f7ff baa8 	b.w	8006e94 <_dtoa_r+0xe4>
 8007944:	f1b9 0f00 	cmp.w	r9, #0
 8007948:	dc03      	bgt.n	8007952 <_dtoa_r+0xba2>
 800794a:	9b05      	ldr	r3, [sp, #20]
 800794c:	2b02      	cmp	r3, #2
 800794e:	f73f aec9 	bgt.w	80076e4 <_dtoa_r+0x934>
 8007952:	9d00      	ldr	r5, [sp, #0]
 8007954:	4631      	mov	r1, r6
 8007956:	4658      	mov	r0, fp
 8007958:	f7ff f99c 	bl	8006c94 <quorem>
 800795c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007960:	f805 3b01 	strb.w	r3, [r5], #1
 8007964:	9a00      	ldr	r2, [sp, #0]
 8007966:	1aaa      	subs	r2, r5, r2
 8007968:	4591      	cmp	r9, r2
 800796a:	ddba      	ble.n	80078e2 <_dtoa_r+0xb32>
 800796c:	4659      	mov	r1, fp
 800796e:	2300      	movs	r3, #0
 8007970:	220a      	movs	r2, #10
 8007972:	4620      	mov	r0, r4
 8007974:	f000 fcfe 	bl	8008374 <__multadd>
 8007978:	4683      	mov	fp, r0
 800797a:	e7eb      	b.n	8007954 <_dtoa_r+0xba4>
 800797c:	08009ce4 	.word	0x08009ce4
 8007980:	08009ae4 	.word	0x08009ae4
 8007984:	08009c61 	.word	0x08009c61

08007988 <std>:
 8007988:	2300      	movs	r3, #0
 800798a:	b510      	push	{r4, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	e9c0 3300 	strd	r3, r3, [r0]
 8007992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007996:	6083      	str	r3, [r0, #8]
 8007998:	8181      	strh	r1, [r0, #12]
 800799a:	6643      	str	r3, [r0, #100]	; 0x64
 800799c:	81c2      	strh	r2, [r0, #14]
 800799e:	6183      	str	r3, [r0, #24]
 80079a0:	4619      	mov	r1, r3
 80079a2:	2208      	movs	r2, #8
 80079a4:	305c      	adds	r0, #92	; 0x5c
 80079a6:	f7fd fbef 	bl	8005188 <memset>
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <std+0x38>)
 80079ac:	6263      	str	r3, [r4, #36]	; 0x24
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <std+0x3c>)
 80079b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079b2:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <std+0x40>)
 80079b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <std+0x44>)
 80079b8:	6224      	str	r4, [r4, #32]
 80079ba:	6323      	str	r3, [r4, #48]	; 0x30
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	bf00      	nop
 80079c0:	08009339 	.word	0x08009339
 80079c4:	0800935b 	.word	0x0800935b
 80079c8:	08009393 	.word	0x08009393
 80079cc:	080093b7 	.word	0x080093b7

080079d0 <_cleanup_r>:
 80079d0:	4901      	ldr	r1, [pc, #4]	; (80079d8 <_cleanup_r+0x8>)
 80079d2:	f000 b8af 	b.w	8007b34 <_fwalk_reent>
 80079d6:	bf00      	nop
 80079d8:	080096e9 	.word	0x080096e9

080079dc <__sfmoreglue>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	1e4a      	subs	r2, r1, #1
 80079e0:	2568      	movs	r5, #104	; 0x68
 80079e2:	4355      	muls	r5, r2
 80079e4:	460e      	mov	r6, r1
 80079e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ea:	f001 f97b 	bl	8008ce4 <_malloc_r>
 80079ee:	4604      	mov	r4, r0
 80079f0:	b140      	cbz	r0, 8007a04 <__sfmoreglue+0x28>
 80079f2:	2100      	movs	r1, #0
 80079f4:	e9c0 1600 	strd	r1, r6, [r0]
 80079f8:	300c      	adds	r0, #12
 80079fa:	60a0      	str	r0, [r4, #8]
 80079fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a00:	f7fd fbc2 	bl	8005188 <memset>
 8007a04:	4620      	mov	r0, r4
 8007a06:	bd70      	pop	{r4, r5, r6, pc}

08007a08 <__sfp_lock_acquire>:
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <__sfp_lock_acquire+0x8>)
 8007a0a:	f000 bc26 	b.w	800825a <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	200003e4 	.word	0x200003e4

08007a14 <__sfp_lock_release>:
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <__sfp_lock_release+0x8>)
 8007a16:	f000 bc21 	b.w	800825c <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	200003e4 	.word	0x200003e4

08007a20 <__sinit_lock_acquire>:
 8007a20:	4801      	ldr	r0, [pc, #4]	; (8007a28 <__sinit_lock_acquire+0x8>)
 8007a22:	f000 bc1a 	b.w	800825a <__retarget_lock_acquire_recursive>
 8007a26:	bf00      	nop
 8007a28:	200003df 	.word	0x200003df

08007a2c <__sinit_lock_release>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	; (8007a34 <__sinit_lock_release+0x8>)
 8007a2e:	f000 bc15 	b.w	800825c <__retarget_lock_release_recursive>
 8007a32:	bf00      	nop
 8007a34:	200003df 	.word	0x200003df

08007a38 <__sinit>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	f7ff fff0 	bl	8007a20 <__sinit_lock_acquire>
 8007a40:	69a3      	ldr	r3, [r4, #24]
 8007a42:	b11b      	cbz	r3, 8007a4c <__sinit+0x14>
 8007a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a48:	f7ff bff0 	b.w	8007a2c <__sinit_lock_release>
 8007a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a50:	6523      	str	r3, [r4, #80]	; 0x50
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <__sinit+0x68>)
 8007a54:	4a13      	ldr	r2, [pc, #76]	; (8007aa4 <__sinit+0x6c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	bf04      	itt	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	61a3      	streq	r3, [r4, #24]
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f820 	bl	8007aa8 <__sfp>
 8007a68:	6060      	str	r0, [r4, #4]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f81c 	bl	8007aa8 <__sfp>
 8007a70:	60a0      	str	r0, [r4, #8]
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 f818 	bl	8007aa8 <__sfp>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	60e0      	str	r0, [r4, #12]
 8007a7c:	2104      	movs	r1, #4
 8007a7e:	6860      	ldr	r0, [r4, #4]
 8007a80:	f7ff ff82 	bl	8007988 <std>
 8007a84:	68a0      	ldr	r0, [r4, #8]
 8007a86:	2201      	movs	r2, #1
 8007a88:	2109      	movs	r1, #9
 8007a8a:	f7ff ff7d 	bl	8007988 <std>
 8007a8e:	68e0      	ldr	r0, [r4, #12]
 8007a90:	2202      	movs	r2, #2
 8007a92:	2112      	movs	r1, #18
 8007a94:	f7ff ff78 	bl	8007988 <std>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	61a3      	str	r3, [r4, #24]
 8007a9c:	e7d2      	b.n	8007a44 <__sinit+0xc>
 8007a9e:	bf00      	nop
 8007aa0:	08009ad0 	.word	0x08009ad0
 8007aa4:	080079d1 	.word	0x080079d1

08007aa8 <__sfp>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	4607      	mov	r7, r0
 8007aac:	f7ff ffac 	bl	8007a08 <__sfp_lock_acquire>
 8007ab0:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <__sfp+0x84>)
 8007ab2:	681e      	ldr	r6, [r3, #0]
 8007ab4:	69b3      	ldr	r3, [r6, #24]
 8007ab6:	b913      	cbnz	r3, 8007abe <__sfp+0x16>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff ffbd 	bl	8007a38 <__sinit>
 8007abe:	3648      	adds	r6, #72	; 0x48
 8007ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	d503      	bpl.n	8007ad0 <__sfp+0x28>
 8007ac8:	6833      	ldr	r3, [r6, #0]
 8007aca:	b30b      	cbz	r3, 8007b10 <__sfp+0x68>
 8007acc:	6836      	ldr	r6, [r6, #0]
 8007ace:	e7f7      	b.n	8007ac0 <__sfp+0x18>
 8007ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ad4:	b9d5      	cbnz	r5, 8007b0c <__sfp+0x64>
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <__sfp+0x88>)
 8007ad8:	60e3      	str	r3, [r4, #12]
 8007ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ade:	6665      	str	r5, [r4, #100]	; 0x64
 8007ae0:	f000 fbba 	bl	8008258 <__retarget_lock_init_recursive>
 8007ae4:	f7ff ff96 	bl	8007a14 <__sfp_lock_release>
 8007ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007af0:	6025      	str	r5, [r4, #0]
 8007af2:	61a5      	str	r5, [r4, #24]
 8007af4:	2208      	movs	r2, #8
 8007af6:	4629      	mov	r1, r5
 8007af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007afc:	f7fd fb44 	bl	8005188 <memset>
 8007b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b08:	4620      	mov	r0, r4
 8007b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b0c:	3468      	adds	r4, #104	; 0x68
 8007b0e:	e7d9      	b.n	8007ac4 <__sfp+0x1c>
 8007b10:	2104      	movs	r1, #4
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ff62 	bl	80079dc <__sfmoreglue>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	6030      	str	r0, [r6, #0]
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1d5      	bne.n	8007acc <__sfp+0x24>
 8007b20:	f7ff ff78 	bl	8007a14 <__sfp_lock_release>
 8007b24:	230c      	movs	r3, #12
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	e7ee      	b.n	8007b08 <__sfp+0x60>
 8007b2a:	bf00      	nop
 8007b2c:	08009ad0 	.word	0x08009ad0
 8007b30:	ffff0001 	.word	0xffff0001

08007b34 <_fwalk_reent>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	4606      	mov	r6, r0
 8007b3a:	4688      	mov	r8, r1
 8007b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b40:	2700      	movs	r7, #0
 8007b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b46:	f1b9 0901 	subs.w	r9, r9, #1
 8007b4a:	d505      	bpl.n	8007b58 <_fwalk_reent+0x24>
 8007b4c:	6824      	ldr	r4, [r4, #0]
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	d1f7      	bne.n	8007b42 <_fwalk_reent+0xe>
 8007b52:	4638      	mov	r0, r7
 8007b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b58:	89ab      	ldrh	r3, [r5, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d907      	bls.n	8007b6e <_fwalk_reent+0x3a>
 8007b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b62:	3301      	adds	r3, #1
 8007b64:	d003      	beq.n	8007b6e <_fwalk_reent+0x3a>
 8007b66:	4629      	mov	r1, r5
 8007b68:	4630      	mov	r0, r6
 8007b6a:	47c0      	blx	r8
 8007b6c:	4307      	orrs	r7, r0
 8007b6e:	3568      	adds	r5, #104	; 0x68
 8007b70:	e7e9      	b.n	8007b46 <_fwalk_reent+0x12>

08007b72 <rshift>:
 8007b72:	6903      	ldr	r3, [r0, #16]
 8007b74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b80:	f100 0414 	add.w	r4, r0, #20
 8007b84:	dd45      	ble.n	8007c12 <rshift+0xa0>
 8007b86:	f011 011f 	ands.w	r1, r1, #31
 8007b8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b92:	d10c      	bne.n	8007bae <rshift+0x3c>
 8007b94:	f100 0710 	add.w	r7, r0, #16
 8007b98:	4629      	mov	r1, r5
 8007b9a:	42b1      	cmp	r1, r6
 8007b9c:	d334      	bcc.n	8007c08 <rshift+0x96>
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	1eea      	subs	r2, r5, #3
 8007ba4:	4296      	cmp	r6, r2
 8007ba6:	bf38      	it	cc
 8007ba8:	2300      	movcc	r3, #0
 8007baa:	4423      	add	r3, r4
 8007bac:	e015      	b.n	8007bda <rshift+0x68>
 8007bae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bb2:	f1c1 0820 	rsb	r8, r1, #32
 8007bb6:	40cf      	lsrs	r7, r1
 8007bb8:	f105 0e04 	add.w	lr, r5, #4
 8007bbc:	46a1      	mov	r9, r4
 8007bbe:	4576      	cmp	r6, lr
 8007bc0:	46f4      	mov	ip, lr
 8007bc2:	d815      	bhi.n	8007bf0 <rshift+0x7e>
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	009a      	lsls	r2, r3, #2
 8007bc8:	3a04      	subs	r2, #4
 8007bca:	3501      	adds	r5, #1
 8007bcc:	42ae      	cmp	r6, r5
 8007bce:	bf38      	it	cc
 8007bd0:	2200      	movcc	r2, #0
 8007bd2:	18a3      	adds	r3, r4, r2
 8007bd4:	50a7      	str	r7, [r4, r2]
 8007bd6:	b107      	cbz	r7, 8007bda <rshift+0x68>
 8007bd8:	3304      	adds	r3, #4
 8007bda:	1b1a      	subs	r2, r3, r4
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007be2:	bf08      	it	eq
 8007be4:	2300      	moveq	r3, #0
 8007be6:	6102      	str	r2, [r0, #16]
 8007be8:	bf08      	it	eq
 8007bea:	6143      	streq	r3, [r0, #20]
 8007bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf0:	f8dc c000 	ldr.w	ip, [ip]
 8007bf4:	fa0c fc08 	lsl.w	ip, ip, r8
 8007bf8:	ea4c 0707 	orr.w	r7, ip, r7
 8007bfc:	f849 7b04 	str.w	r7, [r9], #4
 8007c00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c04:	40cf      	lsrs	r7, r1
 8007c06:	e7da      	b.n	8007bbe <rshift+0x4c>
 8007c08:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c10:	e7c3      	b.n	8007b9a <rshift+0x28>
 8007c12:	4623      	mov	r3, r4
 8007c14:	e7e1      	b.n	8007bda <rshift+0x68>

08007c16 <__hexdig_fun>:
 8007c16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d802      	bhi.n	8007c24 <__hexdig_fun+0xe>
 8007c1e:	3820      	subs	r0, #32
 8007c20:	b2c0      	uxtb	r0, r0
 8007c22:	4770      	bx	lr
 8007c24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d801      	bhi.n	8007c30 <__hexdig_fun+0x1a>
 8007c2c:	3847      	subs	r0, #71	; 0x47
 8007c2e:	e7f7      	b.n	8007c20 <__hexdig_fun+0xa>
 8007c30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	d801      	bhi.n	8007c3c <__hexdig_fun+0x26>
 8007c38:	3827      	subs	r0, #39	; 0x27
 8007c3a:	e7f1      	b.n	8007c20 <__hexdig_fun+0xa>
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4770      	bx	lr

08007c40 <__gethex>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	ed2d 8b02 	vpush	{d8}
 8007c48:	b089      	sub	sp, #36	; 0x24
 8007c4a:	ee08 0a10 	vmov	s16, r0
 8007c4e:	9304      	str	r3, [sp, #16]
 8007c50:	4bbc      	ldr	r3, [pc, #752]	; (8007f44 <__gethex+0x304>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	468b      	mov	fp, r1
 8007c5a:	4690      	mov	r8, r2
 8007c5c:	f7f8 fad8 	bl	8000210 <strlen>
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	f8db 2000 	ldr.w	r2, [fp]
 8007c66:	4403      	add	r3, r0
 8007c68:	4682      	mov	sl, r0
 8007c6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	1c93      	adds	r3, r2, #2
 8007c72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c7a:	32fe      	adds	r2, #254	; 0xfe
 8007c7c:	18d1      	adds	r1, r2, r3
 8007c7e:	461f      	mov	r7, r3
 8007c80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c84:	9100      	str	r1, [sp, #0]
 8007c86:	2830      	cmp	r0, #48	; 0x30
 8007c88:	d0f8      	beq.n	8007c7c <__gethex+0x3c>
 8007c8a:	f7ff ffc4 	bl	8007c16 <__hexdig_fun>
 8007c8e:	4604      	mov	r4, r0
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d13a      	bne.n	8007d0a <__gethex+0xca>
 8007c94:	9901      	ldr	r1, [sp, #4]
 8007c96:	4652      	mov	r2, sl
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7fe f935 	bl	8005f08 <strncmp>
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d168      	bne.n	8007d76 <__gethex+0x136>
 8007ca4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007ca8:	eb07 060a 	add.w	r6, r7, sl
 8007cac:	f7ff ffb3 	bl	8007c16 <__hexdig_fun>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d062      	beq.n	8007d7a <__gethex+0x13a>
 8007cb4:	4633      	mov	r3, r6
 8007cb6:	7818      	ldrb	r0, [r3, #0]
 8007cb8:	2830      	cmp	r0, #48	; 0x30
 8007cba:	461f      	mov	r7, r3
 8007cbc:	f103 0301 	add.w	r3, r3, #1
 8007cc0:	d0f9      	beq.n	8007cb6 <__gethex+0x76>
 8007cc2:	f7ff ffa8 	bl	8007c16 <__hexdig_fun>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	fab0 f480 	clz	r4, r0
 8007ccc:	0964      	lsrs	r4, r4, #5
 8007cce:	4635      	mov	r5, r6
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	7830      	ldrb	r0, [r6, #0]
 8007cda:	f7ff ff9c 	bl	8007c16 <__hexdig_fun>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d1f8      	bne.n	8007cd4 <__gethex+0x94>
 8007ce2:	9901      	ldr	r1, [sp, #4]
 8007ce4:	4652      	mov	r2, sl
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7fe f90e 	bl	8005f08 <strncmp>
 8007cec:	b980      	cbnz	r0, 8007d10 <__gethex+0xd0>
 8007cee:	b94d      	cbnz	r5, 8007d04 <__gethex+0xc4>
 8007cf0:	eb06 050a 	add.w	r5, r6, sl
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	4616      	mov	r6, r2
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	7830      	ldrb	r0, [r6, #0]
 8007cfc:	f7ff ff8b 	bl	8007c16 <__hexdig_fun>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d1f8      	bne.n	8007cf6 <__gethex+0xb6>
 8007d04:	1bad      	subs	r5, r5, r6
 8007d06:	00ad      	lsls	r5, r5, #2
 8007d08:	e004      	b.n	8007d14 <__gethex+0xd4>
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	4625      	mov	r5, r4
 8007d0e:	e7e0      	b.n	8007cd2 <__gethex+0x92>
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	d1f7      	bne.n	8007d04 <__gethex+0xc4>
 8007d14:	7833      	ldrb	r3, [r6, #0]
 8007d16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d1a:	2b50      	cmp	r3, #80	; 0x50
 8007d1c:	d13b      	bne.n	8007d96 <__gethex+0x156>
 8007d1e:	7873      	ldrb	r3, [r6, #1]
 8007d20:	2b2b      	cmp	r3, #43	; 0x2b
 8007d22:	d02c      	beq.n	8007d7e <__gethex+0x13e>
 8007d24:	2b2d      	cmp	r3, #45	; 0x2d
 8007d26:	d02e      	beq.n	8007d86 <__gethex+0x146>
 8007d28:	1c71      	adds	r1, r6, #1
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	7808      	ldrb	r0, [r1, #0]
 8007d30:	f7ff ff71 	bl	8007c16 <__hexdig_fun>
 8007d34:	1e43      	subs	r3, r0, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b18      	cmp	r3, #24
 8007d3a:	d82c      	bhi.n	8007d96 <__gethex+0x156>
 8007d3c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d44:	f7ff ff67 	bl	8007c16 <__hexdig_fun>
 8007d48:	1e43      	subs	r3, r0, #1
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b18      	cmp	r3, #24
 8007d4e:	d91d      	bls.n	8007d8c <__gethex+0x14c>
 8007d50:	f1b9 0f00 	cmp.w	r9, #0
 8007d54:	d000      	beq.n	8007d58 <__gethex+0x118>
 8007d56:	4252      	negs	r2, r2
 8007d58:	4415      	add	r5, r2
 8007d5a:	f8cb 1000 	str.w	r1, [fp]
 8007d5e:	b1e4      	cbz	r4, 8007d9a <__gethex+0x15a>
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf14      	ite	ne
 8007d66:	2700      	movne	r7, #0
 8007d68:	2706      	moveq	r7, #6
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	b009      	add	sp, #36	; 0x24
 8007d6e:	ecbd 8b02 	vpop	{d8}
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	463e      	mov	r6, r7
 8007d78:	4625      	mov	r5, r4
 8007d7a:	2401      	movs	r4, #1
 8007d7c:	e7ca      	b.n	8007d14 <__gethex+0xd4>
 8007d7e:	f04f 0900 	mov.w	r9, #0
 8007d82:	1cb1      	adds	r1, r6, #2
 8007d84:	e7d3      	b.n	8007d2e <__gethex+0xee>
 8007d86:	f04f 0901 	mov.w	r9, #1
 8007d8a:	e7fa      	b.n	8007d82 <__gethex+0x142>
 8007d8c:	230a      	movs	r3, #10
 8007d8e:	fb03 0202 	mla	r2, r3, r2, r0
 8007d92:	3a10      	subs	r2, #16
 8007d94:	e7d4      	b.n	8007d40 <__gethex+0x100>
 8007d96:	4631      	mov	r1, r6
 8007d98:	e7df      	b.n	8007d5a <__gethex+0x11a>
 8007d9a:	1bf3      	subs	r3, r6, r7
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	4621      	mov	r1, r4
 8007da0:	2b07      	cmp	r3, #7
 8007da2:	dc0b      	bgt.n	8007dbc <__gethex+0x17c>
 8007da4:	ee18 0a10 	vmov	r0, s16
 8007da8:	f000 fa82 	bl	80082b0 <_Balloc>
 8007dac:	4604      	mov	r4, r0
 8007dae:	b940      	cbnz	r0, 8007dc2 <__gethex+0x182>
 8007db0:	4b65      	ldr	r3, [pc, #404]	; (8007f48 <__gethex+0x308>)
 8007db2:	4602      	mov	r2, r0
 8007db4:	21de      	movs	r1, #222	; 0xde
 8007db6:	4865      	ldr	r0, [pc, #404]	; (8007f4c <__gethex+0x30c>)
 8007db8:	f001 fbe2 	bl	8009580 <__assert_func>
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	105b      	asrs	r3, r3, #1
 8007dc0:	e7ee      	b.n	8007da0 <__gethex+0x160>
 8007dc2:	f100 0914 	add.w	r9, r0, #20
 8007dc6:	f04f 0b00 	mov.w	fp, #0
 8007dca:	f1ca 0301 	rsb	r3, sl, #1
 8007dce:	f8cd 9008 	str.w	r9, [sp, #8]
 8007dd2:	f8cd b000 	str.w	fp, [sp]
 8007dd6:	9306      	str	r3, [sp, #24]
 8007dd8:	42b7      	cmp	r7, r6
 8007dda:	d340      	bcc.n	8007e5e <__gethex+0x21e>
 8007ddc:	9802      	ldr	r0, [sp, #8]
 8007dde:	9b00      	ldr	r3, [sp, #0]
 8007de0:	f840 3b04 	str.w	r3, [r0], #4
 8007de4:	eba0 0009 	sub.w	r0, r0, r9
 8007de8:	1080      	asrs	r0, r0, #2
 8007dea:	0146      	lsls	r6, r0, #5
 8007dec:	6120      	str	r0, [r4, #16]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fb54 	bl	800849c <__hi0bits>
 8007df4:	1a30      	subs	r0, r6, r0
 8007df6:	f8d8 6000 	ldr.w	r6, [r8]
 8007dfa:	42b0      	cmp	r0, r6
 8007dfc:	dd63      	ble.n	8007ec6 <__gethex+0x286>
 8007dfe:	1b87      	subs	r7, r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 feee 	bl	8008be4 <__any_on>
 8007e08:	4682      	mov	sl, r0
 8007e0a:	b1a8      	cbz	r0, 8007e38 <__gethex+0x1f8>
 8007e0c:	1e7b      	subs	r3, r7, #1
 8007e0e:	1159      	asrs	r1, r3, #5
 8007e10:	f003 021f 	and.w	r2, r3, #31
 8007e14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e18:	f04f 0a01 	mov.w	sl, #1
 8007e1c:	fa0a f202 	lsl.w	r2, sl, r2
 8007e20:	420a      	tst	r2, r1
 8007e22:	d009      	beq.n	8007e38 <__gethex+0x1f8>
 8007e24:	4553      	cmp	r3, sl
 8007e26:	dd05      	ble.n	8007e34 <__gethex+0x1f4>
 8007e28:	1eb9      	subs	r1, r7, #2
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 feda 	bl	8008be4 <__any_on>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d145      	bne.n	8007ec0 <__gethex+0x280>
 8007e34:	f04f 0a02 	mov.w	sl, #2
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff fe99 	bl	8007b72 <rshift>
 8007e40:	443d      	add	r5, r7
 8007e42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e46:	42ab      	cmp	r3, r5
 8007e48:	da4c      	bge.n	8007ee4 <__gethex+0x2a4>
 8007e4a:	ee18 0a10 	vmov	r0, s16
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f000 fa6e 	bl	8008330 <_Bfree>
 8007e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e56:	2300      	movs	r3, #0
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	27a3      	movs	r7, #163	; 0xa3
 8007e5c:	e785      	b.n	8007d6a <__gethex+0x12a>
 8007e5e:	1e73      	subs	r3, r6, #1
 8007e60:	9a05      	ldr	r2, [sp, #20]
 8007e62:	9303      	str	r3, [sp, #12]
 8007e64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d019      	beq.n	8007ea0 <__gethex+0x260>
 8007e6c:	f1bb 0f20 	cmp.w	fp, #32
 8007e70:	d107      	bne.n	8007e82 <__gethex+0x242>
 8007e72:	9b02      	ldr	r3, [sp, #8]
 8007e74:	9a00      	ldr	r2, [sp, #0]
 8007e76:	f843 2b04 	str.w	r2, [r3], #4
 8007e7a:	9302      	str	r3, [sp, #8]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	469b      	mov	fp, r3
 8007e82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e86:	f7ff fec6 	bl	8007c16 <__hexdig_fun>
 8007e8a:	9b00      	ldr	r3, [sp, #0]
 8007e8c:	f000 000f 	and.w	r0, r0, #15
 8007e90:	fa00 f00b 	lsl.w	r0, r0, fp
 8007e94:	4303      	orrs	r3, r0
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	f10b 0b04 	add.w	fp, fp, #4
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	e00d      	b.n	8007ebc <__gethex+0x27c>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	9a06      	ldr	r2, [sp, #24]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	42bb      	cmp	r3, r7
 8007ea8:	d3e0      	bcc.n	8007e6c <__gethex+0x22c>
 8007eaa:	4618      	mov	r0, r3
 8007eac:	9901      	ldr	r1, [sp, #4]
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	4652      	mov	r2, sl
 8007eb2:	f7fe f829 	bl	8005f08 <strncmp>
 8007eb6:	9b07      	ldr	r3, [sp, #28]
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1d7      	bne.n	8007e6c <__gethex+0x22c>
 8007ebc:	461e      	mov	r6, r3
 8007ebe:	e78b      	b.n	8007dd8 <__gethex+0x198>
 8007ec0:	f04f 0a03 	mov.w	sl, #3
 8007ec4:	e7b8      	b.n	8007e38 <__gethex+0x1f8>
 8007ec6:	da0a      	bge.n	8007ede <__gethex+0x29e>
 8007ec8:	1a37      	subs	r7, r6, r0
 8007eca:	4621      	mov	r1, r4
 8007ecc:	ee18 0a10 	vmov	r0, s16
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	f000 fc49 	bl	8008768 <__lshift>
 8007ed6:	1bed      	subs	r5, r5, r7
 8007ed8:	4604      	mov	r4, r0
 8007eda:	f100 0914 	add.w	r9, r0, #20
 8007ede:	f04f 0a00 	mov.w	sl, #0
 8007ee2:	e7ae      	b.n	8007e42 <__gethex+0x202>
 8007ee4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ee8:	42a8      	cmp	r0, r5
 8007eea:	dd72      	ble.n	8007fd2 <__gethex+0x392>
 8007eec:	1b45      	subs	r5, r0, r5
 8007eee:	42ae      	cmp	r6, r5
 8007ef0:	dc36      	bgt.n	8007f60 <__gethex+0x320>
 8007ef2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d02a      	beq.n	8007f50 <__gethex+0x310>
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d02c      	beq.n	8007f58 <__gethex+0x318>
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d115      	bne.n	8007f2e <__gethex+0x2ee>
 8007f02:	42ae      	cmp	r6, r5
 8007f04:	d113      	bne.n	8007f2e <__gethex+0x2ee>
 8007f06:	2e01      	cmp	r6, #1
 8007f08:	d10b      	bne.n	8007f22 <__gethex+0x2e2>
 8007f0a:	9a04      	ldr	r2, [sp, #16]
 8007f0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	2301      	movs	r3, #1
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	f8c9 3000 	str.w	r3, [r9]
 8007f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f1c:	2762      	movs	r7, #98	; 0x62
 8007f1e:	601c      	str	r4, [r3, #0]
 8007f20:	e723      	b.n	8007d6a <__gethex+0x12a>
 8007f22:	1e71      	subs	r1, r6, #1
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fe5d 	bl	8008be4 <__any_on>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d1ed      	bne.n	8007f0a <__gethex+0x2ca>
 8007f2e:	ee18 0a10 	vmov	r0, s16
 8007f32:	4621      	mov	r1, r4
 8007f34:	f000 f9fc 	bl	8008330 <_Bfree>
 8007f38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	2750      	movs	r7, #80	; 0x50
 8007f40:	e713      	b.n	8007d6a <__gethex+0x12a>
 8007f42:	bf00      	nop
 8007f44:	08009dc4 	.word	0x08009dc4
 8007f48:	08009ce4 	.word	0x08009ce4
 8007f4c:	08009d58 	.word	0x08009d58
 8007f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1eb      	bne.n	8007f2e <__gethex+0x2ee>
 8007f56:	e7d8      	b.n	8007f0a <__gethex+0x2ca>
 8007f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1d5      	bne.n	8007f0a <__gethex+0x2ca>
 8007f5e:	e7e6      	b.n	8007f2e <__gethex+0x2ee>
 8007f60:	1e6f      	subs	r7, r5, #1
 8007f62:	f1ba 0f00 	cmp.w	sl, #0
 8007f66:	d131      	bne.n	8007fcc <__gethex+0x38c>
 8007f68:	b127      	cbz	r7, 8007f74 <__gethex+0x334>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fe39 	bl	8008be4 <__any_on>
 8007f72:	4682      	mov	sl, r0
 8007f74:	117b      	asrs	r3, r7, #5
 8007f76:	2101      	movs	r1, #1
 8007f78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007f7c:	f007 071f 	and.w	r7, r7, #31
 8007f80:	fa01 f707 	lsl.w	r7, r1, r7
 8007f84:	421f      	tst	r7, r3
 8007f86:	4629      	mov	r1, r5
 8007f88:	4620      	mov	r0, r4
 8007f8a:	bf18      	it	ne
 8007f8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007f90:	1b76      	subs	r6, r6, r5
 8007f92:	f7ff fdee 	bl	8007b72 <rshift>
 8007f96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007f9a:	2702      	movs	r7, #2
 8007f9c:	f1ba 0f00 	cmp.w	sl, #0
 8007fa0:	d048      	beq.n	8008034 <__gethex+0x3f4>
 8007fa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d015      	beq.n	8007fd6 <__gethex+0x396>
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d017      	beq.n	8007fde <__gethex+0x39e>
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d109      	bne.n	8007fc6 <__gethex+0x386>
 8007fb2:	f01a 0f02 	tst.w	sl, #2
 8007fb6:	d006      	beq.n	8007fc6 <__gethex+0x386>
 8007fb8:	f8d9 0000 	ldr.w	r0, [r9]
 8007fbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8007fc0:	f01a 0f01 	tst.w	sl, #1
 8007fc4:	d10e      	bne.n	8007fe4 <__gethex+0x3a4>
 8007fc6:	f047 0710 	orr.w	r7, r7, #16
 8007fca:	e033      	b.n	8008034 <__gethex+0x3f4>
 8007fcc:	f04f 0a01 	mov.w	sl, #1
 8007fd0:	e7d0      	b.n	8007f74 <__gethex+0x334>
 8007fd2:	2701      	movs	r7, #1
 8007fd4:	e7e2      	b.n	8007f9c <__gethex+0x35c>
 8007fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fd8:	f1c3 0301 	rsb	r3, r3, #1
 8007fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8007fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <__gethex+0x386>
 8007fe4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fe8:	f104 0314 	add.w	r3, r4, #20
 8007fec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ff0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ff4:	f04f 0c00 	mov.w	ip, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008002:	d01c      	beq.n	800803e <__gethex+0x3fe>
 8008004:	3201      	adds	r2, #1
 8008006:	6002      	str	r2, [r0, #0]
 8008008:	2f02      	cmp	r7, #2
 800800a:	f104 0314 	add.w	r3, r4, #20
 800800e:	d13f      	bne.n	8008090 <__gethex+0x450>
 8008010:	f8d8 2000 	ldr.w	r2, [r8]
 8008014:	3a01      	subs	r2, #1
 8008016:	42b2      	cmp	r2, r6
 8008018:	d10a      	bne.n	8008030 <__gethex+0x3f0>
 800801a:	1171      	asrs	r1, r6, #5
 800801c:	2201      	movs	r2, #1
 800801e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008022:	f006 061f 	and.w	r6, r6, #31
 8008026:	fa02 f606 	lsl.w	r6, r2, r6
 800802a:	421e      	tst	r6, r3
 800802c:	bf18      	it	ne
 800802e:	4617      	movne	r7, r2
 8008030:	f047 0720 	orr.w	r7, r7, #32
 8008034:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008036:	601c      	str	r4, [r3, #0]
 8008038:	9b04      	ldr	r3, [sp, #16]
 800803a:	601d      	str	r5, [r3, #0]
 800803c:	e695      	b.n	8007d6a <__gethex+0x12a>
 800803e:	4299      	cmp	r1, r3
 8008040:	f843 cc04 	str.w	ip, [r3, #-4]
 8008044:	d8d8      	bhi.n	8007ff8 <__gethex+0x3b8>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	459b      	cmp	fp, r3
 800804a:	db19      	blt.n	8008080 <__gethex+0x440>
 800804c:	6861      	ldr	r1, [r4, #4]
 800804e:	ee18 0a10 	vmov	r0, s16
 8008052:	3101      	adds	r1, #1
 8008054:	f000 f92c 	bl	80082b0 <_Balloc>
 8008058:	4681      	mov	r9, r0
 800805a:	b918      	cbnz	r0, 8008064 <__gethex+0x424>
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <__gethex+0x488>)
 800805e:	4602      	mov	r2, r0
 8008060:	2184      	movs	r1, #132	; 0x84
 8008062:	e6a8      	b.n	8007db6 <__gethex+0x176>
 8008064:	6922      	ldr	r2, [r4, #16]
 8008066:	3202      	adds	r2, #2
 8008068:	f104 010c 	add.w	r1, r4, #12
 800806c:	0092      	lsls	r2, r2, #2
 800806e:	300c      	adds	r0, #12
 8008070:	f000 f910 	bl	8008294 <memcpy>
 8008074:	4621      	mov	r1, r4
 8008076:	ee18 0a10 	vmov	r0, s16
 800807a:	f000 f959 	bl	8008330 <_Bfree>
 800807e:	464c      	mov	r4, r9
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008088:	6122      	str	r2, [r4, #16]
 800808a:	2201      	movs	r2, #1
 800808c:	615a      	str	r2, [r3, #20]
 800808e:	e7bb      	b.n	8008008 <__gethex+0x3c8>
 8008090:	6922      	ldr	r2, [r4, #16]
 8008092:	455a      	cmp	r2, fp
 8008094:	dd0b      	ble.n	80080ae <__gethex+0x46e>
 8008096:	2101      	movs	r1, #1
 8008098:	4620      	mov	r0, r4
 800809a:	f7ff fd6a 	bl	8007b72 <rshift>
 800809e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080a2:	3501      	adds	r5, #1
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	f6ff aed0 	blt.w	8007e4a <__gethex+0x20a>
 80080aa:	2701      	movs	r7, #1
 80080ac:	e7c0      	b.n	8008030 <__gethex+0x3f0>
 80080ae:	f016 061f 	ands.w	r6, r6, #31
 80080b2:	d0fa      	beq.n	80080aa <__gethex+0x46a>
 80080b4:	449a      	add	sl, r3
 80080b6:	f1c6 0620 	rsb	r6, r6, #32
 80080ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80080be:	f000 f9ed 	bl	800849c <__hi0bits>
 80080c2:	42b0      	cmp	r0, r6
 80080c4:	dbe7      	blt.n	8008096 <__gethex+0x456>
 80080c6:	e7f0      	b.n	80080aa <__gethex+0x46a>
 80080c8:	08009ce4 	.word	0x08009ce4

080080cc <L_shift>:
 80080cc:	f1c2 0208 	rsb	r2, r2, #8
 80080d0:	0092      	lsls	r2, r2, #2
 80080d2:	b570      	push	{r4, r5, r6, lr}
 80080d4:	f1c2 0620 	rsb	r6, r2, #32
 80080d8:	6843      	ldr	r3, [r0, #4]
 80080da:	6804      	ldr	r4, [r0, #0]
 80080dc:	fa03 f506 	lsl.w	r5, r3, r6
 80080e0:	432c      	orrs	r4, r5
 80080e2:	40d3      	lsrs	r3, r2
 80080e4:	6004      	str	r4, [r0, #0]
 80080e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80080ea:	4288      	cmp	r0, r1
 80080ec:	d3f4      	bcc.n	80080d8 <L_shift+0xc>
 80080ee:	bd70      	pop	{r4, r5, r6, pc}

080080f0 <__match>:
 80080f0:	b530      	push	{r4, r5, lr}
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	3301      	adds	r3, #1
 80080f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fa:	b914      	cbnz	r4, 8008102 <__match+0x12>
 80080fc:	6003      	str	r3, [r0, #0]
 80080fe:	2001      	movs	r0, #1
 8008100:	bd30      	pop	{r4, r5, pc}
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800810a:	2d19      	cmp	r5, #25
 800810c:	bf98      	it	ls
 800810e:	3220      	addls	r2, #32
 8008110:	42a2      	cmp	r2, r4
 8008112:	d0f0      	beq.n	80080f6 <__match+0x6>
 8008114:	2000      	movs	r0, #0
 8008116:	e7f3      	b.n	8008100 <__match+0x10>

08008118 <__hexnan>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	680b      	ldr	r3, [r1, #0]
 800811e:	6801      	ldr	r1, [r0, #0]
 8008120:	115e      	asrs	r6, r3, #5
 8008122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008126:	f013 031f 	ands.w	r3, r3, #31
 800812a:	b087      	sub	sp, #28
 800812c:	bf18      	it	ne
 800812e:	3604      	addne	r6, #4
 8008130:	2500      	movs	r5, #0
 8008132:	1f37      	subs	r7, r6, #4
 8008134:	4682      	mov	sl, r0
 8008136:	4690      	mov	r8, r2
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f846 5c04 	str.w	r5, [r6, #-4]
 800813e:	46b9      	mov	r9, r7
 8008140:	463c      	mov	r4, r7
 8008142:	9502      	str	r5, [sp, #8]
 8008144:	46ab      	mov	fp, r5
 8008146:	784a      	ldrb	r2, [r1, #1]
 8008148:	1c4b      	adds	r3, r1, #1
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	b342      	cbz	r2, 80081a0 <__hexnan+0x88>
 800814e:	4610      	mov	r0, r2
 8008150:	9105      	str	r1, [sp, #20]
 8008152:	9204      	str	r2, [sp, #16]
 8008154:	f7ff fd5f 	bl	8007c16 <__hexdig_fun>
 8008158:	2800      	cmp	r0, #0
 800815a:	d14f      	bne.n	80081fc <__hexnan+0xe4>
 800815c:	9a04      	ldr	r2, [sp, #16]
 800815e:	9905      	ldr	r1, [sp, #20]
 8008160:	2a20      	cmp	r2, #32
 8008162:	d818      	bhi.n	8008196 <__hexnan+0x7e>
 8008164:	9b02      	ldr	r3, [sp, #8]
 8008166:	459b      	cmp	fp, r3
 8008168:	dd13      	ble.n	8008192 <__hexnan+0x7a>
 800816a:	454c      	cmp	r4, r9
 800816c:	d206      	bcs.n	800817c <__hexnan+0x64>
 800816e:	2d07      	cmp	r5, #7
 8008170:	dc04      	bgt.n	800817c <__hexnan+0x64>
 8008172:	462a      	mov	r2, r5
 8008174:	4649      	mov	r1, r9
 8008176:	4620      	mov	r0, r4
 8008178:	f7ff ffa8 	bl	80080cc <L_shift>
 800817c:	4544      	cmp	r4, r8
 800817e:	d950      	bls.n	8008222 <__hexnan+0x10a>
 8008180:	2300      	movs	r3, #0
 8008182:	f1a4 0904 	sub.w	r9, r4, #4
 8008186:	f844 3c04 	str.w	r3, [r4, #-4]
 800818a:	f8cd b008 	str.w	fp, [sp, #8]
 800818e:	464c      	mov	r4, r9
 8008190:	461d      	mov	r5, r3
 8008192:	9903      	ldr	r1, [sp, #12]
 8008194:	e7d7      	b.n	8008146 <__hexnan+0x2e>
 8008196:	2a29      	cmp	r2, #41	; 0x29
 8008198:	d156      	bne.n	8008248 <__hexnan+0x130>
 800819a:	3102      	adds	r1, #2
 800819c:	f8ca 1000 	str.w	r1, [sl]
 80081a0:	f1bb 0f00 	cmp.w	fp, #0
 80081a4:	d050      	beq.n	8008248 <__hexnan+0x130>
 80081a6:	454c      	cmp	r4, r9
 80081a8:	d206      	bcs.n	80081b8 <__hexnan+0xa0>
 80081aa:	2d07      	cmp	r5, #7
 80081ac:	dc04      	bgt.n	80081b8 <__hexnan+0xa0>
 80081ae:	462a      	mov	r2, r5
 80081b0:	4649      	mov	r1, r9
 80081b2:	4620      	mov	r0, r4
 80081b4:	f7ff ff8a 	bl	80080cc <L_shift>
 80081b8:	4544      	cmp	r4, r8
 80081ba:	d934      	bls.n	8008226 <__hexnan+0x10e>
 80081bc:	f1a8 0204 	sub.w	r2, r8, #4
 80081c0:	4623      	mov	r3, r4
 80081c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80081c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80081ca:	429f      	cmp	r7, r3
 80081cc:	d2f9      	bcs.n	80081c2 <__hexnan+0xaa>
 80081ce:	1b3b      	subs	r3, r7, r4
 80081d0:	f023 0303 	bic.w	r3, r3, #3
 80081d4:	3304      	adds	r3, #4
 80081d6:	3401      	adds	r4, #1
 80081d8:	3e03      	subs	r6, #3
 80081da:	42b4      	cmp	r4, r6
 80081dc:	bf88      	it	hi
 80081de:	2304      	movhi	r3, #4
 80081e0:	4443      	add	r3, r8
 80081e2:	2200      	movs	r2, #0
 80081e4:	f843 2b04 	str.w	r2, [r3], #4
 80081e8:	429f      	cmp	r7, r3
 80081ea:	d2fb      	bcs.n	80081e4 <__hexnan+0xcc>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	b91b      	cbnz	r3, 80081f8 <__hexnan+0xe0>
 80081f0:	4547      	cmp	r7, r8
 80081f2:	d127      	bne.n	8008244 <__hexnan+0x12c>
 80081f4:	2301      	movs	r3, #1
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	2005      	movs	r0, #5
 80081fa:	e026      	b.n	800824a <__hexnan+0x132>
 80081fc:	3501      	adds	r5, #1
 80081fe:	2d08      	cmp	r5, #8
 8008200:	f10b 0b01 	add.w	fp, fp, #1
 8008204:	dd06      	ble.n	8008214 <__hexnan+0xfc>
 8008206:	4544      	cmp	r4, r8
 8008208:	d9c3      	bls.n	8008192 <__hexnan+0x7a>
 800820a:	2300      	movs	r3, #0
 800820c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008210:	2501      	movs	r5, #1
 8008212:	3c04      	subs	r4, #4
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	f000 000f 	and.w	r0, r0, #15
 800821a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800821e:	6022      	str	r2, [r4, #0]
 8008220:	e7b7      	b.n	8008192 <__hexnan+0x7a>
 8008222:	2508      	movs	r5, #8
 8008224:	e7b5      	b.n	8008192 <__hexnan+0x7a>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0df      	beq.n	80081ec <__hexnan+0xd4>
 800822c:	f04f 32ff 	mov.w	r2, #4294967295
 8008230:	f1c3 0320 	rsb	r3, r3, #32
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800823c:	401a      	ands	r2, r3
 800823e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008242:	e7d3      	b.n	80081ec <__hexnan+0xd4>
 8008244:	3f04      	subs	r7, #4
 8008246:	e7d1      	b.n	80081ec <__hexnan+0xd4>
 8008248:	2004      	movs	r0, #4
 800824a:	b007      	add	sp, #28
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008250 <_localeconv_r>:
 8008250:	4800      	ldr	r0, [pc, #0]	; (8008254 <_localeconv_r+0x4>)
 8008252:	4770      	bx	lr
 8008254:	20000164 	.word	0x20000164

08008258 <__retarget_lock_init_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_acquire_recursive>:
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_release_recursive>:
 800825c:	4770      	bx	lr
	...

08008260 <malloc>:
 8008260:	4b02      	ldr	r3, [pc, #8]	; (800826c <malloc+0xc>)
 8008262:	4601      	mov	r1, r0
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	f000 bd3d 	b.w	8008ce4 <_malloc_r>
 800826a:	bf00      	nop
 800826c:	2000000c 	.word	0x2000000c

08008270 <__ascii_mbtowc>:
 8008270:	b082      	sub	sp, #8
 8008272:	b901      	cbnz	r1, 8008276 <__ascii_mbtowc+0x6>
 8008274:	a901      	add	r1, sp, #4
 8008276:	b142      	cbz	r2, 800828a <__ascii_mbtowc+0x1a>
 8008278:	b14b      	cbz	r3, 800828e <__ascii_mbtowc+0x1e>
 800827a:	7813      	ldrb	r3, [r2, #0]
 800827c:	600b      	str	r3, [r1, #0]
 800827e:	7812      	ldrb	r2, [r2, #0]
 8008280:	1e10      	subs	r0, r2, #0
 8008282:	bf18      	it	ne
 8008284:	2001      	movne	r0, #1
 8008286:	b002      	add	sp, #8
 8008288:	4770      	bx	lr
 800828a:	4610      	mov	r0, r2
 800828c:	e7fb      	b.n	8008286 <__ascii_mbtowc+0x16>
 800828e:	f06f 0001 	mvn.w	r0, #1
 8008292:	e7f8      	b.n	8008286 <__ascii_mbtowc+0x16>

08008294 <memcpy>:
 8008294:	440a      	add	r2, r1
 8008296:	4291      	cmp	r1, r2
 8008298:	f100 33ff 	add.w	r3, r0, #4294967295
 800829c:	d100      	bne.n	80082a0 <memcpy+0xc>
 800829e:	4770      	bx	lr
 80082a0:	b510      	push	{r4, lr}
 80082a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082aa:	4291      	cmp	r1, r2
 80082ac:	d1f9      	bne.n	80082a2 <memcpy+0xe>
 80082ae:	bd10      	pop	{r4, pc}

080082b0 <_Balloc>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082b4:	4604      	mov	r4, r0
 80082b6:	460d      	mov	r5, r1
 80082b8:	b976      	cbnz	r6, 80082d8 <_Balloc+0x28>
 80082ba:	2010      	movs	r0, #16
 80082bc:	f7ff ffd0 	bl	8008260 <malloc>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6260      	str	r0, [r4, #36]	; 0x24
 80082c4:	b920      	cbnz	r0, 80082d0 <_Balloc+0x20>
 80082c6:	4b18      	ldr	r3, [pc, #96]	; (8008328 <_Balloc+0x78>)
 80082c8:	4818      	ldr	r0, [pc, #96]	; (800832c <_Balloc+0x7c>)
 80082ca:	2166      	movs	r1, #102	; 0x66
 80082cc:	f001 f958 	bl	8009580 <__assert_func>
 80082d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d4:	6006      	str	r6, [r0, #0]
 80082d6:	60c6      	str	r6, [r0, #12]
 80082d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082da:	68f3      	ldr	r3, [r6, #12]
 80082dc:	b183      	cbz	r3, 8008300 <_Balloc+0x50>
 80082de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082e6:	b9b8      	cbnz	r0, 8008318 <_Balloc+0x68>
 80082e8:	2101      	movs	r1, #1
 80082ea:	fa01 f605 	lsl.w	r6, r1, r5
 80082ee:	1d72      	adds	r2, r6, #5
 80082f0:	0092      	lsls	r2, r2, #2
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 fc97 	bl	8008c26 <_calloc_r>
 80082f8:	b160      	cbz	r0, 8008314 <_Balloc+0x64>
 80082fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082fe:	e00e      	b.n	800831e <_Balloc+0x6e>
 8008300:	2221      	movs	r2, #33	; 0x21
 8008302:	2104      	movs	r1, #4
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fc8e 	bl	8008c26 <_calloc_r>
 800830a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830c:	60f0      	str	r0, [r6, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e4      	bne.n	80082de <_Balloc+0x2e>
 8008314:	2000      	movs	r0, #0
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	6802      	ldr	r2, [r0, #0]
 800831a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800831e:	2300      	movs	r3, #0
 8008320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008324:	e7f7      	b.n	8008316 <_Balloc+0x66>
 8008326:	bf00      	nop
 8008328:	08009c6e 	.word	0x08009c6e
 800832c:	08009dd8 	.word	0x08009dd8

08008330 <_Bfree>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	b976      	cbnz	r6, 8008358 <_Bfree+0x28>
 800833a:	2010      	movs	r0, #16
 800833c:	f7ff ff90 	bl	8008260 <malloc>
 8008340:	4602      	mov	r2, r0
 8008342:	6268      	str	r0, [r5, #36]	; 0x24
 8008344:	b920      	cbnz	r0, 8008350 <_Bfree+0x20>
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <_Bfree+0x3c>)
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <_Bfree+0x40>)
 800834a:	218a      	movs	r1, #138	; 0x8a
 800834c:	f001 f918 	bl	8009580 <__assert_func>
 8008350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008354:	6006      	str	r6, [r0, #0]
 8008356:	60c6      	str	r6, [r0, #12]
 8008358:	b13c      	cbz	r4, 800836a <_Bfree+0x3a>
 800835a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800835c:	6862      	ldr	r2, [r4, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008364:	6021      	str	r1, [r4, #0]
 8008366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	08009c6e 	.word	0x08009c6e
 8008370:	08009dd8 	.word	0x08009dd8

08008374 <__multadd>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	690e      	ldr	r6, [r1, #16]
 800837a:	4607      	mov	r7, r0
 800837c:	4698      	mov	r8, r3
 800837e:	460c      	mov	r4, r1
 8008380:	f101 0014 	add.w	r0, r1, #20
 8008384:	2300      	movs	r3, #0
 8008386:	6805      	ldr	r5, [r0, #0]
 8008388:	b2a9      	uxth	r1, r5
 800838a:	fb02 8101 	mla	r1, r2, r1, r8
 800838e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008392:	0c2d      	lsrs	r5, r5, #16
 8008394:	fb02 c505 	mla	r5, r2, r5, ip
 8008398:	b289      	uxth	r1, r1
 800839a:	3301      	adds	r3, #1
 800839c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80083a0:	429e      	cmp	r6, r3
 80083a2:	f840 1b04 	str.w	r1, [r0], #4
 80083a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80083aa:	dcec      	bgt.n	8008386 <__multadd+0x12>
 80083ac:	f1b8 0f00 	cmp.w	r8, #0
 80083b0:	d022      	beq.n	80083f8 <__multadd+0x84>
 80083b2:	68a3      	ldr	r3, [r4, #8]
 80083b4:	42b3      	cmp	r3, r6
 80083b6:	dc19      	bgt.n	80083ec <__multadd+0x78>
 80083b8:	6861      	ldr	r1, [r4, #4]
 80083ba:	4638      	mov	r0, r7
 80083bc:	3101      	adds	r1, #1
 80083be:	f7ff ff77 	bl	80082b0 <_Balloc>
 80083c2:	4605      	mov	r5, r0
 80083c4:	b928      	cbnz	r0, 80083d2 <__multadd+0x5e>
 80083c6:	4602      	mov	r2, r0
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <__multadd+0x8c>)
 80083ca:	480e      	ldr	r0, [pc, #56]	; (8008404 <__multadd+0x90>)
 80083cc:	21b5      	movs	r1, #181	; 0xb5
 80083ce:	f001 f8d7 	bl	8009580 <__assert_func>
 80083d2:	6922      	ldr	r2, [r4, #16]
 80083d4:	3202      	adds	r2, #2
 80083d6:	f104 010c 	add.w	r1, r4, #12
 80083da:	0092      	lsls	r2, r2, #2
 80083dc:	300c      	adds	r0, #12
 80083de:	f7ff ff59 	bl	8008294 <memcpy>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4638      	mov	r0, r7
 80083e6:	f7ff ffa3 	bl	8008330 <_Bfree>
 80083ea:	462c      	mov	r4, r5
 80083ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80083f0:	3601      	adds	r6, #1
 80083f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80083f6:	6126      	str	r6, [r4, #16]
 80083f8:	4620      	mov	r0, r4
 80083fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fe:	bf00      	nop
 8008400:	08009ce4 	.word	0x08009ce4
 8008404:	08009dd8 	.word	0x08009dd8

08008408 <__s2b>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	4615      	mov	r5, r2
 8008410:	461f      	mov	r7, r3
 8008412:	2209      	movs	r2, #9
 8008414:	3308      	adds	r3, #8
 8008416:	4606      	mov	r6, r0
 8008418:	fb93 f3f2 	sdiv	r3, r3, r2
 800841c:	2100      	movs	r1, #0
 800841e:	2201      	movs	r2, #1
 8008420:	429a      	cmp	r2, r3
 8008422:	db09      	blt.n	8008438 <__s2b+0x30>
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ff43 	bl	80082b0 <_Balloc>
 800842a:	b940      	cbnz	r0, 800843e <__s2b+0x36>
 800842c:	4602      	mov	r2, r0
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <__s2b+0x8c>)
 8008430:	4819      	ldr	r0, [pc, #100]	; (8008498 <__s2b+0x90>)
 8008432:	21ce      	movs	r1, #206	; 0xce
 8008434:	f001 f8a4 	bl	8009580 <__assert_func>
 8008438:	0052      	lsls	r2, r2, #1
 800843a:	3101      	adds	r1, #1
 800843c:	e7f0      	b.n	8008420 <__s2b+0x18>
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	6143      	str	r3, [r0, #20]
 8008442:	2d09      	cmp	r5, #9
 8008444:	f04f 0301 	mov.w	r3, #1
 8008448:	6103      	str	r3, [r0, #16]
 800844a:	dd16      	ble.n	800847a <__s2b+0x72>
 800844c:	f104 0909 	add.w	r9, r4, #9
 8008450:	46c8      	mov	r8, r9
 8008452:	442c      	add	r4, r5
 8008454:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008458:	4601      	mov	r1, r0
 800845a:	3b30      	subs	r3, #48	; 0x30
 800845c:	220a      	movs	r2, #10
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ff88 	bl	8008374 <__multadd>
 8008464:	45a0      	cmp	r8, r4
 8008466:	d1f5      	bne.n	8008454 <__s2b+0x4c>
 8008468:	f1a5 0408 	sub.w	r4, r5, #8
 800846c:	444c      	add	r4, r9
 800846e:	1b2d      	subs	r5, r5, r4
 8008470:	1963      	adds	r3, r4, r5
 8008472:	42bb      	cmp	r3, r7
 8008474:	db04      	blt.n	8008480 <__s2b+0x78>
 8008476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847a:	340a      	adds	r4, #10
 800847c:	2509      	movs	r5, #9
 800847e:	e7f6      	b.n	800846e <__s2b+0x66>
 8008480:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008484:	4601      	mov	r1, r0
 8008486:	3b30      	subs	r3, #48	; 0x30
 8008488:	220a      	movs	r2, #10
 800848a:	4630      	mov	r0, r6
 800848c:	f7ff ff72 	bl	8008374 <__multadd>
 8008490:	e7ee      	b.n	8008470 <__s2b+0x68>
 8008492:	bf00      	nop
 8008494:	08009ce4 	.word	0x08009ce4
 8008498:	08009dd8 	.word	0x08009dd8

0800849c <__hi0bits>:
 800849c:	0c03      	lsrs	r3, r0, #16
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	b9d3      	cbnz	r3, 80084d8 <__hi0bits+0x3c>
 80084a2:	0400      	lsls	r0, r0, #16
 80084a4:	2310      	movs	r3, #16
 80084a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084aa:	bf04      	itt	eq
 80084ac:	0200      	lsleq	r0, r0, #8
 80084ae:	3308      	addeq	r3, #8
 80084b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084b4:	bf04      	itt	eq
 80084b6:	0100      	lsleq	r0, r0, #4
 80084b8:	3304      	addeq	r3, #4
 80084ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084be:	bf04      	itt	eq
 80084c0:	0080      	lsleq	r0, r0, #2
 80084c2:	3302      	addeq	r3, #2
 80084c4:	2800      	cmp	r0, #0
 80084c6:	db05      	blt.n	80084d4 <__hi0bits+0x38>
 80084c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084cc:	f103 0301 	add.w	r3, r3, #1
 80084d0:	bf08      	it	eq
 80084d2:	2320      	moveq	r3, #32
 80084d4:	4618      	mov	r0, r3
 80084d6:	4770      	bx	lr
 80084d8:	2300      	movs	r3, #0
 80084da:	e7e4      	b.n	80084a6 <__hi0bits+0xa>

080084dc <__lo0bits>:
 80084dc:	6803      	ldr	r3, [r0, #0]
 80084de:	f013 0207 	ands.w	r2, r3, #7
 80084e2:	4601      	mov	r1, r0
 80084e4:	d00b      	beq.n	80084fe <__lo0bits+0x22>
 80084e6:	07da      	lsls	r2, r3, #31
 80084e8:	d424      	bmi.n	8008534 <__lo0bits+0x58>
 80084ea:	0798      	lsls	r0, r3, #30
 80084ec:	bf49      	itett	mi
 80084ee:	085b      	lsrmi	r3, r3, #1
 80084f0:	089b      	lsrpl	r3, r3, #2
 80084f2:	2001      	movmi	r0, #1
 80084f4:	600b      	strmi	r3, [r1, #0]
 80084f6:	bf5c      	itt	pl
 80084f8:	600b      	strpl	r3, [r1, #0]
 80084fa:	2002      	movpl	r0, #2
 80084fc:	4770      	bx	lr
 80084fe:	b298      	uxth	r0, r3
 8008500:	b9b0      	cbnz	r0, 8008530 <__lo0bits+0x54>
 8008502:	0c1b      	lsrs	r3, r3, #16
 8008504:	2010      	movs	r0, #16
 8008506:	f013 0fff 	tst.w	r3, #255	; 0xff
 800850a:	bf04      	itt	eq
 800850c:	0a1b      	lsreq	r3, r3, #8
 800850e:	3008      	addeq	r0, #8
 8008510:	071a      	lsls	r2, r3, #28
 8008512:	bf04      	itt	eq
 8008514:	091b      	lsreq	r3, r3, #4
 8008516:	3004      	addeq	r0, #4
 8008518:	079a      	lsls	r2, r3, #30
 800851a:	bf04      	itt	eq
 800851c:	089b      	lsreq	r3, r3, #2
 800851e:	3002      	addeq	r0, #2
 8008520:	07da      	lsls	r2, r3, #31
 8008522:	d403      	bmi.n	800852c <__lo0bits+0x50>
 8008524:	085b      	lsrs	r3, r3, #1
 8008526:	f100 0001 	add.w	r0, r0, #1
 800852a:	d005      	beq.n	8008538 <__lo0bits+0x5c>
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	4770      	bx	lr
 8008530:	4610      	mov	r0, r2
 8008532:	e7e8      	b.n	8008506 <__lo0bits+0x2a>
 8008534:	2000      	movs	r0, #0
 8008536:	4770      	bx	lr
 8008538:	2020      	movs	r0, #32
 800853a:	4770      	bx	lr

0800853c <__i2b>:
 800853c:	b510      	push	{r4, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	2101      	movs	r1, #1
 8008542:	f7ff feb5 	bl	80082b0 <_Balloc>
 8008546:	4602      	mov	r2, r0
 8008548:	b928      	cbnz	r0, 8008556 <__i2b+0x1a>
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <__i2b+0x24>)
 800854c:	4805      	ldr	r0, [pc, #20]	; (8008564 <__i2b+0x28>)
 800854e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008552:	f001 f815 	bl	8009580 <__assert_func>
 8008556:	2301      	movs	r3, #1
 8008558:	6144      	str	r4, [r0, #20]
 800855a:	6103      	str	r3, [r0, #16]
 800855c:	bd10      	pop	{r4, pc}
 800855e:	bf00      	nop
 8008560:	08009ce4 	.word	0x08009ce4
 8008564:	08009dd8 	.word	0x08009dd8

08008568 <__multiply>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	4614      	mov	r4, r2
 800856e:	690a      	ldr	r2, [r1, #16]
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	429a      	cmp	r2, r3
 8008574:	bfb8      	it	lt
 8008576:	460b      	movlt	r3, r1
 8008578:	460d      	mov	r5, r1
 800857a:	bfbc      	itt	lt
 800857c:	4625      	movlt	r5, r4
 800857e:	461c      	movlt	r4, r3
 8008580:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008584:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008588:	68ab      	ldr	r3, [r5, #8]
 800858a:	6869      	ldr	r1, [r5, #4]
 800858c:	eb0a 0709 	add.w	r7, sl, r9
 8008590:	42bb      	cmp	r3, r7
 8008592:	b085      	sub	sp, #20
 8008594:	bfb8      	it	lt
 8008596:	3101      	addlt	r1, #1
 8008598:	f7ff fe8a 	bl	80082b0 <_Balloc>
 800859c:	b930      	cbnz	r0, 80085ac <__multiply+0x44>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b42      	ldr	r3, [pc, #264]	; (80086ac <__multiply+0x144>)
 80085a2:	4843      	ldr	r0, [pc, #268]	; (80086b0 <__multiply+0x148>)
 80085a4:	f240 115d 	movw	r1, #349	; 0x15d
 80085a8:	f000 ffea 	bl	8009580 <__assert_func>
 80085ac:	f100 0614 	add.w	r6, r0, #20
 80085b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80085b4:	4633      	mov	r3, r6
 80085b6:	2200      	movs	r2, #0
 80085b8:	4543      	cmp	r3, r8
 80085ba:	d31e      	bcc.n	80085fa <__multiply+0x92>
 80085bc:	f105 0c14 	add.w	ip, r5, #20
 80085c0:	f104 0314 	add.w	r3, r4, #20
 80085c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80085c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80085cc:	9202      	str	r2, [sp, #8]
 80085ce:	ebac 0205 	sub.w	r2, ip, r5
 80085d2:	3a15      	subs	r2, #21
 80085d4:	f022 0203 	bic.w	r2, r2, #3
 80085d8:	3204      	adds	r2, #4
 80085da:	f105 0115 	add.w	r1, r5, #21
 80085de:	458c      	cmp	ip, r1
 80085e0:	bf38      	it	cc
 80085e2:	2204      	movcc	r2, #4
 80085e4:	9201      	str	r2, [sp, #4]
 80085e6:	9a02      	ldr	r2, [sp, #8]
 80085e8:	9303      	str	r3, [sp, #12]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d808      	bhi.n	8008600 <__multiply+0x98>
 80085ee:	2f00      	cmp	r7, #0
 80085f0:	dc55      	bgt.n	800869e <__multiply+0x136>
 80085f2:	6107      	str	r7, [r0, #16]
 80085f4:	b005      	add	sp, #20
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	f843 2b04 	str.w	r2, [r3], #4
 80085fe:	e7db      	b.n	80085b8 <__multiply+0x50>
 8008600:	f8b3 a000 	ldrh.w	sl, [r3]
 8008604:	f1ba 0f00 	cmp.w	sl, #0
 8008608:	d020      	beq.n	800864c <__multiply+0xe4>
 800860a:	f105 0e14 	add.w	lr, r5, #20
 800860e:	46b1      	mov	r9, r6
 8008610:	2200      	movs	r2, #0
 8008612:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008616:	f8d9 b000 	ldr.w	fp, [r9]
 800861a:	b2a1      	uxth	r1, r4
 800861c:	fa1f fb8b 	uxth.w	fp, fp
 8008620:	fb0a b101 	mla	r1, sl, r1, fp
 8008624:	4411      	add	r1, r2
 8008626:	f8d9 2000 	ldr.w	r2, [r9]
 800862a:	0c24      	lsrs	r4, r4, #16
 800862c:	0c12      	lsrs	r2, r2, #16
 800862e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008632:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008636:	b289      	uxth	r1, r1
 8008638:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800863c:	45f4      	cmp	ip, lr
 800863e:	f849 1b04 	str.w	r1, [r9], #4
 8008642:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008646:	d8e4      	bhi.n	8008612 <__multiply+0xaa>
 8008648:	9901      	ldr	r1, [sp, #4]
 800864a:	5072      	str	r2, [r6, r1]
 800864c:	9a03      	ldr	r2, [sp, #12]
 800864e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008652:	3304      	adds	r3, #4
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	d01f      	beq.n	800869a <__multiply+0x132>
 800865a:	6834      	ldr	r4, [r6, #0]
 800865c:	f105 0114 	add.w	r1, r5, #20
 8008660:	46b6      	mov	lr, r6
 8008662:	f04f 0a00 	mov.w	sl, #0
 8008666:	880a      	ldrh	r2, [r1, #0]
 8008668:	f8be b002 	ldrh.w	fp, [lr, #2]
 800866c:	fb09 b202 	mla	r2, r9, r2, fp
 8008670:	4492      	add	sl, r2
 8008672:	b2a4      	uxth	r4, r4
 8008674:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008678:	f84e 4b04 	str.w	r4, [lr], #4
 800867c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008680:	f8be 2000 	ldrh.w	r2, [lr]
 8008684:	0c24      	lsrs	r4, r4, #16
 8008686:	fb09 2404 	mla	r4, r9, r4, r2
 800868a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800868e:	458c      	cmp	ip, r1
 8008690:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008694:	d8e7      	bhi.n	8008666 <__multiply+0xfe>
 8008696:	9a01      	ldr	r2, [sp, #4]
 8008698:	50b4      	str	r4, [r6, r2]
 800869a:	3604      	adds	r6, #4
 800869c:	e7a3      	b.n	80085e6 <__multiply+0x7e>
 800869e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1a5      	bne.n	80085f2 <__multiply+0x8a>
 80086a6:	3f01      	subs	r7, #1
 80086a8:	e7a1      	b.n	80085ee <__multiply+0x86>
 80086aa:	bf00      	nop
 80086ac:	08009ce4 	.word	0x08009ce4
 80086b0:	08009dd8 	.word	0x08009dd8

080086b4 <__pow5mult>:
 80086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	4615      	mov	r5, r2
 80086ba:	f012 0203 	ands.w	r2, r2, #3
 80086be:	4606      	mov	r6, r0
 80086c0:	460f      	mov	r7, r1
 80086c2:	d007      	beq.n	80086d4 <__pow5mult+0x20>
 80086c4:	4c25      	ldr	r4, [pc, #148]	; (800875c <__pow5mult+0xa8>)
 80086c6:	3a01      	subs	r2, #1
 80086c8:	2300      	movs	r3, #0
 80086ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086ce:	f7ff fe51 	bl	8008374 <__multadd>
 80086d2:	4607      	mov	r7, r0
 80086d4:	10ad      	asrs	r5, r5, #2
 80086d6:	d03d      	beq.n	8008754 <__pow5mult+0xa0>
 80086d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086da:	b97c      	cbnz	r4, 80086fc <__pow5mult+0x48>
 80086dc:	2010      	movs	r0, #16
 80086de:	f7ff fdbf 	bl	8008260 <malloc>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6270      	str	r0, [r6, #36]	; 0x24
 80086e6:	b928      	cbnz	r0, 80086f4 <__pow5mult+0x40>
 80086e8:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <__pow5mult+0xac>)
 80086ea:	481e      	ldr	r0, [pc, #120]	; (8008764 <__pow5mult+0xb0>)
 80086ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086f0:	f000 ff46 	bl	8009580 <__assert_func>
 80086f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086f8:	6004      	str	r4, [r0, #0]
 80086fa:	60c4      	str	r4, [r0, #12]
 80086fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008704:	b94c      	cbnz	r4, 800871a <__pow5mult+0x66>
 8008706:	f240 2171 	movw	r1, #625	; 0x271
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ff16 	bl	800853c <__i2b>
 8008710:	2300      	movs	r3, #0
 8008712:	f8c8 0008 	str.w	r0, [r8, #8]
 8008716:	4604      	mov	r4, r0
 8008718:	6003      	str	r3, [r0, #0]
 800871a:	f04f 0900 	mov.w	r9, #0
 800871e:	07eb      	lsls	r3, r5, #31
 8008720:	d50a      	bpl.n	8008738 <__pow5mult+0x84>
 8008722:	4639      	mov	r1, r7
 8008724:	4622      	mov	r2, r4
 8008726:	4630      	mov	r0, r6
 8008728:	f7ff ff1e 	bl	8008568 <__multiply>
 800872c:	4639      	mov	r1, r7
 800872e:	4680      	mov	r8, r0
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff fdfd 	bl	8008330 <_Bfree>
 8008736:	4647      	mov	r7, r8
 8008738:	106d      	asrs	r5, r5, #1
 800873a:	d00b      	beq.n	8008754 <__pow5mult+0xa0>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	b938      	cbnz	r0, 8008750 <__pow5mult+0x9c>
 8008740:	4622      	mov	r2, r4
 8008742:	4621      	mov	r1, r4
 8008744:	4630      	mov	r0, r6
 8008746:	f7ff ff0f 	bl	8008568 <__multiply>
 800874a:	6020      	str	r0, [r4, #0]
 800874c:	f8c0 9000 	str.w	r9, [r0]
 8008750:	4604      	mov	r4, r0
 8008752:	e7e4      	b.n	800871e <__pow5mult+0x6a>
 8008754:	4638      	mov	r0, r7
 8008756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875a:	bf00      	nop
 800875c:	08009f28 	.word	0x08009f28
 8008760:	08009c6e 	.word	0x08009c6e
 8008764:	08009dd8 	.word	0x08009dd8

08008768 <__lshift>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	460c      	mov	r4, r1
 800876e:	6849      	ldr	r1, [r1, #4]
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008776:	68a3      	ldr	r3, [r4, #8]
 8008778:	4607      	mov	r7, r0
 800877a:	4691      	mov	r9, r2
 800877c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008780:	f108 0601 	add.w	r6, r8, #1
 8008784:	42b3      	cmp	r3, r6
 8008786:	db0b      	blt.n	80087a0 <__lshift+0x38>
 8008788:	4638      	mov	r0, r7
 800878a:	f7ff fd91 	bl	80082b0 <_Balloc>
 800878e:	4605      	mov	r5, r0
 8008790:	b948      	cbnz	r0, 80087a6 <__lshift+0x3e>
 8008792:	4602      	mov	r2, r0
 8008794:	4b28      	ldr	r3, [pc, #160]	; (8008838 <__lshift+0xd0>)
 8008796:	4829      	ldr	r0, [pc, #164]	; (800883c <__lshift+0xd4>)
 8008798:	f240 11d9 	movw	r1, #473	; 0x1d9
 800879c:	f000 fef0 	bl	8009580 <__assert_func>
 80087a0:	3101      	adds	r1, #1
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	e7ee      	b.n	8008784 <__lshift+0x1c>
 80087a6:	2300      	movs	r3, #0
 80087a8:	f100 0114 	add.w	r1, r0, #20
 80087ac:	f100 0210 	add.w	r2, r0, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	4553      	cmp	r3, sl
 80087b4:	db33      	blt.n	800881e <__lshift+0xb6>
 80087b6:	6920      	ldr	r0, [r4, #16]
 80087b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087bc:	f104 0314 	add.w	r3, r4, #20
 80087c0:	f019 091f 	ands.w	r9, r9, #31
 80087c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087cc:	d02b      	beq.n	8008826 <__lshift+0xbe>
 80087ce:	f1c9 0e20 	rsb	lr, r9, #32
 80087d2:	468a      	mov	sl, r1
 80087d4:	2200      	movs	r2, #0
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	fa00 f009 	lsl.w	r0, r0, r9
 80087dc:	4302      	orrs	r2, r0
 80087de:	f84a 2b04 	str.w	r2, [sl], #4
 80087e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e6:	459c      	cmp	ip, r3
 80087e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80087ec:	d8f3      	bhi.n	80087d6 <__lshift+0x6e>
 80087ee:	ebac 0304 	sub.w	r3, ip, r4
 80087f2:	3b15      	subs	r3, #21
 80087f4:	f023 0303 	bic.w	r3, r3, #3
 80087f8:	3304      	adds	r3, #4
 80087fa:	f104 0015 	add.w	r0, r4, #21
 80087fe:	4584      	cmp	ip, r0
 8008800:	bf38      	it	cc
 8008802:	2304      	movcc	r3, #4
 8008804:	50ca      	str	r2, [r1, r3]
 8008806:	b10a      	cbz	r2, 800880c <__lshift+0xa4>
 8008808:	f108 0602 	add.w	r6, r8, #2
 800880c:	3e01      	subs	r6, #1
 800880e:	4638      	mov	r0, r7
 8008810:	612e      	str	r6, [r5, #16]
 8008812:	4621      	mov	r1, r4
 8008814:	f7ff fd8c 	bl	8008330 <_Bfree>
 8008818:	4628      	mov	r0, r5
 800881a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008822:	3301      	adds	r3, #1
 8008824:	e7c5      	b.n	80087b2 <__lshift+0x4a>
 8008826:	3904      	subs	r1, #4
 8008828:	f853 2b04 	ldr.w	r2, [r3], #4
 800882c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008830:	459c      	cmp	ip, r3
 8008832:	d8f9      	bhi.n	8008828 <__lshift+0xc0>
 8008834:	e7ea      	b.n	800880c <__lshift+0xa4>
 8008836:	bf00      	nop
 8008838:	08009ce4 	.word	0x08009ce4
 800883c:	08009dd8 	.word	0x08009dd8

08008840 <__mcmp>:
 8008840:	b530      	push	{r4, r5, lr}
 8008842:	6902      	ldr	r2, [r0, #16]
 8008844:	690c      	ldr	r4, [r1, #16]
 8008846:	1b12      	subs	r2, r2, r4
 8008848:	d10e      	bne.n	8008868 <__mcmp+0x28>
 800884a:	f100 0314 	add.w	r3, r0, #20
 800884e:	3114      	adds	r1, #20
 8008850:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008854:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008858:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800885c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008860:	42a5      	cmp	r5, r4
 8008862:	d003      	beq.n	800886c <__mcmp+0x2c>
 8008864:	d305      	bcc.n	8008872 <__mcmp+0x32>
 8008866:	2201      	movs	r2, #1
 8008868:	4610      	mov	r0, r2
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	4283      	cmp	r3, r0
 800886e:	d3f3      	bcc.n	8008858 <__mcmp+0x18>
 8008870:	e7fa      	b.n	8008868 <__mcmp+0x28>
 8008872:	f04f 32ff 	mov.w	r2, #4294967295
 8008876:	e7f7      	b.n	8008868 <__mcmp+0x28>

08008878 <__mdiff>:
 8008878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	460c      	mov	r4, r1
 800887e:	4606      	mov	r6, r0
 8008880:	4611      	mov	r1, r2
 8008882:	4620      	mov	r0, r4
 8008884:	4617      	mov	r7, r2
 8008886:	f7ff ffdb 	bl	8008840 <__mcmp>
 800888a:	1e05      	subs	r5, r0, #0
 800888c:	d110      	bne.n	80088b0 <__mdiff+0x38>
 800888e:	4629      	mov	r1, r5
 8008890:	4630      	mov	r0, r6
 8008892:	f7ff fd0d 	bl	80082b0 <_Balloc>
 8008896:	b930      	cbnz	r0, 80088a6 <__mdiff+0x2e>
 8008898:	4b39      	ldr	r3, [pc, #228]	; (8008980 <__mdiff+0x108>)
 800889a:	4602      	mov	r2, r0
 800889c:	f240 2132 	movw	r1, #562	; 0x232
 80088a0:	4838      	ldr	r0, [pc, #224]	; (8008984 <__mdiff+0x10c>)
 80088a2:	f000 fe6d 	bl	8009580 <__assert_func>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	bfa4      	itt	ge
 80088b2:	463b      	movge	r3, r7
 80088b4:	4627      	movge	r7, r4
 80088b6:	4630      	mov	r0, r6
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	bfa6      	itte	ge
 80088bc:	461c      	movge	r4, r3
 80088be:	2500      	movge	r5, #0
 80088c0:	2501      	movlt	r5, #1
 80088c2:	f7ff fcf5 	bl	80082b0 <_Balloc>
 80088c6:	b920      	cbnz	r0, 80088d2 <__mdiff+0x5a>
 80088c8:	4b2d      	ldr	r3, [pc, #180]	; (8008980 <__mdiff+0x108>)
 80088ca:	4602      	mov	r2, r0
 80088cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088d0:	e7e6      	b.n	80088a0 <__mdiff+0x28>
 80088d2:	693e      	ldr	r6, [r7, #16]
 80088d4:	60c5      	str	r5, [r0, #12]
 80088d6:	6925      	ldr	r5, [r4, #16]
 80088d8:	f107 0114 	add.w	r1, r7, #20
 80088dc:	f104 0914 	add.w	r9, r4, #20
 80088e0:	f100 0e14 	add.w	lr, r0, #20
 80088e4:	f107 0210 	add.w	r2, r7, #16
 80088e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80088ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80088f0:	46f2      	mov	sl, lr
 80088f2:	2700      	movs	r7, #0
 80088f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80088f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088fc:	fa1f f883 	uxth.w	r8, r3
 8008900:	fa17 f78b 	uxtah	r7, r7, fp
 8008904:	0c1b      	lsrs	r3, r3, #16
 8008906:	eba7 0808 	sub.w	r8, r7, r8
 800890a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800890e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008912:	fa1f f888 	uxth.w	r8, r8
 8008916:	141f      	asrs	r7, r3, #16
 8008918:	454d      	cmp	r5, r9
 800891a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800891e:	f84a 3b04 	str.w	r3, [sl], #4
 8008922:	d8e7      	bhi.n	80088f4 <__mdiff+0x7c>
 8008924:	1b2b      	subs	r3, r5, r4
 8008926:	3b15      	subs	r3, #21
 8008928:	f023 0303 	bic.w	r3, r3, #3
 800892c:	3304      	adds	r3, #4
 800892e:	3415      	adds	r4, #21
 8008930:	42a5      	cmp	r5, r4
 8008932:	bf38      	it	cc
 8008934:	2304      	movcc	r3, #4
 8008936:	4419      	add	r1, r3
 8008938:	4473      	add	r3, lr
 800893a:	469e      	mov	lr, r3
 800893c:	460d      	mov	r5, r1
 800893e:	4565      	cmp	r5, ip
 8008940:	d30e      	bcc.n	8008960 <__mdiff+0xe8>
 8008942:	f10c 0203 	add.w	r2, ip, #3
 8008946:	1a52      	subs	r2, r2, r1
 8008948:	f022 0203 	bic.w	r2, r2, #3
 800894c:	3903      	subs	r1, #3
 800894e:	458c      	cmp	ip, r1
 8008950:	bf38      	it	cc
 8008952:	2200      	movcc	r2, #0
 8008954:	441a      	add	r2, r3
 8008956:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800895a:	b17b      	cbz	r3, 800897c <__mdiff+0x104>
 800895c:	6106      	str	r6, [r0, #16]
 800895e:	e7a5      	b.n	80088ac <__mdiff+0x34>
 8008960:	f855 8b04 	ldr.w	r8, [r5], #4
 8008964:	fa17 f488 	uxtah	r4, r7, r8
 8008968:	1422      	asrs	r2, r4, #16
 800896a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800896e:	b2a4      	uxth	r4, r4
 8008970:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008974:	f84e 4b04 	str.w	r4, [lr], #4
 8008978:	1417      	asrs	r7, r2, #16
 800897a:	e7e0      	b.n	800893e <__mdiff+0xc6>
 800897c:	3e01      	subs	r6, #1
 800897e:	e7ea      	b.n	8008956 <__mdiff+0xde>
 8008980:	08009ce4 	.word	0x08009ce4
 8008984:	08009dd8 	.word	0x08009dd8

08008988 <__ulp>:
 8008988:	b082      	sub	sp, #8
 800898a:	ed8d 0b00 	vstr	d0, [sp]
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	4912      	ldr	r1, [pc, #72]	; (80089dc <__ulp+0x54>)
 8008992:	4019      	ands	r1, r3
 8008994:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008998:	2900      	cmp	r1, #0
 800899a:	dd05      	ble.n	80089a8 <__ulp+0x20>
 800899c:	2200      	movs	r2, #0
 800899e:	460b      	mov	r3, r1
 80089a0:	ec43 2b10 	vmov	d0, r2, r3
 80089a4:	b002      	add	sp, #8
 80089a6:	4770      	bx	lr
 80089a8:	4249      	negs	r1, r1
 80089aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80089ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 80089b2:	f04f 0200 	mov.w	r2, #0
 80089b6:	f04f 0300 	mov.w	r3, #0
 80089ba:	da04      	bge.n	80089c6 <__ulp+0x3e>
 80089bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089c0:	fa41 f300 	asr.w	r3, r1, r0
 80089c4:	e7ec      	b.n	80089a0 <__ulp+0x18>
 80089c6:	f1a0 0114 	sub.w	r1, r0, #20
 80089ca:	291e      	cmp	r1, #30
 80089cc:	bfda      	itte	le
 80089ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80089d2:	fa20 f101 	lsrle.w	r1, r0, r1
 80089d6:	2101      	movgt	r1, #1
 80089d8:	460a      	mov	r2, r1
 80089da:	e7e1      	b.n	80089a0 <__ulp+0x18>
 80089dc:	7ff00000 	.word	0x7ff00000

080089e0 <__b2d>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	6905      	ldr	r5, [r0, #16]
 80089e4:	f100 0714 	add.w	r7, r0, #20
 80089e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80089ec:	1f2e      	subs	r6, r5, #4
 80089ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff fd52 	bl	800849c <__hi0bits>
 80089f8:	f1c0 0320 	rsb	r3, r0, #32
 80089fc:	280a      	cmp	r0, #10
 80089fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008a7c <__b2d+0x9c>
 8008a02:	600b      	str	r3, [r1, #0]
 8008a04:	dc14      	bgt.n	8008a30 <__b2d+0x50>
 8008a06:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a0a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008a0e:	42b7      	cmp	r7, r6
 8008a10:	ea41 030c 	orr.w	r3, r1, ip
 8008a14:	bf34      	ite	cc
 8008a16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a1a:	2100      	movcs	r1, #0
 8008a1c:	3015      	adds	r0, #21
 8008a1e:	fa04 f000 	lsl.w	r0, r4, r0
 8008a22:	fa21 f10e 	lsr.w	r1, r1, lr
 8008a26:	ea40 0201 	orr.w	r2, r0, r1
 8008a2a:	ec43 2b10 	vmov	d0, r2, r3
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	42b7      	cmp	r7, r6
 8008a32:	bf3a      	itte	cc
 8008a34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a38:	f1a5 0608 	subcc.w	r6, r5, #8
 8008a3c:	2100      	movcs	r1, #0
 8008a3e:	380b      	subs	r0, #11
 8008a40:	d017      	beq.n	8008a72 <__b2d+0x92>
 8008a42:	f1c0 0c20 	rsb	ip, r0, #32
 8008a46:	fa04 f500 	lsl.w	r5, r4, r0
 8008a4a:	42be      	cmp	r6, r7
 8008a4c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008a50:	ea45 0504 	orr.w	r5, r5, r4
 8008a54:	bf8c      	ite	hi
 8008a56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008a5a:	2400      	movls	r4, #0
 8008a5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008a60:	fa01 f000 	lsl.w	r0, r1, r0
 8008a64:	fa24 f40c 	lsr.w	r4, r4, ip
 8008a68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a6c:	ea40 0204 	orr.w	r2, r0, r4
 8008a70:	e7db      	b.n	8008a2a <__b2d+0x4a>
 8008a72:	ea44 030c 	orr.w	r3, r4, ip
 8008a76:	460a      	mov	r2, r1
 8008a78:	e7d7      	b.n	8008a2a <__b2d+0x4a>
 8008a7a:	bf00      	nop
 8008a7c:	3ff00000 	.word	0x3ff00000

08008a80 <__d2b>:
 8008a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a84:	4689      	mov	r9, r1
 8008a86:	2101      	movs	r1, #1
 8008a88:	ec57 6b10 	vmov	r6, r7, d0
 8008a8c:	4690      	mov	r8, r2
 8008a8e:	f7ff fc0f 	bl	80082b0 <_Balloc>
 8008a92:	4604      	mov	r4, r0
 8008a94:	b930      	cbnz	r0, 8008aa4 <__d2b+0x24>
 8008a96:	4602      	mov	r2, r0
 8008a98:	4b25      	ldr	r3, [pc, #148]	; (8008b30 <__d2b+0xb0>)
 8008a9a:	4826      	ldr	r0, [pc, #152]	; (8008b34 <__d2b+0xb4>)
 8008a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8008aa0:	f000 fd6e 	bl	8009580 <__assert_func>
 8008aa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008aac:	bb35      	cbnz	r5, 8008afc <__d2b+0x7c>
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	d028      	beq.n	8008b06 <__d2b+0x86>
 8008ab4:	4668      	mov	r0, sp
 8008ab6:	9600      	str	r6, [sp, #0]
 8008ab8:	f7ff fd10 	bl	80084dc <__lo0bits>
 8008abc:	9900      	ldr	r1, [sp, #0]
 8008abe:	b300      	cbz	r0, 8008b02 <__d2b+0x82>
 8008ac0:	9a01      	ldr	r2, [sp, #4]
 8008ac2:	f1c0 0320 	rsb	r3, r0, #32
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	430b      	orrs	r3, r1
 8008acc:	40c2      	lsrs	r2, r0
 8008ace:	6163      	str	r3, [r4, #20]
 8008ad0:	9201      	str	r2, [sp, #4]
 8008ad2:	9b01      	ldr	r3, [sp, #4]
 8008ad4:	61a3      	str	r3, [r4, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bf14      	ite	ne
 8008ada:	2202      	movne	r2, #2
 8008adc:	2201      	moveq	r2, #1
 8008ade:	6122      	str	r2, [r4, #16]
 8008ae0:	b1d5      	cbz	r5, 8008b18 <__d2b+0x98>
 8008ae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ae6:	4405      	add	r5, r0
 8008ae8:	f8c9 5000 	str.w	r5, [r9]
 8008aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008af0:	f8c8 0000 	str.w	r0, [r8]
 8008af4:	4620      	mov	r0, r4
 8008af6:	b003      	add	sp, #12
 8008af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b00:	e7d5      	b.n	8008aae <__d2b+0x2e>
 8008b02:	6161      	str	r1, [r4, #20]
 8008b04:	e7e5      	b.n	8008ad2 <__d2b+0x52>
 8008b06:	a801      	add	r0, sp, #4
 8008b08:	f7ff fce8 	bl	80084dc <__lo0bits>
 8008b0c:	9b01      	ldr	r3, [sp, #4]
 8008b0e:	6163      	str	r3, [r4, #20]
 8008b10:	2201      	movs	r2, #1
 8008b12:	6122      	str	r2, [r4, #16]
 8008b14:	3020      	adds	r0, #32
 8008b16:	e7e3      	b.n	8008ae0 <__d2b+0x60>
 8008b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b20:	f8c9 0000 	str.w	r0, [r9]
 8008b24:	6918      	ldr	r0, [r3, #16]
 8008b26:	f7ff fcb9 	bl	800849c <__hi0bits>
 8008b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b2e:	e7df      	b.n	8008af0 <__d2b+0x70>
 8008b30:	08009ce4 	.word	0x08009ce4
 8008b34:	08009dd8 	.word	0x08009dd8

08008b38 <__ratio>:
 8008b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	4688      	mov	r8, r1
 8008b3e:	4669      	mov	r1, sp
 8008b40:	4681      	mov	r9, r0
 8008b42:	f7ff ff4d 	bl	80089e0 <__b2d>
 8008b46:	a901      	add	r1, sp, #4
 8008b48:	4640      	mov	r0, r8
 8008b4a:	ec55 4b10 	vmov	r4, r5, d0
 8008b4e:	f7ff ff47 	bl	80089e0 <__b2d>
 8008b52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b5a:	eba3 0c02 	sub.w	ip, r3, r2
 8008b5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b62:	1a9b      	subs	r3, r3, r2
 8008b64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b68:	ec51 0b10 	vmov	r0, r1, d0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfd6      	itet	le
 8008b70:	460a      	movle	r2, r1
 8008b72:	462a      	movgt	r2, r5
 8008b74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b78:	468b      	mov	fp, r1
 8008b7a:	462f      	mov	r7, r5
 8008b7c:	bfd4      	ite	le
 8008b7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b86:	4620      	mov	r0, r4
 8008b88:	ee10 2a10 	vmov	r2, s0
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	4639      	mov	r1, r7
 8008b90:	f7f7 fe7c 	bl	800088c <__aeabi_ddiv>
 8008b94:	ec41 0b10 	vmov	d0, r0, r1
 8008b98:	b003      	add	sp, #12
 8008b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b9e <__copybits>:
 8008b9e:	3901      	subs	r1, #1
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	1149      	asrs	r1, r1, #5
 8008ba4:	6914      	ldr	r4, [r2, #16]
 8008ba6:	3101      	adds	r1, #1
 8008ba8:	f102 0314 	add.w	r3, r2, #20
 8008bac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bb4:	1f05      	subs	r5, r0, #4
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	d30c      	bcc.n	8008bd4 <__copybits+0x36>
 8008bba:	1aa3      	subs	r3, r4, r2
 8008bbc:	3b11      	subs	r3, #17
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	3211      	adds	r2, #17
 8008bc4:	42a2      	cmp	r2, r4
 8008bc6:	bf88      	it	hi
 8008bc8:	2300      	movhi	r3, #0
 8008bca:	4418      	add	r0, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4288      	cmp	r0, r1
 8008bd0:	d305      	bcc.n	8008bde <__copybits+0x40>
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8008bd8:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bdc:	e7eb      	b.n	8008bb6 <__copybits+0x18>
 8008bde:	f840 3b04 	str.w	r3, [r0], #4
 8008be2:	e7f4      	b.n	8008bce <__copybits+0x30>

08008be4 <__any_on>:
 8008be4:	f100 0214 	add.w	r2, r0, #20
 8008be8:	6900      	ldr	r0, [r0, #16]
 8008bea:	114b      	asrs	r3, r1, #5
 8008bec:	4298      	cmp	r0, r3
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	db11      	blt.n	8008c16 <__any_on+0x32>
 8008bf2:	dd0a      	ble.n	8008c0a <__any_on+0x26>
 8008bf4:	f011 011f 	ands.w	r1, r1, #31
 8008bf8:	d007      	beq.n	8008c0a <__any_on+0x26>
 8008bfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bfe:	fa24 f001 	lsr.w	r0, r4, r1
 8008c02:	fa00 f101 	lsl.w	r1, r0, r1
 8008c06:	428c      	cmp	r4, r1
 8008c08:	d10b      	bne.n	8008c22 <__any_on+0x3e>
 8008c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d803      	bhi.n	8008c1a <__any_on+0x36>
 8008c12:	2000      	movs	r0, #0
 8008c14:	bd10      	pop	{r4, pc}
 8008c16:	4603      	mov	r3, r0
 8008c18:	e7f7      	b.n	8008c0a <__any_on+0x26>
 8008c1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	d0f5      	beq.n	8008c0e <__any_on+0x2a>
 8008c22:	2001      	movs	r0, #1
 8008c24:	e7f6      	b.n	8008c14 <__any_on+0x30>

08008c26 <_calloc_r>:
 8008c26:	b513      	push	{r0, r1, r4, lr}
 8008c28:	434a      	muls	r2, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	9201      	str	r2, [sp, #4]
 8008c2e:	f000 f859 	bl	8008ce4 <_malloc_r>
 8008c32:	4604      	mov	r4, r0
 8008c34:	b118      	cbz	r0, 8008c3e <_calloc_r+0x18>
 8008c36:	9a01      	ldr	r2, [sp, #4]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f7fc faa5 	bl	8005188 <memset>
 8008c3e:	4620      	mov	r0, r4
 8008c40:	b002      	add	sp, #8
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <_free_r>:
 8008c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c46:	2900      	cmp	r1, #0
 8008c48:	d048      	beq.n	8008cdc <_free_r+0x98>
 8008c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4e:	9001      	str	r0, [sp, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f1a1 0404 	sub.w	r4, r1, #4
 8008c56:	bfb8      	it	lt
 8008c58:	18e4      	addlt	r4, r4, r3
 8008c5a:	f000 fe23 	bl	80098a4 <__malloc_lock>
 8008c5e:	4a20      	ldr	r2, [pc, #128]	; (8008ce0 <_free_r+0x9c>)
 8008c60:	9801      	ldr	r0, [sp, #4]
 8008c62:	6813      	ldr	r3, [r2, #0]
 8008c64:	4615      	mov	r5, r2
 8008c66:	b933      	cbnz	r3, 8008c76 <_free_r+0x32>
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	6014      	str	r4, [r2, #0]
 8008c6c:	b003      	add	sp, #12
 8008c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c72:	f000 be1d 	b.w	80098b0 <__malloc_unlock>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d90b      	bls.n	8008c92 <_free_r+0x4e>
 8008c7a:	6821      	ldr	r1, [r4, #0]
 8008c7c:	1862      	adds	r2, r4, r1
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	bf04      	itt	eq
 8008c82:	681a      	ldreq	r2, [r3, #0]
 8008c84:	685b      	ldreq	r3, [r3, #4]
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	bf04      	itt	eq
 8008c8a:	1852      	addeq	r2, r2, r1
 8008c8c:	6022      	streq	r2, [r4, #0]
 8008c8e:	602c      	str	r4, [r5, #0]
 8008c90:	e7ec      	b.n	8008c6c <_free_r+0x28>
 8008c92:	461a      	mov	r2, r3
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b10b      	cbz	r3, 8008c9c <_free_r+0x58>
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d9fa      	bls.n	8008c92 <_free_r+0x4e>
 8008c9c:	6811      	ldr	r1, [r2, #0]
 8008c9e:	1855      	adds	r5, r2, r1
 8008ca0:	42a5      	cmp	r5, r4
 8008ca2:	d10b      	bne.n	8008cbc <_free_r+0x78>
 8008ca4:	6824      	ldr	r4, [r4, #0]
 8008ca6:	4421      	add	r1, r4
 8008ca8:	1854      	adds	r4, r2, r1
 8008caa:	42a3      	cmp	r3, r4
 8008cac:	6011      	str	r1, [r2, #0]
 8008cae:	d1dd      	bne.n	8008c6c <_free_r+0x28>
 8008cb0:	681c      	ldr	r4, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	6053      	str	r3, [r2, #4]
 8008cb6:	4421      	add	r1, r4
 8008cb8:	6011      	str	r1, [r2, #0]
 8008cba:	e7d7      	b.n	8008c6c <_free_r+0x28>
 8008cbc:	d902      	bls.n	8008cc4 <_free_r+0x80>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	6003      	str	r3, [r0, #0]
 8008cc2:	e7d3      	b.n	8008c6c <_free_r+0x28>
 8008cc4:	6825      	ldr	r5, [r4, #0]
 8008cc6:	1961      	adds	r1, r4, r5
 8008cc8:	428b      	cmp	r3, r1
 8008cca:	bf04      	itt	eq
 8008ccc:	6819      	ldreq	r1, [r3, #0]
 8008cce:	685b      	ldreq	r3, [r3, #4]
 8008cd0:	6063      	str	r3, [r4, #4]
 8008cd2:	bf04      	itt	eq
 8008cd4:	1949      	addeq	r1, r1, r5
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	6054      	str	r4, [r2, #4]
 8008cda:	e7c7      	b.n	8008c6c <_free_r+0x28>
 8008cdc:	b003      	add	sp, #12
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	20000204 	.word	0x20000204

08008ce4 <_malloc_r>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	1ccd      	adds	r5, r1, #3
 8008ce8:	f025 0503 	bic.w	r5, r5, #3
 8008cec:	3508      	adds	r5, #8
 8008cee:	2d0c      	cmp	r5, #12
 8008cf0:	bf38      	it	cc
 8008cf2:	250c      	movcc	r5, #12
 8008cf4:	2d00      	cmp	r5, #0
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	db01      	blt.n	8008cfe <_malloc_r+0x1a>
 8008cfa:	42a9      	cmp	r1, r5
 8008cfc:	d903      	bls.n	8008d06 <_malloc_r+0x22>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	2000      	movs	r0, #0
 8008d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d06:	f000 fdcd 	bl	80098a4 <__malloc_lock>
 8008d0a:	4921      	ldr	r1, [pc, #132]	; (8008d90 <_malloc_r+0xac>)
 8008d0c:	680a      	ldr	r2, [r1, #0]
 8008d0e:	4614      	mov	r4, r2
 8008d10:	b99c      	cbnz	r4, 8008d3a <_malloc_r+0x56>
 8008d12:	4f20      	ldr	r7, [pc, #128]	; (8008d94 <_malloc_r+0xb0>)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	b923      	cbnz	r3, 8008d22 <_malloc_r+0x3e>
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f000 fafc 	bl	8009318 <_sbrk_r>
 8008d20:	6038      	str	r0, [r7, #0]
 8008d22:	4629      	mov	r1, r5
 8008d24:	4630      	mov	r0, r6
 8008d26:	f000 faf7 	bl	8009318 <_sbrk_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d123      	bne.n	8008d76 <_malloc_r+0x92>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	6033      	str	r3, [r6, #0]
 8008d32:	4630      	mov	r0, r6
 8008d34:	f000 fdbc 	bl	80098b0 <__malloc_unlock>
 8008d38:	e7e3      	b.n	8008d02 <_malloc_r+0x1e>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	1b5b      	subs	r3, r3, r5
 8008d3e:	d417      	bmi.n	8008d70 <_malloc_r+0x8c>
 8008d40:	2b0b      	cmp	r3, #11
 8008d42:	d903      	bls.n	8008d4c <_malloc_r+0x68>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	441c      	add	r4, r3
 8008d48:	6025      	str	r5, [r4, #0]
 8008d4a:	e004      	b.n	8008d56 <_malloc_r+0x72>
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	42a2      	cmp	r2, r4
 8008d50:	bf0c      	ite	eq
 8008d52:	600b      	streq	r3, [r1, #0]
 8008d54:	6053      	strne	r3, [r2, #4]
 8008d56:	4630      	mov	r0, r6
 8008d58:	f000 fdaa 	bl	80098b0 <__malloc_unlock>
 8008d5c:	f104 000b 	add.w	r0, r4, #11
 8008d60:	1d23      	adds	r3, r4, #4
 8008d62:	f020 0007 	bic.w	r0, r0, #7
 8008d66:	1ac2      	subs	r2, r0, r3
 8008d68:	d0cc      	beq.n	8008d04 <_malloc_r+0x20>
 8008d6a:	1a1b      	subs	r3, r3, r0
 8008d6c:	50a3      	str	r3, [r4, r2]
 8008d6e:	e7c9      	b.n	8008d04 <_malloc_r+0x20>
 8008d70:	4622      	mov	r2, r4
 8008d72:	6864      	ldr	r4, [r4, #4]
 8008d74:	e7cc      	b.n	8008d10 <_malloc_r+0x2c>
 8008d76:	1cc4      	adds	r4, r0, #3
 8008d78:	f024 0403 	bic.w	r4, r4, #3
 8008d7c:	42a0      	cmp	r0, r4
 8008d7e:	d0e3      	beq.n	8008d48 <_malloc_r+0x64>
 8008d80:	1a21      	subs	r1, r4, r0
 8008d82:	4630      	mov	r0, r6
 8008d84:	f000 fac8 	bl	8009318 <_sbrk_r>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d1dd      	bne.n	8008d48 <_malloc_r+0x64>
 8008d8c:	e7cf      	b.n	8008d2e <_malloc_r+0x4a>
 8008d8e:	bf00      	nop
 8008d90:	20000204 	.word	0x20000204
 8008d94:	20000208 	.word	0x20000208

08008d98 <__ssputs_r>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	688e      	ldr	r6, [r1, #8]
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	4682      	mov	sl, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	4690      	mov	r8, r2
 8008da6:	461f      	mov	r7, r3
 8008da8:	d838      	bhi.n	8008e1c <__ssputs_r+0x84>
 8008daa:	898a      	ldrh	r2, [r1, #12]
 8008dac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db0:	d032      	beq.n	8008e18 <__ssputs_r+0x80>
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	6909      	ldr	r1, [r1, #16]
 8008db6:	eba5 0901 	sub.w	r9, r5, r1
 8008dba:	6965      	ldr	r5, [r4, #20]
 8008dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	444b      	add	r3, r9
 8008dc8:	106d      	asrs	r5, r5, #1
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	bf38      	it	cc
 8008dce:	461d      	movcc	r5, r3
 8008dd0:	0553      	lsls	r3, r2, #21
 8008dd2:	d531      	bpl.n	8008e38 <__ssputs_r+0xa0>
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	f7ff ff85 	bl	8008ce4 <_malloc_r>
 8008dda:	4606      	mov	r6, r0
 8008ddc:	b950      	cbnz	r0, 8008df4 <__ssputs_r+0x5c>
 8008dde:	230c      	movs	r3, #12
 8008de0:	f8ca 3000 	str.w	r3, [sl]
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df4:	6921      	ldr	r1, [r4, #16]
 8008df6:	464a      	mov	r2, r9
 8008df8:	f7ff fa4c 	bl	8008294 <memcpy>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	6126      	str	r6, [r4, #16]
 8008e0a:	6165      	str	r5, [r4, #20]
 8008e0c:	444e      	add	r6, r9
 8008e0e:	eba5 0509 	sub.w	r5, r5, r9
 8008e12:	6026      	str	r6, [r4, #0]
 8008e14:	60a5      	str	r5, [r4, #8]
 8008e16:	463e      	mov	r6, r7
 8008e18:	42be      	cmp	r6, r7
 8008e1a:	d900      	bls.n	8008e1e <__ssputs_r+0x86>
 8008e1c:	463e      	mov	r6, r7
 8008e1e:	4632      	mov	r2, r6
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	4641      	mov	r1, r8
 8008e24:	f000 fd24 	bl	8009870 <memmove>
 8008e28:	68a3      	ldr	r3, [r4, #8]
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	4432      	add	r2, r6
 8008e30:	60a3      	str	r3, [r4, #8]
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7db      	b.n	8008df0 <__ssputs_r+0x58>
 8008e38:	462a      	mov	r2, r5
 8008e3a:	f000 fd3f 	bl	80098bc <_realloc_r>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d1e1      	bne.n	8008e08 <__ssputs_r+0x70>
 8008e44:	6921      	ldr	r1, [r4, #16]
 8008e46:	4650      	mov	r0, sl
 8008e48:	f7ff fefc 	bl	8008c44 <_free_r>
 8008e4c:	e7c7      	b.n	8008dde <__ssputs_r+0x46>
	...

08008e50 <_svfiprintf_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	4698      	mov	r8, r3
 8008e56:	898b      	ldrh	r3, [r1, #12]
 8008e58:	061b      	lsls	r3, r3, #24
 8008e5a:	b09d      	sub	sp, #116	; 0x74
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	4614      	mov	r4, r2
 8008e62:	d50e      	bpl.n	8008e82 <_svfiprintf_r+0x32>
 8008e64:	690b      	ldr	r3, [r1, #16]
 8008e66:	b963      	cbnz	r3, 8008e82 <_svfiprintf_r+0x32>
 8008e68:	2140      	movs	r1, #64	; 0x40
 8008e6a:	f7ff ff3b 	bl	8008ce4 <_malloc_r>
 8008e6e:	6028      	str	r0, [r5, #0]
 8008e70:	6128      	str	r0, [r5, #16]
 8008e72:	b920      	cbnz	r0, 8008e7e <_svfiprintf_r+0x2e>
 8008e74:	230c      	movs	r3, #12
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	e0d1      	b.n	8009022 <_svfiprintf_r+0x1d2>
 8008e7e:	2340      	movs	r3, #64	; 0x40
 8008e80:	616b      	str	r3, [r5, #20]
 8008e82:	2300      	movs	r3, #0
 8008e84:	9309      	str	r3, [sp, #36]	; 0x24
 8008e86:	2320      	movs	r3, #32
 8008e88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e90:	2330      	movs	r3, #48	; 0x30
 8008e92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800903c <_svfiprintf_r+0x1ec>
 8008e96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e9a:	f04f 0901 	mov.w	r9, #1
 8008e9e:	4623      	mov	r3, r4
 8008ea0:	469a      	mov	sl, r3
 8008ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea6:	b10a      	cbz	r2, 8008eac <_svfiprintf_r+0x5c>
 8008ea8:	2a25      	cmp	r2, #37	; 0x25
 8008eaa:	d1f9      	bne.n	8008ea0 <_svfiprintf_r+0x50>
 8008eac:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb0:	d00b      	beq.n	8008eca <_svfiprintf_r+0x7a>
 8008eb2:	465b      	mov	r3, fp
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff ff6d 	bl	8008d98 <__ssputs_r>
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f000 80aa 	beq.w	8009018 <_svfiprintf_r+0x1c8>
 8008ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec6:	445a      	add	r2, fp
 8008ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eca:	f89a 3000 	ldrb.w	r3, [sl]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 80a2 	beq.w	8009018 <_svfiprintf_r+0x1c8>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ede:	f10a 0a01 	add.w	sl, sl, #1
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	9307      	str	r3, [sp, #28]
 8008ee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eea:	931a      	str	r3, [sp, #104]	; 0x68
 8008eec:	4654      	mov	r4, sl
 8008eee:	2205      	movs	r2, #5
 8008ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef4:	4851      	ldr	r0, [pc, #324]	; (800903c <_svfiprintf_r+0x1ec>)
 8008ef6:	f7f7 f993 	bl	8000220 <memchr>
 8008efa:	9a04      	ldr	r2, [sp, #16]
 8008efc:	b9d8      	cbnz	r0, 8008f36 <_svfiprintf_r+0xe6>
 8008efe:	06d0      	lsls	r0, r2, #27
 8008f00:	bf44      	itt	mi
 8008f02:	2320      	movmi	r3, #32
 8008f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f08:	0711      	lsls	r1, r2, #28
 8008f0a:	bf44      	itt	mi
 8008f0c:	232b      	movmi	r3, #43	; 0x2b
 8008f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f12:	f89a 3000 	ldrb.w	r3, [sl]
 8008f16:	2b2a      	cmp	r3, #42	; 0x2a
 8008f18:	d015      	beq.n	8008f46 <_svfiprintf_r+0xf6>
 8008f1a:	9a07      	ldr	r2, [sp, #28]
 8008f1c:	4654      	mov	r4, sl
 8008f1e:	2000      	movs	r0, #0
 8008f20:	f04f 0c0a 	mov.w	ip, #10
 8008f24:	4621      	mov	r1, r4
 8008f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f2a:	3b30      	subs	r3, #48	; 0x30
 8008f2c:	2b09      	cmp	r3, #9
 8008f2e:	d94e      	bls.n	8008fce <_svfiprintf_r+0x17e>
 8008f30:	b1b0      	cbz	r0, 8008f60 <_svfiprintf_r+0x110>
 8008f32:	9207      	str	r2, [sp, #28]
 8008f34:	e014      	b.n	8008f60 <_svfiprintf_r+0x110>
 8008f36:	eba0 0308 	sub.w	r3, r0, r8
 8008f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	46a2      	mov	sl, r4
 8008f44:	e7d2      	b.n	8008eec <_svfiprintf_r+0x9c>
 8008f46:	9b03      	ldr	r3, [sp, #12]
 8008f48:	1d19      	adds	r1, r3, #4
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	9103      	str	r1, [sp, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bfbb      	ittet	lt
 8008f52:	425b      	neglt	r3, r3
 8008f54:	f042 0202 	orrlt.w	r2, r2, #2
 8008f58:	9307      	strge	r3, [sp, #28]
 8008f5a:	9307      	strlt	r3, [sp, #28]
 8008f5c:	bfb8      	it	lt
 8008f5e:	9204      	strlt	r2, [sp, #16]
 8008f60:	7823      	ldrb	r3, [r4, #0]
 8008f62:	2b2e      	cmp	r3, #46	; 0x2e
 8008f64:	d10c      	bne.n	8008f80 <_svfiprintf_r+0x130>
 8008f66:	7863      	ldrb	r3, [r4, #1]
 8008f68:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6a:	d135      	bne.n	8008fd8 <_svfiprintf_r+0x188>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	9203      	str	r2, [sp, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfb8      	it	lt
 8008f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f7c:	3402      	adds	r4, #2
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800904c <_svfiprintf_r+0x1fc>
 8008f84:	7821      	ldrb	r1, [r4, #0]
 8008f86:	2203      	movs	r2, #3
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f7f7 f949 	bl	8000220 <memchr>
 8008f8e:	b140      	cbz	r0, 8008fa2 <_svfiprintf_r+0x152>
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	eba0 000a 	sub.w	r0, r0, sl
 8008f96:	fa03 f000 	lsl.w	r0, r3, r0
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	4303      	orrs	r3, r0
 8008f9e:	3401      	adds	r4, #1
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa6:	4826      	ldr	r0, [pc, #152]	; (8009040 <_svfiprintf_r+0x1f0>)
 8008fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fac:	2206      	movs	r2, #6
 8008fae:	f7f7 f937 	bl	8000220 <memchr>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d038      	beq.n	8009028 <_svfiprintf_r+0x1d8>
 8008fb6:	4b23      	ldr	r3, [pc, #140]	; (8009044 <_svfiprintf_r+0x1f4>)
 8008fb8:	bb1b      	cbnz	r3, 8009002 <_svfiprintf_r+0x1b2>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	3307      	adds	r3, #7
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc8:	4433      	add	r3, r6
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	e767      	b.n	8008e9e <_svfiprintf_r+0x4e>
 8008fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	e7a5      	b.n	8008f24 <_svfiprintf_r+0xd4>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	3401      	adds	r4, #1
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fea:	3a30      	subs	r2, #48	; 0x30
 8008fec:	2a09      	cmp	r2, #9
 8008fee:	d903      	bls.n	8008ff8 <_svfiprintf_r+0x1a8>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0c5      	beq.n	8008f80 <_svfiprintf_r+0x130>
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	e7c3      	b.n	8008f80 <_svfiprintf_r+0x130>
 8008ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7f0      	b.n	8008fe4 <_svfiprintf_r+0x194>
 8009002:	ab03      	add	r3, sp, #12
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	462a      	mov	r2, r5
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <_svfiprintf_r+0x1f8>)
 800900a:	a904      	add	r1, sp, #16
 800900c:	4638      	mov	r0, r7
 800900e:	f7fc f963 	bl	80052d8 <_printf_float>
 8009012:	1c42      	adds	r2, r0, #1
 8009014:	4606      	mov	r6, r0
 8009016:	d1d6      	bne.n	8008fc6 <_svfiprintf_r+0x176>
 8009018:	89ab      	ldrh	r3, [r5, #12]
 800901a:	065b      	lsls	r3, r3, #25
 800901c:	f53f af2c 	bmi.w	8008e78 <_svfiprintf_r+0x28>
 8009020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009022:	b01d      	add	sp, #116	; 0x74
 8009024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009028:	ab03      	add	r3, sp, #12
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	462a      	mov	r2, r5
 800902e:	4b06      	ldr	r3, [pc, #24]	; (8009048 <_svfiprintf_r+0x1f8>)
 8009030:	a904      	add	r1, sp, #16
 8009032:	4638      	mov	r0, r7
 8009034:	f7fc fbf4 	bl	8005820 <_printf_i>
 8009038:	e7eb      	b.n	8009012 <_svfiprintf_r+0x1c2>
 800903a:	bf00      	nop
 800903c:	08009f34 	.word	0x08009f34
 8009040:	08009f3e 	.word	0x08009f3e
 8009044:	080052d9 	.word	0x080052d9
 8009048:	08008d99 	.word	0x08008d99
 800904c:	08009f3a 	.word	0x08009f3a

08009050 <__sfputc_r>:
 8009050:	6893      	ldr	r3, [r2, #8]
 8009052:	3b01      	subs	r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	b410      	push	{r4}
 8009058:	6093      	str	r3, [r2, #8]
 800905a:	da08      	bge.n	800906e <__sfputc_r+0x1e>
 800905c:	6994      	ldr	r4, [r2, #24]
 800905e:	42a3      	cmp	r3, r4
 8009060:	db01      	blt.n	8009066 <__sfputc_r+0x16>
 8009062:	290a      	cmp	r1, #10
 8009064:	d103      	bne.n	800906e <__sfputc_r+0x1e>
 8009066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800906a:	f000 b9a9 	b.w	80093c0 <__swbuf_r>
 800906e:	6813      	ldr	r3, [r2, #0]
 8009070:	1c58      	adds	r0, r3, #1
 8009072:	6010      	str	r0, [r2, #0]
 8009074:	7019      	strb	r1, [r3, #0]
 8009076:	4608      	mov	r0, r1
 8009078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800907c:	4770      	bx	lr

0800907e <__sfputs_r>:
 800907e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009080:	4606      	mov	r6, r0
 8009082:	460f      	mov	r7, r1
 8009084:	4614      	mov	r4, r2
 8009086:	18d5      	adds	r5, r2, r3
 8009088:	42ac      	cmp	r4, r5
 800908a:	d101      	bne.n	8009090 <__sfputs_r+0x12>
 800908c:	2000      	movs	r0, #0
 800908e:	e007      	b.n	80090a0 <__sfputs_r+0x22>
 8009090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009094:	463a      	mov	r2, r7
 8009096:	4630      	mov	r0, r6
 8009098:	f7ff ffda 	bl	8009050 <__sfputc_r>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d1f3      	bne.n	8009088 <__sfputs_r+0xa>
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090a4 <_vfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	460d      	mov	r5, r1
 80090aa:	b09d      	sub	sp, #116	; 0x74
 80090ac:	4614      	mov	r4, r2
 80090ae:	4698      	mov	r8, r3
 80090b0:	4606      	mov	r6, r0
 80090b2:	b118      	cbz	r0, 80090bc <_vfiprintf_r+0x18>
 80090b4:	6983      	ldr	r3, [r0, #24]
 80090b6:	b90b      	cbnz	r3, 80090bc <_vfiprintf_r+0x18>
 80090b8:	f7fe fcbe 	bl	8007a38 <__sinit>
 80090bc:	4b89      	ldr	r3, [pc, #548]	; (80092e4 <_vfiprintf_r+0x240>)
 80090be:	429d      	cmp	r5, r3
 80090c0:	d11b      	bne.n	80090fa <_vfiprintf_r+0x56>
 80090c2:	6875      	ldr	r5, [r6, #4]
 80090c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c6:	07d9      	lsls	r1, r3, #31
 80090c8:	d405      	bmi.n	80090d6 <_vfiprintf_r+0x32>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	059a      	lsls	r2, r3, #22
 80090ce:	d402      	bmi.n	80090d6 <_vfiprintf_r+0x32>
 80090d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d2:	f7ff f8c2 	bl	800825a <__retarget_lock_acquire_recursive>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	071b      	lsls	r3, r3, #28
 80090da:	d501      	bpl.n	80090e0 <_vfiprintf_r+0x3c>
 80090dc:	692b      	ldr	r3, [r5, #16]
 80090de:	b9eb      	cbnz	r3, 800911c <_vfiprintf_r+0x78>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	f000 f9de 	bl	80094a4 <__swsetup_r>
 80090e8:	b1c0      	cbz	r0, 800911c <_vfiprintf_r+0x78>
 80090ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ec:	07dc      	lsls	r4, r3, #31
 80090ee:	d50e      	bpl.n	800910e <_vfiprintf_r+0x6a>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b01d      	add	sp, #116	; 0x74
 80090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fa:	4b7b      	ldr	r3, [pc, #492]	; (80092e8 <_vfiprintf_r+0x244>)
 80090fc:	429d      	cmp	r5, r3
 80090fe:	d101      	bne.n	8009104 <_vfiprintf_r+0x60>
 8009100:	68b5      	ldr	r5, [r6, #8]
 8009102:	e7df      	b.n	80090c4 <_vfiprintf_r+0x20>
 8009104:	4b79      	ldr	r3, [pc, #484]	; (80092ec <_vfiprintf_r+0x248>)
 8009106:	429d      	cmp	r5, r3
 8009108:	bf08      	it	eq
 800910a:	68f5      	ldreq	r5, [r6, #12]
 800910c:	e7da      	b.n	80090c4 <_vfiprintf_r+0x20>
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	0598      	lsls	r0, r3, #22
 8009112:	d4ed      	bmi.n	80090f0 <_vfiprintf_r+0x4c>
 8009114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009116:	f7ff f8a1 	bl	800825c <__retarget_lock_release_recursive>
 800911a:	e7e9      	b.n	80090f0 <_vfiprintf_r+0x4c>
 800911c:	2300      	movs	r3, #0
 800911e:	9309      	str	r3, [sp, #36]	; 0x24
 8009120:	2320      	movs	r3, #32
 8009122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009126:	f8cd 800c 	str.w	r8, [sp, #12]
 800912a:	2330      	movs	r3, #48	; 0x30
 800912c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092f0 <_vfiprintf_r+0x24c>
 8009130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009134:	f04f 0901 	mov.w	r9, #1
 8009138:	4623      	mov	r3, r4
 800913a:	469a      	mov	sl, r3
 800913c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009140:	b10a      	cbz	r2, 8009146 <_vfiprintf_r+0xa2>
 8009142:	2a25      	cmp	r2, #37	; 0x25
 8009144:	d1f9      	bne.n	800913a <_vfiprintf_r+0x96>
 8009146:	ebba 0b04 	subs.w	fp, sl, r4
 800914a:	d00b      	beq.n	8009164 <_vfiprintf_r+0xc0>
 800914c:	465b      	mov	r3, fp
 800914e:	4622      	mov	r2, r4
 8009150:	4629      	mov	r1, r5
 8009152:	4630      	mov	r0, r6
 8009154:	f7ff ff93 	bl	800907e <__sfputs_r>
 8009158:	3001      	adds	r0, #1
 800915a:	f000 80aa 	beq.w	80092b2 <_vfiprintf_r+0x20e>
 800915e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009160:	445a      	add	r2, fp
 8009162:	9209      	str	r2, [sp, #36]	; 0x24
 8009164:	f89a 3000 	ldrb.w	r3, [sl]
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80a2 	beq.w	80092b2 <_vfiprintf_r+0x20e>
 800916e:	2300      	movs	r3, #0
 8009170:	f04f 32ff 	mov.w	r2, #4294967295
 8009174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009178:	f10a 0a01 	add.w	sl, sl, #1
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	9307      	str	r3, [sp, #28]
 8009180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009184:	931a      	str	r3, [sp, #104]	; 0x68
 8009186:	4654      	mov	r4, sl
 8009188:	2205      	movs	r2, #5
 800918a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918e:	4858      	ldr	r0, [pc, #352]	; (80092f0 <_vfiprintf_r+0x24c>)
 8009190:	f7f7 f846 	bl	8000220 <memchr>
 8009194:	9a04      	ldr	r2, [sp, #16]
 8009196:	b9d8      	cbnz	r0, 80091d0 <_vfiprintf_r+0x12c>
 8009198:	06d1      	lsls	r1, r2, #27
 800919a:	bf44      	itt	mi
 800919c:	2320      	movmi	r3, #32
 800919e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a2:	0713      	lsls	r3, r2, #28
 80091a4:	bf44      	itt	mi
 80091a6:	232b      	movmi	r3, #43	; 0x2b
 80091a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ac:	f89a 3000 	ldrb.w	r3, [sl]
 80091b0:	2b2a      	cmp	r3, #42	; 0x2a
 80091b2:	d015      	beq.n	80091e0 <_vfiprintf_r+0x13c>
 80091b4:	9a07      	ldr	r2, [sp, #28]
 80091b6:	4654      	mov	r4, sl
 80091b8:	2000      	movs	r0, #0
 80091ba:	f04f 0c0a 	mov.w	ip, #10
 80091be:	4621      	mov	r1, r4
 80091c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c4:	3b30      	subs	r3, #48	; 0x30
 80091c6:	2b09      	cmp	r3, #9
 80091c8:	d94e      	bls.n	8009268 <_vfiprintf_r+0x1c4>
 80091ca:	b1b0      	cbz	r0, 80091fa <_vfiprintf_r+0x156>
 80091cc:	9207      	str	r2, [sp, #28]
 80091ce:	e014      	b.n	80091fa <_vfiprintf_r+0x156>
 80091d0:	eba0 0308 	sub.w	r3, r0, r8
 80091d4:	fa09 f303 	lsl.w	r3, r9, r3
 80091d8:	4313      	orrs	r3, r2
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	46a2      	mov	sl, r4
 80091de:	e7d2      	b.n	8009186 <_vfiprintf_r+0xe2>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	1d19      	adds	r1, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9103      	str	r1, [sp, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfbb      	ittet	lt
 80091ec:	425b      	neglt	r3, r3
 80091ee:	f042 0202 	orrlt.w	r2, r2, #2
 80091f2:	9307      	strge	r3, [sp, #28]
 80091f4:	9307      	strlt	r3, [sp, #28]
 80091f6:	bfb8      	it	lt
 80091f8:	9204      	strlt	r2, [sp, #16]
 80091fa:	7823      	ldrb	r3, [r4, #0]
 80091fc:	2b2e      	cmp	r3, #46	; 0x2e
 80091fe:	d10c      	bne.n	800921a <_vfiprintf_r+0x176>
 8009200:	7863      	ldrb	r3, [r4, #1]
 8009202:	2b2a      	cmp	r3, #42	; 0x2a
 8009204:	d135      	bne.n	8009272 <_vfiprintf_r+0x1ce>
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	9203      	str	r2, [sp, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	bfb8      	it	lt
 8009212:	f04f 33ff 	movlt.w	r3, #4294967295
 8009216:	3402      	adds	r4, #2
 8009218:	9305      	str	r3, [sp, #20]
 800921a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009300 <_vfiprintf_r+0x25c>
 800921e:	7821      	ldrb	r1, [r4, #0]
 8009220:	2203      	movs	r2, #3
 8009222:	4650      	mov	r0, sl
 8009224:	f7f6 fffc 	bl	8000220 <memchr>
 8009228:	b140      	cbz	r0, 800923c <_vfiprintf_r+0x198>
 800922a:	2340      	movs	r3, #64	; 0x40
 800922c:	eba0 000a 	sub.w	r0, r0, sl
 8009230:	fa03 f000 	lsl.w	r0, r3, r0
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	4303      	orrs	r3, r0
 8009238:	3401      	adds	r4, #1
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009240:	482c      	ldr	r0, [pc, #176]	; (80092f4 <_vfiprintf_r+0x250>)
 8009242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009246:	2206      	movs	r2, #6
 8009248:	f7f6 ffea 	bl	8000220 <memchr>
 800924c:	2800      	cmp	r0, #0
 800924e:	d03f      	beq.n	80092d0 <_vfiprintf_r+0x22c>
 8009250:	4b29      	ldr	r3, [pc, #164]	; (80092f8 <_vfiprintf_r+0x254>)
 8009252:	bb1b      	cbnz	r3, 800929c <_vfiprintf_r+0x1f8>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	3307      	adds	r3, #7
 8009258:	f023 0307 	bic.w	r3, r3, #7
 800925c:	3308      	adds	r3, #8
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009262:	443b      	add	r3, r7
 8009264:	9309      	str	r3, [sp, #36]	; 0x24
 8009266:	e767      	b.n	8009138 <_vfiprintf_r+0x94>
 8009268:	fb0c 3202 	mla	r2, ip, r2, r3
 800926c:	460c      	mov	r4, r1
 800926e:	2001      	movs	r0, #1
 8009270:	e7a5      	b.n	80091be <_vfiprintf_r+0x11a>
 8009272:	2300      	movs	r3, #0
 8009274:	3401      	adds	r4, #1
 8009276:	9305      	str	r3, [sp, #20]
 8009278:	4619      	mov	r1, r3
 800927a:	f04f 0c0a 	mov.w	ip, #10
 800927e:	4620      	mov	r0, r4
 8009280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009284:	3a30      	subs	r2, #48	; 0x30
 8009286:	2a09      	cmp	r2, #9
 8009288:	d903      	bls.n	8009292 <_vfiprintf_r+0x1ee>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0c5      	beq.n	800921a <_vfiprintf_r+0x176>
 800928e:	9105      	str	r1, [sp, #20]
 8009290:	e7c3      	b.n	800921a <_vfiprintf_r+0x176>
 8009292:	fb0c 2101 	mla	r1, ip, r1, r2
 8009296:	4604      	mov	r4, r0
 8009298:	2301      	movs	r3, #1
 800929a:	e7f0      	b.n	800927e <_vfiprintf_r+0x1da>
 800929c:	ab03      	add	r3, sp, #12
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	462a      	mov	r2, r5
 80092a2:	4b16      	ldr	r3, [pc, #88]	; (80092fc <_vfiprintf_r+0x258>)
 80092a4:	a904      	add	r1, sp, #16
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7fc f816 	bl	80052d8 <_printf_float>
 80092ac:	4607      	mov	r7, r0
 80092ae:	1c78      	adds	r0, r7, #1
 80092b0:	d1d6      	bne.n	8009260 <_vfiprintf_r+0x1bc>
 80092b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b4:	07d9      	lsls	r1, r3, #31
 80092b6:	d405      	bmi.n	80092c4 <_vfiprintf_r+0x220>
 80092b8:	89ab      	ldrh	r3, [r5, #12]
 80092ba:	059a      	lsls	r2, r3, #22
 80092bc:	d402      	bmi.n	80092c4 <_vfiprintf_r+0x220>
 80092be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c0:	f7fe ffcc 	bl	800825c <__retarget_lock_release_recursive>
 80092c4:	89ab      	ldrh	r3, [r5, #12]
 80092c6:	065b      	lsls	r3, r3, #25
 80092c8:	f53f af12 	bmi.w	80090f0 <_vfiprintf_r+0x4c>
 80092cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ce:	e711      	b.n	80090f4 <_vfiprintf_r+0x50>
 80092d0:	ab03      	add	r3, sp, #12
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	462a      	mov	r2, r5
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <_vfiprintf_r+0x258>)
 80092d8:	a904      	add	r1, sp, #16
 80092da:	4630      	mov	r0, r6
 80092dc:	f7fc faa0 	bl	8005820 <_printf_i>
 80092e0:	e7e4      	b.n	80092ac <_vfiprintf_r+0x208>
 80092e2:	bf00      	nop
 80092e4:	08009d18 	.word	0x08009d18
 80092e8:	08009d38 	.word	0x08009d38
 80092ec:	08009cf8 	.word	0x08009cf8
 80092f0:	08009f34 	.word	0x08009f34
 80092f4:	08009f3e 	.word	0x08009f3e
 80092f8:	080052d9 	.word	0x080052d9
 80092fc:	0800907f 	.word	0x0800907f
 8009300:	08009f3a 	.word	0x08009f3a
 8009304:	00000000 	.word	0x00000000

08009308 <nan>:
 8009308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009310 <nan+0x8>
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	00000000 	.word	0x00000000
 8009314:	7ff80000 	.word	0x7ff80000

08009318 <_sbrk_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	; (8009334 <_sbrk_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f8 fc3a 	bl	8001b9c <_sbrk>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_sbrk_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_sbrk_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	200003e8 	.word	0x200003e8

08009338 <__sread>:
 8009338:	b510      	push	{r4, lr}
 800933a:	460c      	mov	r4, r1
 800933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009340:	f000 fae2 	bl	8009908 <_read_r>
 8009344:	2800      	cmp	r0, #0
 8009346:	bfab      	itete	ge
 8009348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800934a:	89a3      	ldrhlt	r3, [r4, #12]
 800934c:	181b      	addge	r3, r3, r0
 800934e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009352:	bfac      	ite	ge
 8009354:	6563      	strge	r3, [r4, #84]	; 0x54
 8009356:	81a3      	strhlt	r3, [r4, #12]
 8009358:	bd10      	pop	{r4, pc}

0800935a <__swrite>:
 800935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	461f      	mov	r7, r3
 8009360:	898b      	ldrh	r3, [r1, #12]
 8009362:	05db      	lsls	r3, r3, #23
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4616      	mov	r6, r2
 800936a:	d505      	bpl.n	8009378 <__swrite+0x1e>
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	2302      	movs	r3, #2
 8009372:	2200      	movs	r2, #0
 8009374:	f000 fa06 	bl	8009784 <_lseek_r>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	4632      	mov	r2, r6
 8009386:	463b      	mov	r3, r7
 8009388:	4628      	mov	r0, r5
 800938a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938e:	f000 b877 	b.w	8009480 <_write_r>

08009392 <__sseek>:
 8009392:	b510      	push	{r4, lr}
 8009394:	460c      	mov	r4, r1
 8009396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939a:	f000 f9f3 	bl	8009784 <_lseek_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	bf15      	itete	ne
 80093a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093ae:	81a3      	strheq	r3, [r4, #12]
 80093b0:	bf18      	it	ne
 80093b2:	81a3      	strhne	r3, [r4, #12]
 80093b4:	bd10      	pop	{r4, pc}

080093b6 <__sclose>:
 80093b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ba:	f000 b8ff 	b.w	80095bc <_close_r>
	...

080093c0 <__swbuf_r>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	460e      	mov	r6, r1
 80093c4:	4614      	mov	r4, r2
 80093c6:	4605      	mov	r5, r0
 80093c8:	b118      	cbz	r0, 80093d2 <__swbuf_r+0x12>
 80093ca:	6983      	ldr	r3, [r0, #24]
 80093cc:	b90b      	cbnz	r3, 80093d2 <__swbuf_r+0x12>
 80093ce:	f7fe fb33 	bl	8007a38 <__sinit>
 80093d2:	4b21      	ldr	r3, [pc, #132]	; (8009458 <__swbuf_r+0x98>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d12b      	bne.n	8009430 <__swbuf_r+0x70>
 80093d8:	686c      	ldr	r4, [r5, #4]
 80093da:	69a3      	ldr	r3, [r4, #24]
 80093dc:	60a3      	str	r3, [r4, #8]
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	071a      	lsls	r2, r3, #28
 80093e2:	d52f      	bpl.n	8009444 <__swbuf_r+0x84>
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	b36b      	cbz	r3, 8009444 <__swbuf_r+0x84>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	6820      	ldr	r0, [r4, #0]
 80093ec:	1ac0      	subs	r0, r0, r3
 80093ee:	6963      	ldr	r3, [r4, #20]
 80093f0:	b2f6      	uxtb	r6, r6
 80093f2:	4283      	cmp	r3, r0
 80093f4:	4637      	mov	r7, r6
 80093f6:	dc04      	bgt.n	8009402 <__swbuf_r+0x42>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 f974 	bl	80096e8 <_fflush_r>
 8009400:	bb30      	cbnz	r0, 8009450 <__swbuf_r+0x90>
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	3b01      	subs	r3, #1
 8009406:	60a3      	str	r3, [r4, #8]
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	6022      	str	r2, [r4, #0]
 800940e:	701e      	strb	r6, [r3, #0]
 8009410:	6963      	ldr	r3, [r4, #20]
 8009412:	3001      	adds	r0, #1
 8009414:	4283      	cmp	r3, r0
 8009416:	d004      	beq.n	8009422 <__swbuf_r+0x62>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	07db      	lsls	r3, r3, #31
 800941c:	d506      	bpl.n	800942c <__swbuf_r+0x6c>
 800941e:	2e0a      	cmp	r6, #10
 8009420:	d104      	bne.n	800942c <__swbuf_r+0x6c>
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f95f 	bl	80096e8 <_fflush_r>
 800942a:	b988      	cbnz	r0, 8009450 <__swbuf_r+0x90>
 800942c:	4638      	mov	r0, r7
 800942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <__swbuf_r+0x9c>)
 8009432:	429c      	cmp	r4, r3
 8009434:	d101      	bne.n	800943a <__swbuf_r+0x7a>
 8009436:	68ac      	ldr	r4, [r5, #8]
 8009438:	e7cf      	b.n	80093da <__swbuf_r+0x1a>
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <__swbuf_r+0xa0>)
 800943c:	429c      	cmp	r4, r3
 800943e:	bf08      	it	eq
 8009440:	68ec      	ldreq	r4, [r5, #12]
 8009442:	e7ca      	b.n	80093da <__swbuf_r+0x1a>
 8009444:	4621      	mov	r1, r4
 8009446:	4628      	mov	r0, r5
 8009448:	f000 f82c 	bl	80094a4 <__swsetup_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0cb      	beq.n	80093e8 <__swbuf_r+0x28>
 8009450:	f04f 37ff 	mov.w	r7, #4294967295
 8009454:	e7ea      	b.n	800942c <__swbuf_r+0x6c>
 8009456:	bf00      	nop
 8009458:	08009d18 	.word	0x08009d18
 800945c:	08009d38 	.word	0x08009d38
 8009460:	08009cf8 	.word	0x08009cf8

08009464 <__ascii_wctomb>:
 8009464:	b149      	cbz	r1, 800947a <__ascii_wctomb+0x16>
 8009466:	2aff      	cmp	r2, #255	; 0xff
 8009468:	bf85      	ittet	hi
 800946a:	238a      	movhi	r3, #138	; 0x8a
 800946c:	6003      	strhi	r3, [r0, #0]
 800946e:	700a      	strbls	r2, [r1, #0]
 8009470:	f04f 30ff 	movhi.w	r0, #4294967295
 8009474:	bf98      	it	ls
 8009476:	2001      	movls	r0, #1
 8009478:	4770      	bx	lr
 800947a:	4608      	mov	r0, r1
 800947c:	4770      	bx	lr
	...

08009480 <_write_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d07      	ldr	r5, [pc, #28]	; (80094a0 <_write_r+0x20>)
 8009484:	4604      	mov	r4, r0
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	602a      	str	r2, [r5, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7f8 fb33 	bl	8001afa <_write>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_write_r+0x1e>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_write_r+0x1e>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200003e8 	.word	0x200003e8

080094a4 <__swsetup_r>:
 80094a4:	4b32      	ldr	r3, [pc, #200]	; (8009570 <__swsetup_r+0xcc>)
 80094a6:	b570      	push	{r4, r5, r6, lr}
 80094a8:	681d      	ldr	r5, [r3, #0]
 80094aa:	4606      	mov	r6, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	b125      	cbz	r5, 80094ba <__swsetup_r+0x16>
 80094b0:	69ab      	ldr	r3, [r5, #24]
 80094b2:	b913      	cbnz	r3, 80094ba <__swsetup_r+0x16>
 80094b4:	4628      	mov	r0, r5
 80094b6:	f7fe fabf 	bl	8007a38 <__sinit>
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <__swsetup_r+0xd0>)
 80094bc:	429c      	cmp	r4, r3
 80094be:	d10f      	bne.n	80094e0 <__swsetup_r+0x3c>
 80094c0:	686c      	ldr	r4, [r5, #4]
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094c8:	0719      	lsls	r1, r3, #28
 80094ca:	d42c      	bmi.n	8009526 <__swsetup_r+0x82>
 80094cc:	06dd      	lsls	r5, r3, #27
 80094ce:	d411      	bmi.n	80094f4 <__swsetup_r+0x50>
 80094d0:	2309      	movs	r3, #9
 80094d2:	6033      	str	r3, [r6, #0]
 80094d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	f04f 30ff 	mov.w	r0, #4294967295
 80094de:	e03e      	b.n	800955e <__swsetup_r+0xba>
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <__swsetup_r+0xd4>)
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d101      	bne.n	80094ea <__swsetup_r+0x46>
 80094e6:	68ac      	ldr	r4, [r5, #8]
 80094e8:	e7eb      	b.n	80094c2 <__swsetup_r+0x1e>
 80094ea:	4b24      	ldr	r3, [pc, #144]	; (800957c <__swsetup_r+0xd8>)
 80094ec:	429c      	cmp	r4, r3
 80094ee:	bf08      	it	eq
 80094f0:	68ec      	ldreq	r4, [r5, #12]
 80094f2:	e7e6      	b.n	80094c2 <__swsetup_r+0x1e>
 80094f4:	0758      	lsls	r0, r3, #29
 80094f6:	d512      	bpl.n	800951e <__swsetup_r+0x7a>
 80094f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094fa:	b141      	cbz	r1, 800950e <__swsetup_r+0x6a>
 80094fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009500:	4299      	cmp	r1, r3
 8009502:	d002      	beq.n	800950a <__swsetup_r+0x66>
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff fb9d 	bl	8008c44 <_free_r>
 800950a:	2300      	movs	r3, #0
 800950c:	6363      	str	r3, [r4, #52]	; 0x34
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	2300      	movs	r3, #0
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f043 0308 	orr.w	r3, r3, #8
 8009524:	81a3      	strh	r3, [r4, #12]
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	b94b      	cbnz	r3, 800953e <__swsetup_r+0x9a>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009534:	d003      	beq.n	800953e <__swsetup_r+0x9a>
 8009536:	4621      	mov	r1, r4
 8009538:	4630      	mov	r0, r6
 800953a:	f000 f959 	bl	80097f0 <__smakebuf_r>
 800953e:	89a0      	ldrh	r0, [r4, #12]
 8009540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009544:	f010 0301 	ands.w	r3, r0, #1
 8009548:	d00a      	beq.n	8009560 <__swsetup_r+0xbc>
 800954a:	2300      	movs	r3, #0
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6963      	ldr	r3, [r4, #20]
 8009550:	425b      	negs	r3, r3
 8009552:	61a3      	str	r3, [r4, #24]
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	b943      	cbnz	r3, 800956a <__swsetup_r+0xc6>
 8009558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800955c:	d1ba      	bne.n	80094d4 <__swsetup_r+0x30>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	0781      	lsls	r1, r0, #30
 8009562:	bf58      	it	pl
 8009564:	6963      	ldrpl	r3, [r4, #20]
 8009566:	60a3      	str	r3, [r4, #8]
 8009568:	e7f4      	b.n	8009554 <__swsetup_r+0xb0>
 800956a:	2000      	movs	r0, #0
 800956c:	e7f7      	b.n	800955e <__swsetup_r+0xba>
 800956e:	bf00      	nop
 8009570:	2000000c 	.word	0x2000000c
 8009574:	08009d18 	.word	0x08009d18
 8009578:	08009d38 	.word	0x08009d38
 800957c:	08009cf8 	.word	0x08009cf8

08009580 <__assert_func>:
 8009580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009582:	4614      	mov	r4, r2
 8009584:	461a      	mov	r2, r3
 8009586:	4b09      	ldr	r3, [pc, #36]	; (80095ac <__assert_func+0x2c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4605      	mov	r5, r0
 800958c:	68d8      	ldr	r0, [r3, #12]
 800958e:	b14c      	cbz	r4, 80095a4 <__assert_func+0x24>
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <__assert_func+0x30>)
 8009592:	9100      	str	r1, [sp, #0]
 8009594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009598:	4906      	ldr	r1, [pc, #24]	; (80095b4 <__assert_func+0x34>)
 800959a:	462b      	mov	r3, r5
 800959c:	f000 f8e0 	bl	8009760 <fiprintf>
 80095a0:	f000 f9c4 	bl	800992c <abort>
 80095a4:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <__assert_func+0x38>)
 80095a6:	461c      	mov	r4, r3
 80095a8:	e7f3      	b.n	8009592 <__assert_func+0x12>
 80095aa:	bf00      	nop
 80095ac:	2000000c 	.word	0x2000000c
 80095b0:	08009f45 	.word	0x08009f45
 80095b4:	08009f52 	.word	0x08009f52
 80095b8:	08009f80 	.word	0x08009f80

080095bc <_close_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_close_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f8 fab3 	bl	8001b32 <_close>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_close_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_close_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	200003e8 	.word	0x200003e8

080095dc <__sflush_r>:
 80095dc:	898a      	ldrh	r2, [r1, #12]
 80095de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	4605      	mov	r5, r0
 80095e4:	0710      	lsls	r0, r2, #28
 80095e6:	460c      	mov	r4, r1
 80095e8:	d458      	bmi.n	800969c <__sflush_r+0xc0>
 80095ea:	684b      	ldr	r3, [r1, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc05      	bgt.n	80095fc <__sflush_r+0x20>
 80095f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dc02      	bgt.n	80095fc <__sflush_r+0x20>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d0f9      	beq.n	80095f6 <__sflush_r+0x1a>
 8009602:	2300      	movs	r3, #0
 8009604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009608:	682f      	ldr	r7, [r5, #0]
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	d032      	beq.n	8009674 <__sflush_r+0x98>
 800960e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	075a      	lsls	r2, r3, #29
 8009614:	d505      	bpl.n	8009622 <__sflush_r+0x46>
 8009616:	6863      	ldr	r3, [r4, #4]
 8009618:	1ac0      	subs	r0, r0, r3
 800961a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800961c:	b10b      	cbz	r3, 8009622 <__sflush_r+0x46>
 800961e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009620:	1ac0      	subs	r0, r0, r3
 8009622:	2300      	movs	r3, #0
 8009624:	4602      	mov	r2, r0
 8009626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009628:	6a21      	ldr	r1, [r4, #32]
 800962a:	4628      	mov	r0, r5
 800962c:	47b0      	blx	r6
 800962e:	1c43      	adds	r3, r0, #1
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	d106      	bne.n	8009642 <__sflush_r+0x66>
 8009634:	6829      	ldr	r1, [r5, #0]
 8009636:	291d      	cmp	r1, #29
 8009638:	d82c      	bhi.n	8009694 <__sflush_r+0xb8>
 800963a:	4a2a      	ldr	r2, [pc, #168]	; (80096e4 <__sflush_r+0x108>)
 800963c:	40ca      	lsrs	r2, r1
 800963e:	07d6      	lsls	r6, r2, #31
 8009640:	d528      	bpl.n	8009694 <__sflush_r+0xb8>
 8009642:	2200      	movs	r2, #0
 8009644:	6062      	str	r2, [r4, #4]
 8009646:	04d9      	lsls	r1, r3, #19
 8009648:	6922      	ldr	r2, [r4, #16]
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	d504      	bpl.n	8009658 <__sflush_r+0x7c>
 800964e:	1c42      	adds	r2, r0, #1
 8009650:	d101      	bne.n	8009656 <__sflush_r+0x7a>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	b903      	cbnz	r3, 8009658 <__sflush_r+0x7c>
 8009656:	6560      	str	r0, [r4, #84]	; 0x54
 8009658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965a:	602f      	str	r7, [r5, #0]
 800965c:	2900      	cmp	r1, #0
 800965e:	d0ca      	beq.n	80095f6 <__sflush_r+0x1a>
 8009660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009664:	4299      	cmp	r1, r3
 8009666:	d002      	beq.n	800966e <__sflush_r+0x92>
 8009668:	4628      	mov	r0, r5
 800966a:	f7ff faeb 	bl	8008c44 <_free_r>
 800966e:	2000      	movs	r0, #0
 8009670:	6360      	str	r0, [r4, #52]	; 0x34
 8009672:	e7c1      	b.n	80095f8 <__sflush_r+0x1c>
 8009674:	6a21      	ldr	r1, [r4, #32]
 8009676:	2301      	movs	r3, #1
 8009678:	4628      	mov	r0, r5
 800967a:	47b0      	blx	r6
 800967c:	1c41      	adds	r1, r0, #1
 800967e:	d1c7      	bne.n	8009610 <__sflush_r+0x34>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0c4      	beq.n	8009610 <__sflush_r+0x34>
 8009686:	2b1d      	cmp	r3, #29
 8009688:	d001      	beq.n	800968e <__sflush_r+0xb2>
 800968a:	2b16      	cmp	r3, #22
 800968c:	d101      	bne.n	8009692 <__sflush_r+0xb6>
 800968e:	602f      	str	r7, [r5, #0]
 8009690:	e7b1      	b.n	80095f6 <__sflush_r+0x1a>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7ad      	b.n	80095f8 <__sflush_r+0x1c>
 800969c:	690f      	ldr	r7, [r1, #16]
 800969e:	2f00      	cmp	r7, #0
 80096a0:	d0a9      	beq.n	80095f6 <__sflush_r+0x1a>
 80096a2:	0793      	lsls	r3, r2, #30
 80096a4:	680e      	ldr	r6, [r1, #0]
 80096a6:	bf08      	it	eq
 80096a8:	694b      	ldreq	r3, [r1, #20]
 80096aa:	600f      	str	r7, [r1, #0]
 80096ac:	bf18      	it	ne
 80096ae:	2300      	movne	r3, #0
 80096b0:	eba6 0807 	sub.w	r8, r6, r7
 80096b4:	608b      	str	r3, [r1, #8]
 80096b6:	f1b8 0f00 	cmp.w	r8, #0
 80096ba:	dd9c      	ble.n	80095f6 <__sflush_r+0x1a>
 80096bc:	6a21      	ldr	r1, [r4, #32]
 80096be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096c0:	4643      	mov	r3, r8
 80096c2:	463a      	mov	r2, r7
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b0      	blx	r6
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dc06      	bgt.n	80096da <__sflush_r+0xfe>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e78e      	b.n	80095f8 <__sflush_r+0x1c>
 80096da:	4407      	add	r7, r0
 80096dc:	eba8 0800 	sub.w	r8, r8, r0
 80096e0:	e7e9      	b.n	80096b6 <__sflush_r+0xda>
 80096e2:	bf00      	nop
 80096e4:	20400001 	.word	0x20400001

080096e8 <_fflush_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	690b      	ldr	r3, [r1, #16]
 80096ec:	4605      	mov	r5, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	b913      	cbnz	r3, 80096f8 <_fflush_r+0x10>
 80096f2:	2500      	movs	r5, #0
 80096f4:	4628      	mov	r0, r5
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	b118      	cbz	r0, 8009702 <_fflush_r+0x1a>
 80096fa:	6983      	ldr	r3, [r0, #24]
 80096fc:	b90b      	cbnz	r3, 8009702 <_fflush_r+0x1a>
 80096fe:	f7fe f99b 	bl	8007a38 <__sinit>
 8009702:	4b14      	ldr	r3, [pc, #80]	; (8009754 <_fflush_r+0x6c>)
 8009704:	429c      	cmp	r4, r3
 8009706:	d11b      	bne.n	8009740 <_fflush_r+0x58>
 8009708:	686c      	ldr	r4, [r5, #4]
 800970a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0ef      	beq.n	80096f2 <_fflush_r+0xa>
 8009712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009714:	07d0      	lsls	r0, r2, #31
 8009716:	d404      	bmi.n	8009722 <_fflush_r+0x3a>
 8009718:	0599      	lsls	r1, r3, #22
 800971a:	d402      	bmi.n	8009722 <_fflush_r+0x3a>
 800971c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800971e:	f7fe fd9c 	bl	800825a <__retarget_lock_acquire_recursive>
 8009722:	4628      	mov	r0, r5
 8009724:	4621      	mov	r1, r4
 8009726:	f7ff ff59 	bl	80095dc <__sflush_r>
 800972a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800972c:	07da      	lsls	r2, r3, #31
 800972e:	4605      	mov	r5, r0
 8009730:	d4e0      	bmi.n	80096f4 <_fflush_r+0xc>
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	059b      	lsls	r3, r3, #22
 8009736:	d4dd      	bmi.n	80096f4 <_fflush_r+0xc>
 8009738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800973a:	f7fe fd8f 	bl	800825c <__retarget_lock_release_recursive>
 800973e:	e7d9      	b.n	80096f4 <_fflush_r+0xc>
 8009740:	4b05      	ldr	r3, [pc, #20]	; (8009758 <_fflush_r+0x70>)
 8009742:	429c      	cmp	r4, r3
 8009744:	d101      	bne.n	800974a <_fflush_r+0x62>
 8009746:	68ac      	ldr	r4, [r5, #8]
 8009748:	e7df      	b.n	800970a <_fflush_r+0x22>
 800974a:	4b04      	ldr	r3, [pc, #16]	; (800975c <_fflush_r+0x74>)
 800974c:	429c      	cmp	r4, r3
 800974e:	bf08      	it	eq
 8009750:	68ec      	ldreq	r4, [r5, #12]
 8009752:	e7da      	b.n	800970a <_fflush_r+0x22>
 8009754:	08009d18 	.word	0x08009d18
 8009758:	08009d38 	.word	0x08009d38
 800975c:	08009cf8 	.word	0x08009cf8

08009760 <fiprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	b503      	push	{r0, r1, lr}
 8009764:	4601      	mov	r1, r0
 8009766:	ab03      	add	r3, sp, #12
 8009768:	4805      	ldr	r0, [pc, #20]	; (8009780 <fiprintf+0x20>)
 800976a:	f853 2b04 	ldr.w	r2, [r3], #4
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f7ff fc97 	bl	80090a4 <_vfiprintf_r>
 8009776:	b002      	add	sp, #8
 8009778:	f85d eb04 	ldr.w	lr, [sp], #4
 800977c:	b003      	add	sp, #12
 800977e:	4770      	bx	lr
 8009780:	2000000c 	.word	0x2000000c

08009784 <_lseek_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4d07      	ldr	r5, [pc, #28]	; (80097a4 <_lseek_r+0x20>)
 8009788:	4604      	mov	r4, r0
 800978a:	4608      	mov	r0, r1
 800978c:	4611      	mov	r1, r2
 800978e:	2200      	movs	r2, #0
 8009790:	602a      	str	r2, [r5, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	f7f8 f9f4 	bl	8001b80 <_lseek>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_lseek_r+0x1e>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_lseek_r+0x1e>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	200003e8 	.word	0x200003e8

080097a8 <__swhatbuf_r>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	460e      	mov	r6, r1
 80097ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b0:	2900      	cmp	r1, #0
 80097b2:	b096      	sub	sp, #88	; 0x58
 80097b4:	4614      	mov	r4, r2
 80097b6:	461d      	mov	r5, r3
 80097b8:	da07      	bge.n	80097ca <__swhatbuf_r+0x22>
 80097ba:	2300      	movs	r3, #0
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	89b3      	ldrh	r3, [r6, #12]
 80097c0:	061a      	lsls	r2, r3, #24
 80097c2:	d410      	bmi.n	80097e6 <__swhatbuf_r+0x3e>
 80097c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c8:	e00e      	b.n	80097e8 <__swhatbuf_r+0x40>
 80097ca:	466a      	mov	r2, sp
 80097cc:	f000 f8b6 	bl	800993c <_fstat_r>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	dbf2      	blt.n	80097ba <__swhatbuf_r+0x12>
 80097d4:	9a01      	ldr	r2, [sp, #4]
 80097d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097de:	425a      	negs	r2, r3
 80097e0:	415a      	adcs	r2, r3
 80097e2:	602a      	str	r2, [r5, #0]
 80097e4:	e7ee      	b.n	80097c4 <__swhatbuf_r+0x1c>
 80097e6:	2340      	movs	r3, #64	; 0x40
 80097e8:	2000      	movs	r0, #0
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	b016      	add	sp, #88	; 0x58
 80097ee:	bd70      	pop	{r4, r5, r6, pc}

080097f0 <__smakebuf_r>:
 80097f0:	898b      	ldrh	r3, [r1, #12]
 80097f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097f4:	079d      	lsls	r5, r3, #30
 80097f6:	4606      	mov	r6, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	d507      	bpl.n	800980c <__smakebuf_r+0x1c>
 80097fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	2301      	movs	r3, #1
 8009806:	6163      	str	r3, [r4, #20]
 8009808:	b002      	add	sp, #8
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	ab01      	add	r3, sp, #4
 800980e:	466a      	mov	r2, sp
 8009810:	f7ff ffca 	bl	80097a8 <__swhatbuf_r>
 8009814:	9900      	ldr	r1, [sp, #0]
 8009816:	4605      	mov	r5, r0
 8009818:	4630      	mov	r0, r6
 800981a:	f7ff fa63 	bl	8008ce4 <_malloc_r>
 800981e:	b948      	cbnz	r0, 8009834 <__smakebuf_r+0x44>
 8009820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d4ef      	bmi.n	8009808 <__smakebuf_r+0x18>
 8009828:	f023 0303 	bic.w	r3, r3, #3
 800982c:	f043 0302 	orr.w	r3, r3, #2
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	e7e3      	b.n	80097fc <__smakebuf_r+0xc>
 8009834:	4b0d      	ldr	r3, [pc, #52]	; (800986c <__smakebuf_r+0x7c>)
 8009836:	62b3      	str	r3, [r6, #40]	; 0x28
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	6020      	str	r0, [r4, #0]
 800983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	9b00      	ldr	r3, [sp, #0]
 8009844:	6163      	str	r3, [r4, #20]
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	6120      	str	r0, [r4, #16]
 800984a:	b15b      	cbz	r3, 8009864 <__smakebuf_r+0x74>
 800984c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009850:	4630      	mov	r0, r6
 8009852:	f000 f885 	bl	8009960 <_isatty_r>
 8009856:	b128      	cbz	r0, 8009864 <__smakebuf_r+0x74>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	89a0      	ldrh	r0, [r4, #12]
 8009866:	4305      	orrs	r5, r0
 8009868:	81a5      	strh	r5, [r4, #12]
 800986a:	e7cd      	b.n	8009808 <__smakebuf_r+0x18>
 800986c:	080079d1 	.word	0x080079d1

08009870 <memmove>:
 8009870:	4288      	cmp	r0, r1
 8009872:	b510      	push	{r4, lr}
 8009874:	eb01 0402 	add.w	r4, r1, r2
 8009878:	d902      	bls.n	8009880 <memmove+0x10>
 800987a:	4284      	cmp	r4, r0
 800987c:	4623      	mov	r3, r4
 800987e:	d807      	bhi.n	8009890 <memmove+0x20>
 8009880:	1e43      	subs	r3, r0, #1
 8009882:	42a1      	cmp	r1, r4
 8009884:	d008      	beq.n	8009898 <memmove+0x28>
 8009886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800988a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800988e:	e7f8      	b.n	8009882 <memmove+0x12>
 8009890:	4402      	add	r2, r0
 8009892:	4601      	mov	r1, r0
 8009894:	428a      	cmp	r2, r1
 8009896:	d100      	bne.n	800989a <memmove+0x2a>
 8009898:	bd10      	pop	{r4, pc}
 800989a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800989e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098a2:	e7f7      	b.n	8009894 <memmove+0x24>

080098a4 <__malloc_lock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_lock+0x8>)
 80098a6:	f7fe bcd8 	b.w	800825a <__retarget_lock_acquire_recursive>
 80098aa:	bf00      	nop
 80098ac:	200003e0 	.word	0x200003e0

080098b0 <__malloc_unlock>:
 80098b0:	4801      	ldr	r0, [pc, #4]	; (80098b8 <__malloc_unlock+0x8>)
 80098b2:	f7fe bcd3 	b.w	800825c <__retarget_lock_release_recursive>
 80098b6:	bf00      	nop
 80098b8:	200003e0 	.word	0x200003e0

080098bc <_realloc_r>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	4607      	mov	r7, r0
 80098c0:	4614      	mov	r4, r2
 80098c2:	460e      	mov	r6, r1
 80098c4:	b921      	cbnz	r1, 80098d0 <_realloc_r+0x14>
 80098c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098ca:	4611      	mov	r1, r2
 80098cc:	f7ff ba0a 	b.w	8008ce4 <_malloc_r>
 80098d0:	b922      	cbnz	r2, 80098dc <_realloc_r+0x20>
 80098d2:	f7ff f9b7 	bl	8008c44 <_free_r>
 80098d6:	4625      	mov	r5, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098dc:	f000 f850 	bl	8009980 <_malloc_usable_size_r>
 80098e0:	42a0      	cmp	r0, r4
 80098e2:	d20f      	bcs.n	8009904 <_realloc_r+0x48>
 80098e4:	4621      	mov	r1, r4
 80098e6:	4638      	mov	r0, r7
 80098e8:	f7ff f9fc 	bl	8008ce4 <_malloc_r>
 80098ec:	4605      	mov	r5, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d0f2      	beq.n	80098d8 <_realloc_r+0x1c>
 80098f2:	4631      	mov	r1, r6
 80098f4:	4622      	mov	r2, r4
 80098f6:	f7fe fccd 	bl	8008294 <memcpy>
 80098fa:	4631      	mov	r1, r6
 80098fc:	4638      	mov	r0, r7
 80098fe:	f7ff f9a1 	bl	8008c44 <_free_r>
 8009902:	e7e9      	b.n	80098d8 <_realloc_r+0x1c>
 8009904:	4635      	mov	r5, r6
 8009906:	e7e7      	b.n	80098d8 <_realloc_r+0x1c>

08009908 <_read_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d07      	ldr	r5, [pc, #28]	; (8009928 <_read_r+0x20>)
 800990c:	4604      	mov	r4, r0
 800990e:	4608      	mov	r0, r1
 8009910:	4611      	mov	r1, r2
 8009912:	2200      	movs	r2, #0
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f7f8 f8d2 	bl	8001ac0 <_read>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_read_r+0x1e>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_read_r+0x1e>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	200003e8 	.word	0x200003e8

0800992c <abort>:
 800992c:	b508      	push	{r3, lr}
 800992e:	2006      	movs	r0, #6
 8009930:	f000 f856 	bl	80099e0 <raise>
 8009934:	2001      	movs	r0, #1
 8009936:	f7f8 f8b9 	bl	8001aac <_exit>
	...

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f8 f8fe 	bl	8001b4a <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	200003e8 	.word	0x200003e8

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 f8fd 	bl	8001b6a <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	200003e8 	.word	0x200003e8

08009980 <_malloc_usable_size_r>:
 8009980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009984:	1f18      	subs	r0, r3, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfbc      	itt	lt
 800998a:	580b      	ldrlt	r3, [r1, r0]
 800998c:	18c0      	addlt	r0, r0, r3
 800998e:	4770      	bx	lr

08009990 <_raise_r>:
 8009990:	291f      	cmp	r1, #31
 8009992:	b538      	push	{r3, r4, r5, lr}
 8009994:	4604      	mov	r4, r0
 8009996:	460d      	mov	r5, r1
 8009998:	d904      	bls.n	80099a4 <_raise_r+0x14>
 800999a:	2316      	movs	r3, #22
 800999c:	6003      	str	r3, [r0, #0]
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099a6:	b112      	cbz	r2, 80099ae <_raise_r+0x1e>
 80099a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ac:	b94b      	cbnz	r3, 80099c2 <_raise_r+0x32>
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 f830 	bl	8009a14 <_getpid_r>
 80099b4:	462a      	mov	r2, r5
 80099b6:	4601      	mov	r1, r0
 80099b8:	4620      	mov	r0, r4
 80099ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099be:	f000 b817 	b.w	80099f0 <_kill_r>
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d00a      	beq.n	80099dc <_raise_r+0x4c>
 80099c6:	1c59      	adds	r1, r3, #1
 80099c8:	d103      	bne.n	80099d2 <_raise_r+0x42>
 80099ca:	2316      	movs	r3, #22
 80099cc:	6003      	str	r3, [r0, #0]
 80099ce:	2001      	movs	r0, #1
 80099d0:	e7e7      	b.n	80099a2 <_raise_r+0x12>
 80099d2:	2400      	movs	r4, #0
 80099d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099d8:	4628      	mov	r0, r5
 80099da:	4798      	blx	r3
 80099dc:	2000      	movs	r0, #0
 80099de:	e7e0      	b.n	80099a2 <_raise_r+0x12>

080099e0 <raise>:
 80099e0:	4b02      	ldr	r3, [pc, #8]	; (80099ec <raise+0xc>)
 80099e2:	4601      	mov	r1, r0
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	f7ff bfd3 	b.w	8009990 <_raise_r>
 80099ea:	bf00      	nop
 80099ec:	2000000c 	.word	0x2000000c

080099f0 <_kill_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	; (8009a10 <_kill_r+0x20>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	602b      	str	r3, [r5, #0]
 80099fe:	f7f8 f845 	bl	8001a8c <_kill>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d102      	bne.n	8009a0c <_kill_r+0x1c>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	b103      	cbz	r3, 8009a0c <_kill_r+0x1c>
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	200003e8 	.word	0x200003e8

08009a14 <_getpid_r>:
 8009a14:	f7f8 b832 	b.w	8001a7c <_getpid>

08009a18 <_init>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr

08009a24 <_fini>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr
